repo,number,diff,summary
numpy/numpy,29099,"diff --git a/numpy/f2py/cfuncs.py b/numpy/f2py/cfuncs.py
index 6c48c1ef0175..b2b1cad3d867 100644
--- a/numpy/f2py/cfuncs.py
+++ b/numpy/f2py/cfuncs.py
@@ -598,32 +598,37 @@ def errmess(s: str) -> None:
     return ii;
 }""""""
 cfuncs['forcomb'] = """"""
-static struct { int nd;npy_intp *d;int *i,*i_tr,tr; } forcombcache;
-static int initforcomb(npy_intp *dims,int nd,int tr) {
+struct ForcombCache { int nd;npy_intp *d;int *i,*i_tr,tr; };
+static int initforcomb(struct ForcombCache *cache, npy_intp *dims,int nd,int tr) {
   int k;
   if (dims==NULL) return 0;
   if (nd<0) return 0;
-  forcombcache.nd = nd;
-  forcombcache.d = dims;
-  forcombcache.tr = tr;
-  if ((forcombcache.i = (int *)malloc(sizeof(int)*nd))==NULL) return 0;
-  if ((forcombcache.i_tr = (int *)malloc(sizeof(int)*nd))==NULL) return 0;
+  cache->nd = nd;
+  cache->d = dims;
+  cache->tr = tr;
+
+  cache->i = (int *)malloc(sizeof(int)*nd);
+  if (cache->i==NULL) return 0;
+  cache->i_tr = (int *)malloc(sizeof(int)*nd);
+  if (cache->i_tr==NULL) {free(cache->i); return 0;};
+
   for (k=1;k<nd;k++) {
-    forcombcache.i[k] = forcombcache.i_tr[nd-k-1] = 0;
+    cache->i[k] = cache->i_tr[nd-k-1] = 0;
   }
-  forcombcache.i[0] = forcombcache.i_tr[nd-1] = -1;
+  cache->i[0] = cache->i_tr[nd-1] = -1;
   return 1;
 }
-static int *nextforcomb(void) {
+static int *nextforcomb(struct ForcombCache *cache) {
+  if (cache==NULL) return NULL;
   int j,*i,*i_tr,k;
-  int nd=forcombcache.nd;
-  if ((i=forcombcache.i) == NULL) return NULL;
-  if ((i_tr=forcombcache.i_tr) == NULL) return NULL;
-  if (forcombcache.d == NULL) return NULL;
+  int nd=cache->nd;
+  if ((i=cache->i) == NULL) return NULL;
+  if ((i_tr=cache->i_tr) == NULL) return NULL;
+  if (cache->d == NULL) return NULL;
   i[0]++;
-  if (i[0]==forcombcache.d[0]) {
+  if (i[0]==cache->d[0]) {
     j=1;
-    while ((j<nd) && (i[j]==forcombcache.d[j]-1)) j++;
+    while ((j<nd) && (i[j]==cache->d[j]-1)) j++;
     if (j==nd) {
       free(i);
       free(i_tr);
@@ -634,7 +639,7 @@ def errmess(s: str) -> None:
     i_tr[nd-j-1]++;
   } else
     i_tr[nd-1]++;
-  if (forcombcache.tr) return i_tr;
+  if (cache->tr) return i_tr;
   return i;
 }""""""
 needs['try_pyarr_from_string'] = ['STRINGCOPYN', 'PRINTPYOBJERR', 'string']
diff --git a/numpy/f2py/rules.py b/numpy/f2py/rules.py
index c10d2afdd097..667ef287f92b 100644
--- a/numpy/f2py/rules.py
+++ b/numpy/f2py/rules.py
@@ -1184,9 +1184,10 @@
                 """"""\
         int *_i,capi_i=0;
         CFUNCSMESS(\""#name#: Initializing #varname#=#init#\\n\"");
-        if (initforcomb(PyArray_DIMS(capi_#varname#_as_array),
+        struct ForcombCache cache;
+        if (initforcomb(&cache, PyArray_DIMS(capi_#varname#_as_array),
                         PyArray_NDIM(capi_#varname#_as_array),1)) {
-            while ((_i = nextforcomb()))
+            while ((_i = nextforcomb(&cache)))
                 #varname#[capi_i++] = #init#; /* fortran way */
         } else {
             PyObject *exc, *val, *tb;
","Backport of #29091.

Closes #29086

There are zero tests for this (you could add a syntax error and the numpy test suite would still pass).
With my complete lack of knowledge of fortran, I'm unable to write one.

Tested in scipy: https://github.com/scipy/scipy/pull/23084


<!--         ----------------------------------------------------------------
                MAKE SURE YOUR PR GETS THE ATTENTION IT DESERVES!
                ----------------------------------------------------------------

*  FORMAT IT RIGHT:
      https://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message

*  IF IT'S A NEW FEATURE OR API CHANGE, TEST THE WATERS:
      https://www.numpy.org/devdocs/dev/development_workflow.html#get-the-mailing-list-s-opinion

*  HIT ALL THE GUIDELINES:
      https://numpy.org/devdocs/dev/index.html#guidelines

*  WHAT TO DO IF WE HAVEN'T GOTTEN BACK TO YOU:
      https://www.numpy.org/devdocs/dev/development_workflow.html#getting-your-pr-reviewed
-->
"
django/django,18618,"diff --git a/docs/topics/signing.txt b/docs/topics/signing.txt
index 9572f9baf917..c0394da2e598 100644
--- a/docs/topics/signing.txt
+++ b/docs/topics/signing.txt
@@ -50,7 +50,7 @@ To sign a value, first instantiate a ``Signer`` instance:
     >>> signer = Signer()
     >>> value = signer.sign(""My string"")
     >>> value
-    'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w'
+    'My string:v9G-nxfz3iQGTXrePqYPlGvH79WTcIgj1QIQSUODTW0'
 
 The signature is appended to the end of the string, following the colon.
 You can retrieve the original value using the ``unsign`` method:
@@ -79,7 +79,7 @@ If you wish to protect a list, tuple, or dictionary you can do so using the
 
     >>> signed_obj = signer.sign_object({""message"": ""Hello!""})
     >>> signed_obj
-    'eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4'
+    'eyJtZXNzYWdlIjoiSGVsbG8hIn0:bzb48DBkB-bwLaCnUVB75r5VAPUEpzWJPrTb80JMIXM'
     >>> obj = signer.unsign_object(signed_obj)
     >>> obj
     {'message': 'Hello!'}
@@ -108,7 +108,7 @@ generate signatures. You can use a different secret by passing it to the
     >>> signer = Signer(key=""my-other-secret"")
     >>> value = signer.sign(""My string"")
     >>> value
-    'My string:EkfQJafvGyiofrdGnuthdxImIJw'
+    'My string:o3DrrsT6JRB73t-HDymfDNbTSxfMlom2d8TiUlb1hWY'
 
 .. class:: Signer(*, key=None, sep=':', salt=None, algorithm=None, fallback_keys=None)
 
@@ -132,13 +132,13 @@ your :setting:`SECRET_KEY`:
 
     >>> signer = Signer()
     >>> signer.sign(""My string"")
-    'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w'
+    'My string:v9G-nxfz3iQGTXrePqYPlGvH79WTcIgj1QIQSUODTW0'
     >>> signer.sign_object({""message"": ""Hello!""})
-    'eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4'
+    'eyJtZXNzYWdlIjoiSGVsbG8hIn0:bzb48DBkB-bwLaCnUVB75r5VAPUEpzWJPrTb80JMIXM'
     >>> signer = Signer(salt=""extra"")
     >>> signer.sign(""My string"")
-    'My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw'
-    >>> signer.unsign(""My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw"")
+    'My string:YMD-FR6rof3heDkFRffdmG4pXbAZSOtb-aQxg3vmmfc'
+    >>> signer.unsign(""My string:YMD-FR6rof3heDkFRffdmG4pXbAZSOtb-aQxg3vmmfc"")
     'My string'
     >>> signer.sign_object({""message"": ""Hello!""})
     'eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I'
@@ -172,7 +172,7 @@ created within a specified period of time:
     >>> signer = TimestampSigner()
     >>> value = signer.sign(""hello"")
     >>> value
-    'hello:1NMg5H:oPVuCqlJWmChm1rA2lyTUtelC-c'
+    'hello:1stLqR:_rvr4oXCgT4HyfwjXaU39QvTnuNuUthFRCzNOy4Hqt0'
     >>> signer.unsign(value)
     'hello'
     >>> signer.unsign(value, max_age=10)
@@ -224,12 +224,12 @@ arbitrary commands by exploiting the pickle format:
     >>> signer = signing.TimestampSigner()
     >>> value = signer.sign_object({""foo"": ""bar""})
     >>> value
-    'eyJmb28iOiJiYXIifQ:1kx6R3:D4qGKiptAqo5QW9iv4eNLc6xl4RwiFfes6oOcYhkYnc'
+    'eyJmb28iOiJiYXIifQ:1stLrZ:_QiOBHafwucBF9FyAr54qEs84ZO1UdsO1XiTJCvvdno'
     >>> signer.unsign_object(value)
     {'foo': 'bar'}
     >>> value = signing.dumps({""foo"": ""bar""})
     >>> value
-    'eyJmb28iOiJiYXIifQ:1kx6Rf:LBB39RQmME-SRvilheUe5EmPYRbuDBgQp2tCAi7KGLk'
+    'eyJmb28iOiJiYXIifQ:1stLsC:JItq2ZVjmAK6ivrWI-v1Gk1QVf2hOF52oaEqhZHca7I'
     >>> signing.loads(value)
     {'foo': 'bar'}
 
","`Signer`/`TimestampSigner` uses SHA-256 by default.

Follow up to 71c4fb7beb8e3293243140e4bd74e53989196440.
"
django/django,18524,"diff --git a/django/contrib/postgres/operations.py b/django/contrib/postgres/operations.py
index 1ee5fbc2e2c2..84360febf90f 100644
--- a/django/contrib/postgres/operations.py
+++ b/django/contrib/postgres/operations.py
@@ -237,6 +237,11 @@ def describe(self):
     def migration_name_fragment(self):
         return ""create_collation_%s"" % self.name.lower()
 
+    def reduce(self, operation, app_label):
+        if isinstance(operation, RemoveCollation) and self.name == operation.name:
+            return []
+        return super().reduce(operation, app_label)
+
 
 class RemoveCollation(CollationOperation):
     """"""Remove a collation.""""""
diff --git a/tests/postgres_tests/test_operations.py b/tests/postgres_tests/test_operations.py
index f344d4ae743c..322f38148b5d 100644
--- a/tests/postgres_tests/test_operations.py
+++ b/tests/postgres_tests/test_operations.py
@@ -318,7 +318,7 @@ def test_drop_nonexistent_extension(self):
 
 
 @unittest.skipUnless(connection.vendor == ""postgresql"", ""PostgreSQL specific tests."")
-class CreateCollationTests(PostgreSQLTestCase):
+class CreateCollationTests(OptimizerTestBase, PostgreSQLTestCase):
     app_label = ""test_allow_create_collation""
 
     @override_settings(DATABASE_ROUTERS=[NoMigrationRouter()])
@@ -459,6 +459,24 @@ def test_writer(self):
             ""),"",
         )
 
+    def test_reduce_create_remove(self):
+        self.assertOptimizesTo(
+            [
+                CreateCollation(
+                    ""sample_collation"",
+                    ""und-u-ks-level2"",
+                    provider=""icu"",
+                    deterministic=False,
+                ),
+                RemoveCollation(
+                    ""sample_collation"",
+                    # Different locale
+                    ""de-u-ks-level1"",
+                ),
+            ],
+            [],
+        )
+
 
 @unittest.skipUnless(connection.vendor == ""postgresql"", ""PostgreSQL specific tests."")
 class RemoveCollationTests(PostgreSQLTestCase):
","#### Trac ticket number

ticket-35717

#### Branch description

Add `CreateCollation.reduce()` which will optimize away the addition + removal of a collation.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,17014,"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index eaae0bf6953b..13b70ed41ca5 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -147,9 +147,16 @@ def save(self, commit=True):
 
 
 class UserCreationForm(BaseUserCreationForm):
+    def contains_unwanted_characters(self, username):
+        """"""Check if the username contains characters that normalize to whitespace.""""""
+        normalized_username = unicodedata.normalize(""NFKC"", username)
+        return username != normalized_username.strip()
+
     def clean_username(self):
-        """"""Reject usernames that differ only in case.""""""
+        """"""Reject usernames that differ only in case or contain unwanted characters.""""""
         username = self.cleaned_data.get(""username"")
+
+        # Check for case-insensitive duplicates
         if (
             username
             and self._meta.model.objects.filter(username__iexact=username).exists()
@@ -163,6 +170,11 @@ def clean_username(self):
                     }
                 )
             )
+        # Check for unwanted characters
+        elif self.contains_unwanted_characters(username):
+            self._update_errors(
+                ValidationError({""username"": ""Username has misleading characters.""})
+            )
         else:
             return username
 
","I think the correct solution to this security error was to add a validation step that rejects user names with certain characters, I hope this is the correct solution and if something else needs to be changed, please let me know, thank you very much."
django/django,19342,"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 9fde8496e933..4d31c36175e0 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1221,7 +1221,7 @@ def add_annotation(self, annotation, alias, select=True):
         else:
             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
         self.annotations[alias] = annotation
-        if self.selected:
+        if select and self.selected:
             self.selected[alias] = alias
 
     @property
diff --git a/docs/releases/5.2.1.txt b/docs/releases/5.2.1.txt
index 0f95eda8482f..53f18152aef7 100644
--- a/docs/releases/5.2.1.txt
+++ b/docs/releases/5.2.1.txt
@@ -19,3 +19,7 @@ Bugfixes
 * Fixed a regression in Django 5.2 that caused a crash of
   ``QuerySet.bulk_create()`` with nullable geometry fields on PostGIS
   (:ticket:`36289`).
+
+* Fixed a regression in Django 5.2 that caused fields to be incorrectly
+  selected when using ``QuerySet.alias()`` after ``values()``
+  (:ticket:`36299`).
diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py
index 5df958c33385..6c0d7b668c33 100644
--- a/tests/annotations/tests.py
+++ b/tests/annotations/tests.py
@@ -1470,6 +1470,10 @@ def test_values_alias(self):
                 with self.assertRaisesMessage(FieldError, msg):
                     getattr(qs, operation)(""rating_alias"")
 
+    def test_alias_after_values(self):
+        qs = Book.objects.values_list(""pk"").alias(other_pk=F(""pk""))
+        self.assertEqual(qs.get(pk=self.b1.pk), (self.b1.pk,))
+
     def test_alias_sql_injection(self):
         crafted_alias = """"""injected_name"" from ""annotations_book""; --""""""
         msg = (
","

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36299

#### Branch description

Regression in 65ad4ade74dc9208b9d686a451cd6045df0c9c3a.

Refs ticket-28900.

Thanks @OutOfFocus4 for the report and tests.
"
django/django,19425,"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index 2214e134d092..65f754e59cce 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -343,15 +343,18 @@ def clean(self):
         password = self.cleaned_data.get(""password"")
 
         if username is not None and password:
-            self.user_cache = authenticate(
-                self.request, username=username, password=password
-            )
-            if self.user_cache is None:
-                raise self.get_invalid_login_error()
-            else:
-                self.confirm_login_allowed(self.user_cache)
-
-        return self.cleaned_data
+            user = UserModel.objects.filter(**{UserModel.USERNAME_FIELD: username}).first()
+            if user:
+                password_check = user.check_password(password)
+                if password_check:
+                    self.user_cache = authenticate(
+                    self.request, username=username, password=password
+                    )
+                    if self.user_cache is None:
+                        self.confirm_login_allowed(user)
+
+                    return self.cleaned_data
+        raise self.get_invalid_login_error()
 
     def confirm_login_allowed(self, user):
         """"""
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

N/A

#### Branch description
In the AuthenticationForm class from Django, if the user is inactive in the database, the form raises the invalid login error message, which is supposed to indicate that the authentication data (credentials) is incorrect. This happens because the authenticate method from django.contrib.auth returns None for inactive users — even when the submitted credentials are actually valid — causing the following logic:

if self.user_cache is None:
    raise self.get_invalid_login_error()
else:
    self.confirm_login_allowed(self.user_cache)

to fail at the self.user_cache is None check.

As a result, instead of raising an appropriate ""inactive user"" error (via confirm_login_allowed), the form incorrectly raises an ""invalid login"" error, misleading the user into thinking their credentials are wrong, when in fact their account is merely inactive.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
numpy/numpy,29156,"diff --git a/.github/workflows/mypy.yml b/.github/workflows/mypy.yml
index 36e89504def7..81fa57239b9b 100644
--- a/.github/workflows/mypy.yml
+++ b/.github/workflows/mypy.yml
@@ -46,9 +46,9 @@ jobs:
       fail-fast: false
       matrix:
         os_python:
+          - [macos-latest, '3.13']
           - [ubuntu-latest, '3.12']
           - [windows-latest, '3.11']
-          - [macos-latest, '3.11']
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       with:
","<!--         ----------------------------------------------------------------
                MAKE SURE YOUR PR GETS THE ATTENTION IT DESERVES!
                ----------------------------------------------------------------

*  FORMAT IT RIGHT:
      https://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message

*  IF IT'S A NEW FEATURE OR API CHANGE, TEST THE WATERS:
      https://www.numpy.org/devdocs/dev/development_workflow.html#get-the-mailing-list-s-opinion

*  HIT ALL THE GUIDELINES:
      https://numpy.org/devdocs/dev/index.html#guidelines

*  WHAT TO DO IF WE HAVEN'T GOTTEN BACK TO YOU:
      https://www.numpy.org/devdocs/dev/development_workflow.html#getting-your-pr-reviewed
-->
"
django/django,7729,"diff --git a/django/db/models/query.py b/django/db/models/query.py
index f96a5f13ff5d..6a0b1ca0accd 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -165,9 +165,9 @@ def __init__(self, model=None, query=None, using=None, hints=None):
         self._result_cache = None
         self._sticky_filter = False
         self._for_write = False
-        self._prefetch_related_lookups = []
+        self._prefetch_related_lookups = ()
         self._prefetch_done = False
-        self._known_related_objects = {}  # {rel_field, {pk: rel_obj}}
+        self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
         self._iterable_class = ModelIterable
         self._fields = None
 
@@ -863,9 +863,9 @@ def prefetch_related(self, *lookups):
         """"""
         clone = self._clone()
         if lookups == (None,):
-            clone._prefetch_related_lookups = []
+            clone._prefetch_related_lookups = ()
         else:
-            clone._prefetch_related_lookups.extend(lookups)
+            clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
         return clone
 
     def annotate(self, *args, **kwargs):
@@ -1061,7 +1061,7 @@ def _clone(self, **kwargs):
             query.filter_is_sticky = True
         clone = self.__class__(model=self.model, query=query, using=self._db, hints=self._hints)
         clone._for_write = self._for_write
-        clone._prefetch_related_lookups = self._prefetch_related_lookups[:]
+        clone._prefetch_related_lookups = self._prefetch_related_lookups
         clone._known_related_objects = self._known_related_objects
         clone._iterable_class = self._iterable_class
         clone._fields = self._fields
@@ -1543,13 +1543,13 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
     # later (happens in nested prefetch_related).
     additional_lookups = [
         copy.copy(additional_lookup) for additional_lookup
-        in getattr(rel_qs, '_prefetch_related_lookups', [])
+        in getattr(rel_qs, '_prefetch_related_lookups', ())
     ]
     if additional_lookups:
         # Don't need to clone because the manager should have given us a fresh
         # instance, so we access an internal instead of using public interface
         # for performance reasons.
-        rel_qs._prefetch_related_lookups = []
+        rel_qs._prefetch_related_lookups = ()
 
     all_related_objects = list(rel_qs)
 
","An easy change to make it immutable.

[Ticket](https://code.djangoproject.com/ticket/27624)."
numpy/numpy,29082,"diff --git a/.github/workflows/wheels.yml b/.github/workflows/wheels.yml
index e96021775f3c..641a12d6b47f 100644
--- a/.github/workflows/wheels.yml
+++ b/.github/workflows/wheels.yml
@@ -184,7 +184,8 @@ jobs:
           name: ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
           path: ./wheelhouse/*.whl
 
-      - uses: mamba-org/setup-micromamba@0dea6379afdaffa5d528b3d1dabc45da37f443fc
+      - name: install micromamba
+        uses: mamba-org/setup-micromamba@0dea6379afdaffa5d528b3d1dabc45da37f443fc
         if: ${{ matrix.buildplat[1] != 'win_arm64' }} # unsupported platform at the moment
         with:
           # for installation of anaconda-client, required for upload to
@@ -198,6 +199,16 @@ jobs:
           create-args: >-
             anaconda-client
 
+      - name: win-arm64 install anaconda client
+        if: ${{ matrix.buildplat[1] == 'win_arm64' }}
+        run: |
+          # Rust installation needed for rpds-py.
+          Invoke-WebRequest https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe -UseBasicParsing -Outfile rustup-init.exe
+          .\rustup-init.exe -y
+          $env:PATH=""$env:PATH;$env:USERPROFILE\.cargo\bin""
+          pip install anaconda-client
+
+
       - name: Upload wheels
         if: success() && github.repository == 'numpy/numpy'
         shell: bash -el {0}
diff --git a/pyproject.toml b/pyproject.toml
index 17fbf71088b8..3f6431ed6dba 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -178,21 +178,16 @@ repair-wheel-command = [
 ]
 
 [tool.cibuildwheel.windows]
-# This does not work, use CIBW_ENVIRONMENT_WINDOWS
-environment = {PKG_CONFIG_PATH=""./.openblas""}
 config-settings = ""setup-args=--vsenv setup-args=-Dallow-noblas=false build-dir=build""
 repair-wheel-command = ""bash -el ./tools/wheels/repair_windows.sh {wheel} {dest_dir}""
+# This does not work, use CIBW_ENVIRONMENT_WINDOWS
+environment = {PKG_CONFIG_PATH=""./.openblas""}
 
 [[tool.cibuildwheel.overrides]]
 select = ""*-win32""
 config-settings = ""setup-args=--vsenv setup-args=-Dallow-noblas=true build-dir=build""
 repair-wheel-command = """"
 
-[[tool.cibuildwheel.overrides]]
-select = ""*-win_arm64""
-config-settings = ""setup-args=--vsenv setup-args=-Dallow-noblas=true build-dir=build""
-repair-wheel-command = """"
-
 [[tool.cibuildwheel.overrides]]
 select = ""*pyodide*""
 before-test = ""pip install -r {project}/requirements/emscripten_test_requirements.txt""
diff --git a/requirements/ci32_requirements.txt b/requirements/ci32_requirements.txt
index 5a7be719214a..74c9a51ec111 100644
--- a/requirements/ci32_requirements.txt
+++ b/requirements/ci32_requirements.txt
@@ -1,3 +1,4 @@
 spin==0.13
 # Keep this in sync with ci_requirements.txt
-scipy-openblas32==0.3.29.0.0
+scipy-openblas32==0.3.29.0.0 ; sys_platform != 'win32' or platform_machine != 'ARM64'
+scipy-openblas32==0.3.29.265.0 ; sys_platform == 'win32' and platform_machine == 'ARM64'
diff --git a/requirements/ci_requirements.txt b/requirements/ci_requirements.txt
index adf7d86558f0..b6ea06c812c8 100644
--- a/requirements/ci_requirements.txt
+++ b/requirements/ci_requirements.txt
@@ -1,4 +1,6 @@
 spin==0.13
 # Keep this in sync with ci32_requirements.txt
-scipy-openblas32==0.3.29.0.0
-scipy-openblas64==0.3.29.0.0
+scipy-openblas32==0.3.29.0.0 ; sys_platform != 'win32' or platform_machine != 'ARM64'
+scipy-openblas32==0.3.29.265.0 ; sys_platform == 'win32' and platform_machine == 'ARM64'
+# Note there is not yet a win-arm64 wheel, so we currently only exclude win-arm64
+scipy-openblas64==0.3.29.0.0 ; sys_platform != 'win32' or platform_machine != 'ARM64'
diff --git a/tools/wheels/cibw_before_build.sh b/tools/wheels/cibw_before_build.sh
index 3e1d4498fe7c..e41e5d37316b 100644
--- a/tools/wheels/cibw_before_build.sh
+++ b/tools/wheels/cibw_before_build.sh
@@ -22,9 +22,6 @@ fi
 if [[ $(python -c""import sys; print(sys.maxsize)"") < $(python -c""import sys; print(2**33)"") ]]; then
     echo ""No BLAS used for 32-bit wheels""
     export INSTALL_OPENBLAS=false
-elif [[ $(python -c""import sysconfig; print(sysconfig.get_platform())"") == ""win-arm64"" ]]; then
-    echo ""No BLAS used for ARM64 wheels""
-    export INSTALL_OPENBLAS=false
 elif [ -z $INSTALL_OPENBLAS ]; then
     # the macos_arm64 build might not set this variable
     export INSTALL_OPENBLAS=true
@@ -32,20 +29,33 @@ fi
 
 # Install Openblas from scipy-openblas64
 if [[ ""$INSTALL_OPENBLAS"" = ""true"" ]] ; then
-    echo PKG_CONFIG_PATH $PKG_CONFIG_PATH
+    # by default, use scipy-openblas64
+    OPENBLAS=openblas64
+    # Possible values for RUNNER_ARCH in github are
+    # X86, X64, ARM, or ARM64
+    # TODO: should we detect a missing RUNNER_ARCH and use platform.machine()
+    #    when wheel build is run outside github?
+    # On 32-bit platforms, use scipy_openblas32
+    # On win-arm64 use scipy_openblas32
+    if [[ $RUNNER_ARCH == ""X86"" || $RUNNER_ARCH == ""ARM"" ]] ; then
+        OPENBLAS=openblas32
+    elif [[ $RUNNER_ARCH == ""ARM64"" && $RUNNER_OS == ""Windows"" ]] ; then
+        OPENBLAS=openblas32
+    fi
+    echo PKG_CONFIG_PATH is $PKG_CONFIG_PATH, OPENBLAS is ${OPENBLAS}
     PKG_CONFIG_PATH=$PROJECT_DIR/.openblas
     rm -rf $PKG_CONFIG_PATH
     mkdir -p $PKG_CONFIG_PATH
     python -m pip install -r requirements/ci_requirements.txt
-    python -c ""import scipy_openblas64; print(scipy_openblas64.get_pkg_config())"" > $PKG_CONFIG_PATH/scipy-openblas.pc
+    python -c ""import scipy_${OPENBLAS}; print(scipy_${OPENBLAS}.get_pkg_config())"" > $PKG_CONFIG_PATH/scipy-openblas.pc
     # Copy the shared objects to a path under $PKG_CONFIG_PATH, the build
     # will point $LD_LIBRARY_PATH there and then auditwheel/delocate-wheel will
     # pull these into the wheel. Use python to avoid windows/posix problems
     python <<EOF
-import os, scipy_openblas64, shutil
-srcdir = os.path.join(os.path.dirname(scipy_openblas64.__file__), ""lib"")
+import os, scipy_${OPENBLAS}, shutil
+srcdir = os.path.join(os.path.dirname(scipy_${OPENBLAS}.__file__), ""lib"")
 shutil.copytree(srcdir, os.path.join(""$PKG_CONFIG_PATH"", ""lib""))
-srcdir = os.path.join(os.path.dirname(scipy_openblas64.__file__), "".dylibs"")
+srcdir = os.path.join(os.path.dirname(scipy_${OPENBLAS}.__file__), "".dylibs"")
 if os.path.exists(srcdir):  # macosx delocate
     shutil.copytree(srcdir, os.path.join(""$PKG_CONFIG_PATH"", "".dylibs""))
 EOF
diff --git a/tools/wheels/repair_windows.sh b/tools/wheels/repair_windows.sh
index 79b3f90f1af6..db9905f99059 100644
--- a/tools/wheels/repair_windows.sh
+++ b/tools/wheels/repair_windows.sh
@@ -3,31 +3,8 @@ set -xe
 WHEEL=""$1""
 DEST_DIR=""$2""
 
-# create a temporary directory in the destination folder and unpack the wheel
-# into there
 cwd=$PWD
-
-pushd $DEST_DIR
-mkdir -p tmp
-pushd tmp
-wheel unpack $WHEEL
-pushd numpy*
-
-# To avoid DLL hell, the file name of libopenblas that's being vendored with
-# the wheel has to be name-mangled. delvewheel is unable to name-mangle PYD
-# containing extra data at the end of the binary, which frequently occurs when
-# building with mingw.
-# We therefore find each PYD in the directory structure and strip them.
-
-for f in $(find ./numpy* -name '*.pyd'); do strip $f; done
-
-
-# now repack the wheel and overwrite the original
-wheel pack .
-mv -fv *.whl $WHEEL
-
 cd $DEST_DIR
-rm -rf tmp
 
 # the libopenblas.dll is placed into this directory in the cibw_before_build
 # script.
","Backport of #29039.

BLD: bump OpenBLAS version, use OpenBLAS for win-arm64 [wheel build]

* Update requirements/ci_requirements.txt

* use pip to install anaconda-client on win-arm64 [wheel build]

* allow noblas in win32 wheels, use scipy-openblas32 on win-arm64 [wheel build]

* improve runner arch detection logic [wheel build]

* remove win_arm64 cibuildwheel override

* remove 'strip' before calling delvewheel [wheel build]

* use openblas 0.3.29.265 only on win-arm64 [wheel build]

* add comment about lack of win-arm64 openblas64 wheels [wheel build]

---------

<!--         ----------------------------------------------------------------
                MAKE SURE YOUR PR GETS THE ATTENTION IT DESERVES!
                ----------------------------------------------------------------

*  FORMAT IT RIGHT:
      https://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message

*  IF IT'S A NEW FEATURE OR API CHANGE, TEST THE WATERS:
      https://www.numpy.org/devdocs/dev/development_workflow.html#get-the-mailing-list-s-opinion

*  HIT ALL THE GUIDELINES:
      https://numpy.org/devdocs/dev/index.html#guidelines

*  WHAT TO DO IF WE HAVEN'T GOTTEN BACK TO YOU:
      https://www.numpy.org/devdocs/dev/development_workflow.html#getting-your-pr-reviewed
-->
"
django/django,18884,"diff --git a/docs/releases/security.txt b/docs/releases/security.txt
index ed06c7367bda..02ea77b54d74 100644
--- a/docs/releases/security.txt
+++ b/docs/releases/security.txt
@@ -39,7 +39,7 @@ process. These are listed below.
 December 4, 2024 - :cve:`2024-53907`
 ------------------------------------
 
-Potential denial-of-service in django.utils.html.strip_tags().
+Potential denial-of-service in ``django.utils.html.strip_tags()``.
 `Full description
 <https://www.djangoproject.com/weblog/2024/dec/04/security-releases/>`__
 
@@ -50,7 +50,7 @@ Potential denial-of-service in django.utils.html.strip_tags().
 December 4, 2024 - :cve:`2024-53908`
 ------------------------------------
 
-Potential SQL injection in HasKey(lhs, rhs) on Oracle.
+Potential SQL injection in ``HasKey(lhs, rhs)`` on Oracle.
 `Full description
 <https://www.djangoproject.com/weblog/2024/dec/04/security-releases/>`__
 
",:facepalm: I will need to back port
numpy/numpy,29101,"diff --git a/numpy/lib/_npyio_impl.py b/numpy/lib/_npyio_impl.py
index e588b8454b44..f284eeb74834 100644
--- a/numpy/lib/_npyio_impl.py
+++ b/numpy/lib/_npyio_impl.py
@@ -195,16 +195,13 @@ def __init__(self, fid, own_fid=False, allow_pickle=False,
         # Import is postponed to here since zipfile depends on gzip, an
         # optional component of the so-called standard library.
         _zip = zipfile_factory(fid)
-        self._files = _zip.namelist()
-        self.files = []
+        _files = _zip.namelist()
+        self.files = [name.removesuffix("".npy"") for name in _files]
+        self._files = dict(zip(self.files, _files))
+        self._files.update(zip(_files, _files))
         self.allow_pickle = allow_pickle
         self.max_header_size = max_header_size
         self.pickle_kwargs = pickle_kwargs
-        for x in self._files:
-            if x.endswith('.npy'):
-                self.files.append(x[:-4])
-            else:
-                self.files.append(x)
         self.zip = _zip
         self.f = BagObj(self)
         if own_fid:
@@ -240,37 +237,34 @@ def __len__(self):
         return len(self.files)
 
     def __getitem__(self, key):
-        # FIXME: This seems like it will copy strings around
-        #   more than is strictly necessary.  The zipfile
-        #   will read the string and then
-        #   the format.read_array will copy the string
-        #   to another place in memory.
-        #   It would be better if the zipfile could read
-        #   (or at least uncompress) the data
-        #   directly into the array memory.
-        member = False
-        if key in self._files:
-            member = True
-        elif key in self.files:
-            member = True
-            key += '.npy'
-        if member:
-            bytes = self.zip.open(key)
-            magic = bytes.read(len(format.MAGIC_PREFIX))
-            bytes.close()
-            if magic == format.MAGIC_PREFIX:
-                bytes = self.zip.open(key)
-                return format.read_array(bytes,
-                                         allow_pickle=self.allow_pickle,
-                                         pickle_kwargs=self.pickle_kwargs,
-                                         max_header_size=self.max_header_size)
-            else:
-                return self.zip.read(key)
+        try:
+            key = self._files[key]
+        except KeyError:
+            raise KeyError(f""{key} is not a file in the archive"") from None
         else:
-            raise KeyError(f""{key} is not a file in the archive"")
+            with self.zip.open(key) as bytes:
+                magic = bytes.read(len(format.MAGIC_PREFIX))
+                bytes.seek(0)
+                if magic == format.MAGIC_PREFIX:
+                    # FIXME: This seems like it will copy strings around
+                    #   more than is strictly necessary.  The zipfile
+                    #   will read the string and then
+                    #   the format.read_array will copy the string
+                    #   to another place in memory.
+                    #   It would be better if the zipfile could read
+                    #   (or at least uncompress) the data
+                    #   directly into the array memory.
+                    return format.read_array(
+                        bytes,
+                        allow_pickle=self.allow_pickle,
+                        pickle_kwargs=self.pickle_kwargs,
+                        max_header_size=self.max_header_size
+                    )
+                else:
+                    return bytes.read(key)
 
     def __contains__(self, key):
-        return (key in self._files or key in self.files)
+        return (key in self._files)
 
     def __repr__(self):
         # Get filename or default to `object`
","Backport of #29098.

Use dict instead of list to convert the passed key to the name used in the archive.

Closes #29081

<!--         ----------------------------------------------------------------
                MAKE SURE YOUR PR GETS THE ATTENTION IT DESERVES!
                ----------------------------------------------------------------

*  FORMAT IT RIGHT:
      https://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message

*  IF IT'S A NEW FEATURE OR API CHANGE, TEST THE WATERS:
      https://www.numpy.org/devdocs/dev/development_workflow.html#get-the-mailing-list-s-opinion

*  HIT ALL THE GUIDELINES:
      https://numpy.org/devdocs/dev/index.html#guidelines

*  WHAT TO DO IF WE HAVEN'T GOTTEN BACK TO YOU:
      https://www.numpy.org/devdocs/dev/development_workflow.html#getting-your-pr-reviewed
-->
"
django/django,18457,"diff --git a/docs/howto/deployment/checklist.txt b/docs/howto/deployment/checklist.txt
index 75c9735e862e..0f4bd158f8af 100644
--- a/docs/howto/deployment/checklist.txt
+++ b/docs/howto/deployment/checklist.txt
@@ -36,6 +36,14 @@ Some of the checks described below can be automated using the :option:`check
 --deploy` option. Be sure to run it against your production settings file as
 described in the option's documentation.
 
+Switch away from ``manage.py runserver``
+========================================
+
+The :djadmin:`runserver` command is not designed for a production setting. Be
+sure to switch to a production-ready WSGI or ASGI server. For a few common
+options, see :doc:`WSGI servers </howto/deployment/wsgi/index>` or
+:doc:`ASGI servers </howto/deployment/asgi/index>`.
+
 Critical settings
 =================
 
diff --git a/docs/howto/deployment/index.txt b/docs/howto/deployment/index.txt
index e2fadba5b907..2f53a97bef99 100644
--- a/docs/howto/deployment/index.txt
+++ b/docs/howto/deployment/index.txt
@@ -12,7 +12,8 @@ the scope of what Django can give you as guidance.
 
 Django, being a web framework, needs a web server in order to operate. And
 since most web servers don't natively speak Python, we need an interface to
-make that communication happen.
+make that communication happen. The :djadmin:`runserver` command starts a
+lightweight development server, which is not suitable for production.
 
 Django currently supports two interfaces: WSGI and ASGI.
 
diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index 0546555a3029..8173224e4ceb 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -870,11 +870,11 @@ are reserved for the superuser (root).
 This server uses the WSGI application object specified by the
 :setting:`WSGI_APPLICATION` setting.
 
-DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through
-security audits or performance tests. (And that's how it's gonna stay. We're in
-the business of making web frameworks, not web servers, so improving this
-server to be able to handle a production environment is outside the scope of
-Django.)
+.. warning:: DO NOT USE THIS SERVER IN A PRODUCTION SETTING.
+
+    This lightweight development server has not gone through security audits or
+    performance tests, hence is unsuitable for production. Making this server
+    able to handle a production environment is outside the scope of Django.
 
 The development server automatically reloads Python code for each request, as
 needed. You don't need to restart the server for code changes to take effect.
","

# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35591

# Branch description
This provides the documentation updates for ticket 35591. 

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18850,"diff --git a/django/template/loader_tags.py b/django/template/loader_tags.py
index 1874d8c52881..36703b47823a 100644
--- a/django/template/loader_tags.py
+++ b/django/template/loader_tags.py
@@ -242,7 +242,11 @@ def do_block(parser, token):
     return BlockNode(block_name, nodelist)
 
 
-def construct_relative_path(current_template_name, relative_name):
+def construct_relative_path(
+    current_template_name,
+    relative_name,
+    allow_recursion=False,
+):
     """"""
     Convert a relative path (starting with './' or '../') to the full template
     name based on the current_template_name.
@@ -264,7 +268,7 @@ def construct_relative_path(current_template_name, relative_name):
             ""The relative path '%s' points outside the file hierarchy that ""
             ""template '%s' is in."" % (relative_name, current_template_name)
         )
-    if current_template_name.lstrip(""/"") == new_name:
+    if not allow_recursion and current_template_name.lstrip(""/"") == new_name:
         raise TemplateSyntaxError(
             ""The relative path '%s' was translated to template name '%s', the ""
             ""same template in which the tag appears.""
@@ -346,7 +350,11 @@ def do_include(parser, token):
         options[option] = value
     isolated_context = options.get(""only"", False)
     namemap = options.get(""with"", {})
-    bits[1] = construct_relative_path(parser.origin.template_name, bits[1])
+    bits[1] = construct_relative_path(
+        parser.origin.template_name,
+        bits[1],
+        allow_recursion=True,
+    )
     return IncludeNode(
         parser.compile_filter(bits[1]),
         extra_context=namemap,
diff --git a/tests/template_tests/syntax_tests/test_include.py b/tests/template_tests/syntax_tests/test_include.py
index 3ee99b37981e..be0deee9260d 100644
--- a/tests/template_tests/syntax_tests/test_include.py
+++ b/tests/template_tests/syntax_tests/test_include.py
@@ -330,15 +330,43 @@ def test_include_recursive(self):
                 ],
             }
         ]
-        engine = Engine(app_dirs=True)
-        t = engine.get_template(""recursive_include.html"")
-        self.assertEqual(
-            ""Recursion!  A1  Recursion!  B1   B2   B3  Recursion!  C1"",
-            t.render(Context({""comments"": comments}))
-            .replace("" "", """")
-            .replace(""\n"", "" "")
-            .strip(),
-        )
+        with self.subTest(template=""recursive_include.html""):
+            engine = Engine(app_dirs=True)
+            t = engine.get_template(""recursive_include.html"")
+            self.assertEqual(
+                ""Recursion!  A1  Recursion!  B1   B2   B3  Recursion!  C1"",
+                t.render(Context({""comments"": comments}))
+                .replace("" "", """")
+                .replace(""\n"", "" "")
+                .strip(),
+            )
+        with self.subTest(template=""recursive_relative_include.html""):
+            engine = Engine(app_dirs=True)
+            t = engine.get_template(""recursive_relative_include.html"")
+            self.assertEqual(
+                ""Recursion!  A1  Recursion!  B1   B2   B3  Recursion!  C1"",
+                t.render(Context({""comments"": comments}))
+                .replace("" "", """")
+                .replace(""\n"", "" "")
+                .strip(),
+            )
+        with self.subTest(template=""tmpl""):
+            engine = Engine()
+            template = """"""
+            Recursion!
+            {% for c in comments %}
+              {{ c.comment }}
+              {% if c.children %}{% include tmpl with comments=c.children %}{% endif %}
+            {% endfor %}
+            """"""
+            outer_tmpl = engine.from_string(""{% include tmpl %}"")
+            output = outer_tmpl.render(
+                Context({""tmpl"": engine.from_string(template), ""comments"": comments})
+            )
+            self.assertEqual(
+                ""Recursion!  A1  Recursion!  B1   B2   B3  Recursion!  C1"",
+                output.replace("" "", """").replace(""\n"", "" "").strip(),
+            )
 
     def test_include_cache(self):
         """"""
diff --git a/tests/template_tests/templates/recursive_relative_include.html b/tests/template_tests/templates/recursive_relative_include.html
new file mode 100644
index 000000000000..ae49cc0a4367
--- /dev/null
+++ b/tests/template_tests/templates/recursive_relative_include.html
@@ -0,0 +1,7 @@
+Recursion!
+{% for comment in comments %}
+    {{ comment.comment }}
+    {% if comment.children %}
+        {% include ""./recursive_relative_include.html"" with comments=comment.children %}
+    {% endif %}
+{% endfor %}
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35493

#### Branch description
Previously, Django raised a `TemplateSyntaxError` when trying to recursively include a template from within itself via the `includes` tag using a path that contains `./` and `../.` The Django debug toolbar described the error like this: `The relative path ‘“./ul.html”’ was translated to template name ‘app/ul.html’, the same template in which the tag appears.` This error was not raised with paths containing neither `./` nor `../`. This happened because the same error-handling logic was used as the logic for recursively extending a template. The code was modified so that that particular error can only be raised when extending a template, not when including one.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19136,"diff --git a/django/contrib/admin/static/admin/js/calendar.js b/django/contrib/admin/static/admin/js/calendar.js
index 776310f75b53..0d83a26ac665 100644
--- a/django/contrib/admin/static/admin/js/calendar.js
+++ b/django/contrib/admin/static/admin/js/calendar.js
@@ -63,16 +63,14 @@ depends on core.js for utility functions like removeChildren or quickElement
             pgettext('one letter Saturday', 'S')
         ],
         firstDayOfWeek: parseInt(get_format('FIRST_DAY_OF_WEEK')),
+        mappingDaysInMonth: [31,""elif condition"",31,30,31,30,31,31,30,31,30,31],
         isLeapYear: function(year) {
             return (((year % 4) === 0) && ((year % 100) !== 0 ) || ((year % 400) === 0));
         },
         getDaysInMonth: function(month, year) {
             let days;
-            if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {
-                days = 31;
-            }
-            else if (month === 4 || month === 6 || month === 9 || month === 11) {
-                days = 30;
+            if (month !== 2) {
+                days = CalendarNamespace.mappingDaysInMonth[month-1];
             }
             else if (month === 2 && CalendarNamespace.isLeapYear(year)) {
                 days = 29;
","mapping instead of multiple evaluations



"
django/django,19505,"diff --git a/index/index.txt b/index/index.txt
new file mode 100644
index 000000000000..b6fc4c620b67
--- /dev/null
+++ b/index/index.txt
@@ -0,0 +1 @@
+hello
\ No newline at end of file
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18849,"diff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css
index c6ce78833e47..d9adedb03069 100644
--- a/django/contrib/admin/static/admin/css/forms.css
+++ b/django/contrib/admin/static/admin/css/forms.css
@@ -496,3 +496,24 @@ form .related-widget-wrapper ul {
 .clearable-file-input input {
     margin-top: 0;
 }
+
+/* Fix alignment for multi-select widget in admin panel */
+select[multiple] {
+    width: 100%; 
+    height: auto; 
+    display: block; 
+    margin: 0 auto; /* Center the widget (if needed) */
+}
+
+/* Additional styling for better visibility */
+.admin-widget-wrapper select[multiple] {
+    padding: 5px;
+    border: 1px solid #ccc;
+    border-radius: 4px;
+    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
+}
+
+/* For RTL languages, ensure alignment */
+:dir(rtl) .admin-widget-wrapper select[multiple] {
+    text-align: right;
+}
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index b7b93c235ae1..4502668e8160 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2775,3 +2775,22 @@ def update_join_types(self, query):
         query.promote_joins(to_promote)
         query.demote_joins(to_demote)
         return to_demote
+
+def resolve_order_by_expressions(self, order_by_expressions):
+    resolved_expressions = []
+    
+    for expr in order_by_expressions:
+        if hasattr(expr, 'contains_outer_reference') and expr.contains_outer_reference():
+            clone = expr.clone()
+            clone.outer_query = self.outer_query
+            resolved = clone.resolve_expression(self)
+            resolved_expressions.append(resolved)
+        else:
+            resolved_expressions.append(expr)
+            
+    return resolved_expressions
+
+def get_compiler(self, *args, **kwargs):
+    if self.order_by:
+        self.order_by = self.resolve_order_by_expressions(self.order_by)
+    return super().get_compiler(*args, **kwargs)
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index af4cf01fcaad..acba2adb47f8 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -2849,3 +2849,37 @@ def test_nulls_false(self):
             F(""field"").asc(nulls_first=False)
         with self.assertRaisesMessage(ValueError, msg):
             F(""field"").desc(nulls_last=False)
+
+
+def test_order_by_with_outerref_comprehensive(self):
+    """"""
+    Test ORDER BY with OuterRef in different scenarios
+    """"""
+    def test_simple_outerref():
+        # Basic OuterRef test
+        inner = Company.objects.annotate(
+            emp_diff=F('num_employees') - OuterRef('num_employees')
+        ).order_by('emp_diff')
+        self.assertQuerysetEqual(list(inner), [...])  # Expected results
+
+    def test_complex_outerref():
+        # Multiple OuterRef test
+        inner = Company.objects.annotate(
+            complex_order=ExpressionWrapper(
+                F('num_employees') * OuterRef('num_employees') / 100,
+                output_field=IntegerField()
+            )
+        ).order_by('complex_order')
+        self.assertQuerysetEqual(list(inner), [...])
+
+    def test_mixed_ordering():
+        # Mix of normal fields and OuterRef
+        inner = Company.objects.order_by(
+            'name',
+            F('num_employees') - OuterRef('num_employees')
+        )
+        self.assertQuerysetEqual(list(inner), [...])
+
+    test_simple_outerref()
+    test_complex_outerref()
+    test_mixed_ordering()
\ No newline at end of file
","#### Trac ticket number
ticket-34533

#### Branch description
This PR fixes the bug where `OuterRef` was not properly resolved as part of the `ORDER BY` clause in Django queries. The bug affected queries involving `OuterRef` in ordering expressions. This fix ensures that `OuterRef` is resolved correctly within the `ORDER BY` clause.

#### Checklist
- [x] This PR targets the `main` branch.
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes."
django/django,19255,"diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 6a9cb12a90cb..dd4c09a4e339 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1707,13 +1707,18 @@ def _check_relationship_model(self, from_model=None, **kwargs):
                             and getattr(field.remote_field, ""model"", None)
                             == related_model
                         ):
+                            related_object_name = (
+                                related_model
+                                if isinstance(related_model, str)
+                                else related_model._meta.object_name
+                            )
                             errors.append(
                                 checks.Error(
                                     ""'%s.%s' is not a foreign key to '%s'.""
                                     % (
                                         through._meta.object_name,
                                         field_name,
-                                        related_model._meta.object_name,
+                                        related_object_name,
                                     ),
                                     hint=hint,
                                     obj=self,
diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py
index 4167e0712a26..5a791d1fcc0b 100644
--- a/tests/invalid_models_tests/test_relative_fields.py
+++ b/tests/invalid_models_tests/test_relative_fields.py
@@ -2185,3 +2185,45 @@ class Child(models.Model):
                 ),
             ],
         )
+
+    def test_invalid_to_argument_with_through(self):
+        class Foo(models.Model):
+            pass
+
+        class Bar(models.Model):
+            foos = models.ManyToManyField(
+                to=""Fo"",
+                through=""FooBar"",
+                through_fields=(""bar"", ""foo""),
+            )
+
+        class FooBar(models.Model):
+            foo = models.ForeignKey(""Foo"", on_delete=models.CASCADE)
+            bar = models.ForeignKey(""Bar"", on_delete=models.CASCADE)
+
+        field = Bar._meta.get_field(""foos"")
+
+        self.assertEqual(
+            field.check(from_model=Bar),
+            [
+                Error(
+                    ""Field defines a relation with model 'Fo', ""
+                    ""which is either not installed, or is abstract."",
+                    obj=field,
+                    id=""fields.E300"",
+                ),
+                Error(
+                    ""The model is used as an intermediate model by ""
+                    ""'invalid_models_tests.Bar.foos', ""
+                    ""but it does not have a foreign key to 'Bar' ""
+                    ""or 'invalid_models_tests.Fo'."",
+                    obj=FooBar,
+                    id=""fields.E336"",
+                ),
+                Error(
+                    ""'FooBar.foo' is not a foreign key to 'Fo'."",
+                    obj=field,
+                    id=""fields.E339"",
+                ),
+            ],
+        )
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36239

#### Branch description
I'm continuing the work from [PR #19248](https://github.com/django/django/pull/19248).

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18108,"diff --git a/docs/internals/contributing/writing-documentation.txt b/docs/internals/contributing/writing-documentation.txt
index 763039e61a87..52ddb87c19d8 100644
--- a/docs/internals/contributing/writing-documentation.txt
+++ b/docs/internals/contributing/writing-documentation.txt
@@ -301,6 +301,10 @@ documentation:
   syntax, it won't be highlighted. Adding ``.. code-block:: python``, for
   example, will force highlighting despite invalid syntax.
 
+* Use ``.. code-block:: pycon`` to highlight code blocks that show examples of
+  an interactive Python console session, and make sure to include the ``>>>``
+  line prefixes in that case.
+
 * To improve readability, use ``.. admonition:: Descriptive title`` rather than
   ``.. note::``. Use these boxes sparingly.
 
","# Trac ticket number
N/A

# Branch description
I got confused by what the `pycon` language was in code examples and couldn't find an explanation in our docs. After figuring out it's used for interactive python console examples, I figured I'd mention it somewhere in the contributing docs.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] **N/A** I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] **N/A** I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] **N/A** I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18224,"diff --git a/docs/ref/clickjacking.txt b/docs/ref/clickjacking.txt
index f9bec591a76c..12c7afc8c49a 100644
--- a/docs/ref/clickjacking.txt
+++ b/docs/ref/clickjacking.txt
@@ -116,24 +116,7 @@ a decorator overrides the middleware.
 Limitations
 ===========
 
-The ``X-Frame-Options`` header will only protect against clickjacking in a
-modern browser. Older browsers will quietly ignore the header and need `other
-clickjacking prevention techniques`_.
+The ``X-Frame-Options`` header will only protect against clickjacking in
+`modern browsers`_.
 
-Browsers that support ``X-Frame-Options``
------------------------------------------
-
-* Internet Explorer 8+
-* Edge
-* Firefox 3.6.9+
-* Opera 10.5+
-* Safari 4+
-* Chrome 4.1+
-
-See also
---------
-
-A `complete list`_ of browsers supporting ``X-Frame-Options``.
-
-.. _complete list: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options#browser_compatibility
-.. _other clickjacking prevention techniques: https://en.wikipedia.org/wiki/Clickjacking#Prevention
+.. _modern browsers: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options#browser_compatibility
",There is no need to list old browser versions or point users to workaround for them.
django/django,18348,"diff --git a/docs/topics/forms/index.txt b/docs/topics/forms/index.txt
index 71d443f7d185..59d54dad2a7c 100644
--- a/docs/topics/forms/index.txt
+++ b/docs/topics/forms/index.txt
@@ -368,6 +368,68 @@ your fingertips. Once you understand the basics of the process described above,
 you should be prepared to understand other features of the forms system and
 ready to learn a bit more about the underlying machinery.
 
+Using a form for query parameters
+=================================
+
+A form can be used to handle query parameters on a GET request such as on a search form or filtering an API request.
+Since query parameters are strings in the url, we use the form as the single place to extract, convert and validate each field.
+To create a GET request form, create a Form class.
+
+.. code-block:: python
+    :caption: ``forms.py``
+
+    from django import forms
+
+
+    class SearchForm(forms.Form):
+        q = forms.CharField(label=""Search"", required=False)
+        advanced = forms.BooleanField(required=False, initial=False)
+
+When rendering the form in the template, the html form tag can omit ``method=""post""`` and it will default to a get request.
+
+.. code-block:: html+django
+
+    <form action=""/search/"">
+        {{ form }}
+        <input type=""submit"" value=""Submit"">
+    </form>
+
+Upon submitting the form, the browser will append the query parameters ``/search/?q=foo&advanced=false`` to the url. In the view, we
+process the ``request.GET`` query parameters into the form.
+
+.. code-block:: python
+    :caption: ``views.py``
+
+    from django.http import HttpResponseRedirect
+    from django.shortcuts import render
+
+
+    def search(request):
+        form = SearchForm(request.GET or None)
+        # check whether it's valid:
+        if form.is_valid():
+            q = form.cleaned_data.get(""q"")
+            advanced = forms.cleaned_data.get(""advanced"")
+            # process the data from form.cleaned_data as required
+            results = perform_search(q=q, advanced=advanced)
+        else:
+            results = []
+        return render(request, ""search.html"", {""results"": results, ""form"": form})
+
+.. admonition:: Query parameters are strings
+
+    Accessing url parameters directly on the request will be strings which may not work as expected.
+
+    .. code-block:: pycon
+
+        >>> request.GET.get(""advanced"")
+        'false'
+        >>> bool(request.GET.get(""advanced""))
+        True
+
+    Using a form solves this problem and the cleaned data will contain values coerced to the correct type.
+
+
 More about Django :class:`Form` classes
 =======================================
 
","# Trac ticket number

N/A

# Branch description
From the conversation in this [thread](https://forum.djangoproject.com/t/add-getbool-to-request-query-params-querydict/30985), I thought it was a good idea to add specific form documentation for processing query paramters with a form.

# Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19262,"diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index f2f9a74a6c83..cf23c51746c5 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -25,7 +25,7 @@ def _subclass_index(class_path, candidate_paths):
     return -1
 
 
-def check_user_model(app_configs=None, **kwargs):
+def check_user_model(app_configs, **kwargs):
     if app_configs is None:
         cls = apps.get_model(settings.AUTH_USER_MODEL)
     else:
@@ -121,7 +121,7 @@ def check_user_model(app_configs=None, **kwargs):
     return errors
 
 
-def check_models_permissions(app_configs=None, **kwargs):
+def check_models_permissions(app_configs, **kwargs):
     if app_configs is None:
         models = apps.get_models()
     else:
diff --git a/django/contrib/contenttypes/checks.py b/django/contrib/contenttypes/checks.py
index 753c5d22f8ae..aae9dcb31b0b 100644
--- a/django/contrib/contenttypes/checks.py
+++ b/django/contrib/contenttypes/checks.py
@@ -4,7 +4,7 @@
 from django.core.checks import Error
 
 
-def check_generic_foreign_keys(app_configs=None, **kwargs):
+def check_generic_foreign_keys(app_configs, **kwargs):
     from .fields import GenericForeignKey
 
     if app_configs is None:
@@ -25,7 +25,7 @@ def check_generic_foreign_keys(app_configs=None, **kwargs):
     return errors
 
 
-def check_model_name_lengths(app_configs=None, **kwargs):
+def check_model_name_lengths(app_configs, **kwargs):
     if app_configs is None:
         models = apps.get_models()
     else:
diff --git a/django/contrib/staticfiles/checks.py b/django/contrib/staticfiles/checks.py
index 06b87c281c30..da13b63e7b4f 100644
--- a/django/contrib/staticfiles/checks.py
+++ b/django/contrib/staticfiles/checks.py
@@ -8,7 +8,7 @@
 )
 
 
-def check_finders(app_configs=None, **kwargs):
+def check_finders(app_configs, **kwargs):
     """"""Check all registered staticfiles finders.""""""
     errors = []
     for finder in get_finders():
@@ -21,7 +21,7 @@ def check_finders(app_configs=None, **kwargs):
     return errors
 
 
-def check_storages(app_configs=None, **kwargs):
+def check_storages(app_configs, **kwargs):
     """"""Ensure staticfiles is defined in STORAGES setting.""""""
     errors = []
     if STATICFILES_STORAGE_ALIAS not in settings.STORAGES:
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 7a5bef9b263c..2b9a7e77d521 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -9,7 +9,7 @@
 
 
 @register(Tags.models)
-def check_all_models(app_configs=None, **kwargs):
+def check_all_models(app_configs, **kwargs):
     db_table_models = defaultdict(list)
     indexes = defaultdict(list)
     constraints = defaultdict(list)
@@ -223,5 +223,5 @@ def build_error(model_key, func, args, keywords):
 
 
 @register(Tags.models)
-def check_lazy_references(app_configs=None, **kwargs):
+def check_lazy_references(app_configs, **kwargs):
     return _check_lazy_references(apps)
","#### Trac ticket number

N/A

#### Branch description

Noticed whilst working on django-stubs that some of Django’s internal system check functions declare `app_configs=None`, even though a default isn't needed or used by the majority of functions. This PR removes the unnecessary defaults.

[The documentation](https://docs.djangoproject.com/en/5.1/topics/checks/#django.core.checks.register) encourages users to write functions without a default for `app_configs`, and checks are always passed the argument:

https://github.com/django/django/blob/d752ec8259a3a3123733cacbfb4f207ee61f6242/django/core/checks/registry.py#L87-L88

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [n/a] I have checked the ""Has patch"" ticket flag in the Trac system.
- [n/a] I have added or updated relevant tests.
- [n/a] I have added or updated relevant docs, including release notes if applicable.
- [n/a] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19303,"diff --git a/AUTHORS b/AUTHORS
index 956a5e06f133..b504d4a086dc 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -749,6 +749,7 @@ answer newbie questions, and generally made Django that much better:
     Mikhail Korobov <kmike84@googlemail.com>
     Mikko Hellsing <mikko@sorl.net>
     Mikołaj Siedlarek <mikolaj.siedlarek@gmail.com>
+    Mikuláš Poul <mikulaspoul@gmail.com>
     milkomeda
     Milton Waddams
     mitakummaa@gmail.com
diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index 3dd3014355bc..e2befd4d4eb5 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -131,6 +131,8 @@ def as_string(self):
         items = {
             ""replaces_str"": """",
             ""initial_str"": """",
+            ""run_before_str"": """",
+            ""atomic_str"": """",
         }
 
         imports = set()
@@ -189,11 +191,14 @@ def as_string(self):
                 ""then update the\n# RunPython operations to refer to the local ""
                 ""versions:\n# %s""
             ) % ""\n# "".join(sorted(migration_imports))
-        # If there's a replaces, make a string for it
         if self.migration.replaces:
             items[""replaces_str""] = (
                 ""\n    replaces = %s\n"" % self.serialize(self.migration.replaces)[0]
             )
+        if self.migration.run_before:
+            items[""run_before_str""] = (
+                ""\n    run_before = %s\n"" % self.serialize(self.migration.run_before)[0]
+            )
         # Hinting that goes into comment
         if self.include_header:
             items[""migration_header""] = MIGRATION_HEADER_TEMPLATE % {
@@ -205,6 +210,8 @@ def as_string(self):
 
         if self.migration.initial:
             items[""initial_str""] = ""\n    initial = True\n""
+        if not self.migration.atomic:
+            items[""atomic_str""] = ""\n    atomic = False\n""
 
         return MIGRATION_TEMPLATE % items
 
@@ -305,7 +312,7 @@ def unregister_serializer(cls, type_):
 %(migration_header)s%(imports)s
 
 class Migration(migrations.Migration):
-%(replaces_str)s%(initial_str)s
+%(replaces_str)s%(initial_str)s%(atomic_str)s%(run_before_str)s
     dependencies = [
 %(dependencies)s\
     ]
diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py
index 3a070f4d45e1..d2cff54b047e 100644
--- a/tests/migrations/test_writer.py
+++ b/tests/migrations/test_writer.py
@@ -1164,3 +1164,42 @@ def test_composite_pk_import(self):
         output = writer.as_string()
         self.assertEqual(output.count(""import""), 1)
         self.assertIn(""from django.db import migrations, models"", output)
+
+    def test_run_before(self):
+        for run_before, expected_run_before_str in [
+            ([(""foo"", ""0001_bar"")], ""    run_before = [('foo', '0001_bar')]\n""),
+            (
+                [(""foo"", ""0001_bar""), (""foo"", ""0002_baz"")],
+                ""    run_before = [('foo', '0001_bar'), ('foo', '0002_baz')]\n"",
+            ),
+        ]:
+            with self.subTest(run_before=run_before):
+                migration = type(
+                    ""Migration"",
+                    (migrations.Migration,),
+                    {""operations"": [], ""run_before"": run_before},
+                )
+                writer = MigrationWriter(migration)
+                output = writer.as_string()
+                self.assertIn(expected_run_before_str, output)
+
+    def test_atomic_is_false(self):
+        migration = type(
+            ""Migration"",
+            (migrations.Migration,),
+            {""operations"": [], ""atomic"": False},
+        )
+        writer = MigrationWriter(migration)
+        output = writer.as_string()
+        self.assertIn(""    atomic = False\n"", output)
+
+    def test_default_attributes(self):
+        migration = type(""Migration"", (migrations.Migration,), {})
+        writer = MigrationWriter(migration)
+        output = writer.as_string()
+        self.assertIn(""    dependencies = [\n    ]\n"", output)
+        self.assertIn(""    operations = [\n    ]\n"", output)
+        self.assertNotIn(""atomic"", output)
+        self.assertNotIn(""initial"", output)
+        self.assertNotIn(""run_before"", output)
+        self.assertNotIn(""replaces"", output)
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36274

#### Branch description

The `MigrationWriter` class implements writing a instance of `django.db.migrations.migration.Migration`. It supports serializing all the options it could have except for `run_before`. I recently made a PR for a third-party package on remaking migrations (a form of squashing), and had to subclass the writer to be able to include run_before. I think `MigrationWriter` should support all options available on Migration, to make working with migrations easier.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18892,"diff --git a/pyproject.toml b/pyproject.toml
index 86ea7393ecee..3f2ce56cfde0 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -16,13 +16,13 @@ authors = [
 ]
 description = ""A high-level Python web framework that encourages rapid development and clean, pragmatic design.""
 readme = ""README.rst""
-license = {text = ""BSD-3-Clause""}
+license = ""BSD-3-Clause""
+license-files = [""LICENSE"", ""LICENSE.python""]
 classifiers = [
     ""Development Status :: 2 - Pre-Alpha"",
     ""Environment :: Web Environment"",
     ""Framework :: Django"",
     ""Intended Audience :: Developers"",
-    ""License :: OSI Approved :: BSD License"",
     ""Operating System :: OS Independent"",
     ""Programming Language :: Python"",
     ""Programming Language :: Python :: 3"",
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35961

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests. _I think there are no tests to be relevant_
- [ ] I have added or updated relevant docs, including release notes if applicable. _I think this does not warrant a release note?_
- [ ] I have attached screenshots in both light and dark modes for any UI changes. _N/A_
"
django/django,18843,"diff --git a/docs/internals/contributing/writing-documentation.txt b/docs/internals/contributing/writing-documentation.txt
index a8db5d93fd32..10b7edbca85c 100644
--- a/docs/internals/contributing/writing-documentation.txt
+++ b/docs/internals/contributing/writing-documentation.txt
@@ -198,7 +198,7 @@ Output is printed to the terminal, but can also be found in
     The execution of the command requires an internet connection and takes
     several minutes to complete, because the command tests all the links
     that are found in the documentation.
-    
+
 Entries that have a status of ""working"" are fine, those that are ""unchecked"" or
 ""ignored"" have been skipped because they either cannot be checked or have
 matched ignore rules in the configuration.
diff --git a/docs/ref/contrib/auth.txt b/docs/ref/contrib/auth.txt
index 3e1cdfd9787f..5b79485da494 100644
--- a/docs/ref/contrib/auth.txt
+++ b/docs/ref/contrib/auth.txt
@@ -679,7 +679,7 @@ The following backends are available in :mod:`django.contrib.auth.backends`:
         user permissions and group permissions. Returns an empty set if
         :attr:`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or
         :attr:`~django.contrib.auth.models.CustomUser.is_active` is ``False``.
-    
+
         .. versionchanged:: 5.2
 
             ``aget_all_permissions()`` function was added.
diff --git a/docs/ref/forms/api.txt b/docs/ref/forms/api.txt
index 9ce16ff2ab78..c6c83dcdfb0a 100644
--- a/docs/ref/forms/api.txt
+++ b/docs/ref/forms/api.txt
@@ -1416,7 +1416,7 @@ Methods of ``BoundField``
 
 .. method:: BoundField.render(template_name=None, context=None, renderer=None)
 
-    The render method is called by ``as_field_group``. All arguments are 
+    The render method is called by ``as_field_group``. All arguments are
     optional and default to:
 
     * ``template_name``: :attr:`.BoundField.template_name`
diff --git a/docs/ref/forms/fields.txt b/docs/ref/forms/fields.txt
index 6051122617d2..2b4b3448445d 100644
--- a/docs/ref/forms/fields.txt
+++ b/docs/ref/forms/fields.txt
@@ -392,7 +392,7 @@ be ignored in favor of the value from the form's initial data.
 .. attribute:: Field.template_name
 
 The ``template_name`` argument allows a custom template to be used when the
-field is rendered with :meth:`~django.forms.BoundField.as_field_group`. By 
+field is rendered with :meth:`~django.forms.BoundField.as_field_group`. By
 default this value is set to ``""django/forms/field.html""``. Can be changed per
 field by overriding this attribute or more generally by overriding the default
 template, see also :ref:`overriding-built-in-field-templates`.
diff --git a/docs/releases/3.1.6.txt b/docs/releases/3.1.6.txt
index 027d2f3b16f3..9805e32579dd 100644
--- a/docs/releases/3.1.6.txt
+++ b/docs/releases/3.1.6.txt
@@ -17,5 +17,5 @@ dot segments.
 Bugfixes
 ========
 
-* Fixed an admin layout issue in Django 3.1 where changelist filter controls 
+* Fixed an admin layout issue in Django 3.1 where changelist filter controls
   would become squashed (:ticket:`32391`).
diff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt
index 037c76fd5453..799f3ee819d6 100644
--- a/docs/releases/5.1.txt
+++ b/docs/releases/5.1.txt
@@ -116,8 +116,8 @@ Minor features
 * The default iteration count for the PBKDF2 password hasher is increased from
   720,000 to 870,000.
 
-* The default ``parallelism`` of the ``ScryptPasswordHasher`` is 
-  increased from 1 to 5, to follow OWASP recommendations.
+* The default ``parallelism`` of the ``ScryptPasswordHasher`` is increased from
+  1 to 5, to follow OWASP recommendations.
 
 * The new :class:`~django.contrib.auth.forms.AdminUserCreationForm` and
   the existing :class:`~django.contrib.auth.forms.AdminPasswordChangeForm` now
","#### Trac ticket number

N/A

#### Branch description

These were found using `sphinx-lint`, which was brought up in the Django Discord.

#### Checklist

- [x] This PR targets the `main` branch.
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes."
django/django,18298,"diff --git a/docs/howto/windows.txt b/docs/howto/windows.txt
index 0ab976f0391f..83aa8d065573 100644
--- a/docs/howto/windows.txt
+++ b/docs/howto/windows.txt
@@ -32,6 +32,14 @@ matches the version you installed by executing:
 
     ...\> py --version
 
+.. admonition:: ``py`` is not recognized or found
+
+    Depending on how you've installed Python (such as via the Microsoft Store),
+    ``py`` may not be available in the command prompt.
+
+    You will then need to use ``python`` instead of ``py`` when entering
+    commands.
+
 .. seealso::
 
     For more details, see :doc:`python:using/windows` documentation.
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

[ticket-35511](https://code.djangoproject.com/ticket/35511)

# Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

# Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [X] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [X] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,16630,"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d412e7657e80..72b9bd5b0d30 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -254,6 +254,14 @@ def contains_column_references(self):
             for expr in self.get_source_expressions()
         )
 
+    @cached_property
+    def deterministic(self):
+        # Can the expression return different values for the same input within a
+        # single query?
+        return all(
+            expr and expr.deterministic for expr in self.get_source_expressions()
+        )
+
     def resolve_expression(
         self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False
     ):
diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 460143ba5af0..95e994709056 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -157,6 +157,7 @@ def as_oracle(self, compiler, connection, **extra_context):
 class Random(NumericOutputFieldMixin, Func):
     function = ""RANDOM""
     arity = 0
+    deterministic = False
 
     def as_mysql(self, compiler, connection, **extra_context):
         return super().as_sql(compiler, connection, function=""RAND"", **extra_context)
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 0aa07e0b99eb..a1c84c3fd48d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -533,7 +533,30 @@ def get_count(self, using):
         Perform a COUNT() query using the current filter constraints.
         """"""
         obj = self.clone()
-        return obj.get_aggregation(using, {""__count"": Count(""*"")})[""__count""]
+        count = Count(""*"")
+        if self.distinct:
+            if self.distinct_fields:
+                # Only DISTINCT ON fields are relevant to provide an adequate
+                # count, every other fields can be discarded.
+                obj.set_values(self.distinct_fields)
+                obj.distinct_fields = ()
+                # A single non-null DISTINCT ON target can avoid a subquery
+                # pushdown by using COUNT(DISTINCT).
+                if len(obj.select) == 1 and not obj.select[0].target.null:
+                    obj.distinct = False
+                    count = Count(obj.select[0], distinct=True)
+            elif (
+                self.default_cols
+                and not self.extra_select
+                and all(expr.deterministic for expr in self.annotation_select.values())
+            ):
+                # When DISTINCT is used against the default columns of the base
+                # table an equivalent COUNT(DISTINCT pk) can be used as the primary
+                # key already identifies all rows uniquely. This assertion holds true
+                # as long as no selected annotation produces undeterministic results.
+                obj.distinct = False
+                count = Count(""pk"", distinct=True)
+        return obj.get_aggregation(using, {""__count"": count})[""__count""]
 
     def has_filters(self):
         return self.where
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b77e..f3c8479208d4 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -257,6 +257,16 @@ def contains_over_clause(self):
     def is_summary(self):
         return any(child.is_summary for child in self.children)
 
+    @classmethod
+    def _deterministic(cls, obj):
+        if isinstance(obj, tree.Node):
+            return any(cls._deterministic(c) for c in obj.children)
+        return obj.contains_aggregate
+
+    @cached_property
+    def deterministic(self):
+        return self._deterministic(self)
+
     @staticmethod
     def _resolve_leaf(expr, query, *args, **kwargs):
         if hasattr(expr, ""resolve_expression""):
diff --git a/tests/distinct_on_fields/tests.py b/tests/distinct_on_fields/tests.py
index b80878bbf25d..464dd79569ce 100644
--- a/tests/distinct_on_fields/tests.py
+++ b/tests/distinct_on_fields/tests.py
@@ -98,7 +98,7 @@ def test_basic_distinct_on(self):
         )
         for qset, expected in qsets:
             self.assertSequenceEqual(qset, expected)
-            self.assertEqual(qset.count(), len(expected))
+            self.assertEqual(qset.all().count(), len(expected))
 
         # Combining queries with non-unique query is not allowed.
         base_qs = Celebrity.objects.all()
","This still needs a battery of test as the `distinct().count()` coverage is relatively poor in the test suite but this will hopefully address ticket-25230 and ticket-30685.

Missing test coverage
- [ ] `Expression.deterministic`
- [ ] `distinct().count()` with `Random()` annotation
- [ ] `distinct().count()` with existing aggregation
- [ ] `distinct(*on).count()` coverage"
django/django,6914,"diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index f650346b02c0..6af847caa09c 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -9,6 +9,7 @@
 
 import functools
 import re
+import threading
 from importlib import import_module
 
 from django.conf import settings
@@ -164,7 +165,7 @@ def __init__(self, regex, urlconf_name, default_kwargs=None, app_name=None, name
         # urlpatterns
         self._callback_strs = set()
         self._populated = False
-        self._populating = False
+        self._local = threading.local()
 
     def __repr__(self):
         if isinstance(self.urlconf_name, list) and len(self.urlconf_name):
@@ -178,9 +179,13 @@ def __repr__(self):
         )
 
     def _populate(self):
-        if self._populating:
+        # Short-circuit if called recursively in this thread to prevent
+        # infinite recursion. Concurrent threads may call this at the same
+        # time and will need to continue, so set 'populating' on a
+        # thread-local variable.
+        if getattr(self._local, 'populating', False):
             return
-        self._populating = True
+        self._local.populating = True
         lookups = MultiValueDict()
         namespaces = {}
         apps = {}
@@ -213,7 +218,7 @@ def _populate(self):
                         namespaces[namespace] = (p_pattern + prefix, sub_pattern)
                     for app_name, namespace_list in pattern.app_dict.items():
                         apps.setdefault(app_name, []).extend(namespace_list)
-                if not pattern._populating:
+                if not getattr(pattern._local, 'populating', False):
                     pattern._populate()
                 self._callback_strs.update(pattern._callback_strs)
             else:
@@ -225,7 +230,7 @@ def _populate(self):
         self._namespace_dict[language_code] = namespaces
         self._app_dict[language_code] = apps
         self._populated = True
-        self._populating = False
+        self._local.populating = False
 
     @property
     def reverse_dict(self):
diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index 0201e28bf89c..67a4370e78e0 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -5,6 +5,7 @@
 from __future__ import unicode_literals
 
 import sys
+import threading
 
 from admin_scripts.tests import AdminScriptTestCase
 
@@ -429,6 +430,18 @@ def test_namespaced_view_detail(self):
         self.assertTrue(resolver._is_callback('urlpatterns_reverse.nested_urls.View3'))
         self.assertFalse(resolver._is_callback('urlpatterns_reverse.nested_urls.blub'))
 
+    def test_populate_concurrency(self):
+        """"""
+        RegexURLResolver._populate() can be called concurrently, but not more
+        than once per thread (#26888).
+        """"""
+        resolver = RegexURLResolver(r'^/', 'urlpatterns_reverse.urls')
+        resolver._local.populating = True
+        thread = threading.Thread(target=resolver._populate)
+        thread.start()
+        thread.join()
+        self.assertNotEqual(resolver._reverse_dict, {})
+
 
 @override_settings(ROOT_URLCONF='urlpatterns_reverse.reverse_lazy_urls')
 class ReverseLazyTest(TestCase):
","Fixed a regression in 625b8e9.

Fixed improper short-circuiting that could lead to a KeyError when threads
concurrently call RegexURLResolver._populate().
"
django/django,18381,"diff --git a/docs/ref/models/database-functions.txt b/docs/ref/models/database-functions.txt
index eb08e160f776..7ec2727c56e2 100644
--- a/docs/ref/models/database-functions.txt
+++ b/docs/ref/models/database-functions.txt
@@ -791,7 +791,7 @@ Usage example:
     ... ).values(""date"", ""day"", ""hour"", ""minute"", ""second"").get()
     {'date': datetime.date(2014, 6, 15),
      'day': datetime.datetime(2014, 6, 16, 0, 0, tzinfo=zoneinfo.ZoneInfo('Australia/Melbourne')),
-     'hour': datetime.datetime(2014, 6, 16, 0, 0, tzinfo=zoneinfo.ZoneInfo('Australia/Melbourne')),
+     'hour': datetime.datetime(2014, 6, 16, 14, 0, tzinfo=zoneinfo.ZoneInfo('Australia/Melbourne')),
      'minute': 'minute': datetime.datetime(2014, 6, 15, 14, 30, tzinfo=timezone.utc),
      'second': datetime.datetime(2014, 6, 15, 14, 30, 50, tzinfo=timezone.utc)
     }
","# Trac ticket number

N/A

# Branch description
The result of `TruncHour` in the example should be `'hour': datetime.datetime(2014, 6, 16, 14, 0`, not `'hour': datetime.datetime(2014, 6, 16, 0, 0`"
django/django,19290,"diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index 272cb2b02ce5..c9d9e1953047 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -288,6 +288,13 @@ def __init__(
             on_delete=DO_NOTHING,
         )
 
+    def get_effective_target_field(self):
+        """"""
+        Return the field used to prepare lookup values when this relation is
+        the target of a related exact lookup.
+        """"""
+        return self.path_infos[0].from_opts.pk
+
 
 class GenericRelation(ForeignObject):
     """"""
@@ -483,6 +490,13 @@ def value_to_string(self, obj):
         qs = getattr(obj, self.name).all()
         return str([instance.pk for instance in qs])
 
+    def get_effective_target_field(self):
+        """"""
+        Return the field used to prepare lookup values when this relation is
+        the target of a related exact lookup.
+        """"""
+        return self.path_infos[0].from_opts.pk
+
     def contribute_to_class(self, cls, name, **kwargs):
         kwargs[""private_only""] = True
         super().contribute_to_class(cls, name, **kwargs)
diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py
index 9fc7db7c3492..80ea95889e05 100644
--- a/django/db/models/fields/related_lookups.py
+++ b/django/db/models/fields/related_lookups.py
@@ -106,9 +106,16 @@ def get_prep_lookup(self):
             # doesn't have validation for non-integers, so we must run validation
             # using the target field.
             if self.prepare_rhs and hasattr(self.lhs.output_field, ""path_infos""):
-                # Get the target field. We can safely assume there is only one
-                # as we don't get to the direct value branch otherwise.
-                target_field = self.lhs.output_field.path_infos[-1].target_fields[-1]
+                if hasattr(self.lhs.output_field, ""get_effective_target_field""):
+                    # If the output_field specifies a field to prepare the rhs with,
+                    # use it.
+                    target_field = self.lhs.output_field.get_effective_target_field()
+                else:
+                    # Get the target field. We can safely assume there is only one
+                    # as we don't get to the direct value branch otherwise.
+                    target_field = self.lhs.output_field.path_infos[-1].target_fields[
+                        -1
+                    ]
                 self.rhs = target_field.get_prep_value(self.rhs)
 
         return super().get_prep_lookup()
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 51817710e969..8e891d2aa347 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -255,8 +255,12 @@ class FieldGetDbPrepValueMixin:
 
     def get_db_prep_lookup(self, value, connection):
         # For relational fields, use the 'target_field' attribute of the
-        # output_field.
-        field = getattr(self.lhs.output_field, ""target_field"", None)
+        # output_field. If the field provides a get_effective_target_field
+        # method, use that.
+        if hasattr(self.lhs.output_field, ""get_effective_target_field""):
+            field = self.lhs.output_field.get_effective_target_field()
+        else:
+            field = getattr(self.lhs.output_field, ""target_field"", None)
         get_db_prep_value = (
             getattr(field, ""get_db_prep_value"", None)
             or self.lhs.output_field.get_db_prep_value
diff --git a/tests/generic_relations/models.py b/tests/generic_relations/models.py
index e99d2c7e5e58..dc6fad26f088 100644
--- a/tests/generic_relations/models.py
+++ b/tests/generic_relations/models.py
@@ -150,3 +150,25 @@ class AllowsNullGFK(models.Model):
     content_type = models.ForeignKey(ContentType, models.SET_NULL, null=True)
     object_id = models.PositiveIntegerField(null=True)
     content_object = GenericForeignKey()
+
+
+class Note(models.Model):
+    title = models.CharField(max_length=30)
+    content_type = models.ForeignKey(
+        ContentType, on_delete=models.CASCADE, related_name=""notes""
+    )
+    object_id = models.CharField(max_length=36)
+    owner = GenericForeignKey()
+
+
+class Story(models.Model):
+    name = models.CharField(max_length=30, primary_key=True)
+    notes = GenericRelation(""Note"", related_query_name=""story"")
+    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, null=True)
+    object_id = models.PositiveIntegerField(null=True)
+    inspiration = GenericForeignKey()
+
+
+class Idea(models.Model):
+    description = models.TextField()
+    stories = GenericRelation(Story)
diff --git a/tests/generic_relations/tests.py b/tests/generic_relations/tests.py
index e0c6fe2db756..eb4d397aa124 100644
--- a/tests/generic_relations/tests.py
+++ b/tests/generic_relations/tests.py
@@ -13,10 +13,13 @@
     ForConcreteModelModel,
     ForProxyModelModel,
     Gecko,
+    Idea,
     ManualPK,
     Mineral,
+    Note,
     ProxyRelatedModel,
     Rock,
+    Story,
     TaggedItem,
     ValuableRock,
     ValuableTaggedItem,
@@ -860,3 +863,17 @@ def test_none_allowed(self):
         # TaggedItem requires a content_type but initializing with None should
         # be allowed.
         TaggedItem(content_object=None)
+
+
+class GenericRelationQueryTests(TestCase):
+    def test_generic_relation_related_exact_lookup_incompatible_pk_types(self):
+        story = Story.objects.create(name=""The Hobbit"")
+        note1 = Note.objects.create(title=""Fantastic fantasy"", owner=story)
+        self.assertSequenceEqual(Note.objects.filter(story=story), [note1])
+        self.assertSequenceEqual(Note.objects.filter(story=story.pk), [note1])
+
+    def test_generic_relation_reverse_related_exact_lookup_incompatible_pk_types(self):
+        idea = Idea.objects.create(description=""Eureka"")
+        story = Story.objects.create(name=""Bathtime Serendipity"", inspiration=idea)
+        self.assertSequenceEqual(Idea.objects.filter(stories=story), [idea])
+        self.assertSequenceEqual(Idea.objects.filter(stories=story.pk), [idea])
","
#### Trac ticket number
ticket-33450

#### Branch description
(Not quite sure about some of the terminology, but here's a description of the issue:)

Selects on the reverse accessor for `GenericRelation` were preparing `rhs` values using the related model's primary key field (`target_field`), as is typical for many-to-one relationships. However, since `GenericForeignKey` may relate to models with different primary key types, this caused failures when the `to` model’s primary key type could not be coerced into the `object_id` field type of the `from` model.

PR proposes using the `object_id_field` for preparing the `rhs` value instead.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19080,"diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 000000000000..26d33521af10
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
diff --git a/.idea/django.iml b/.idea/django.iml
new file mode 100644
index 000000000000..09741360cc2a
--- /dev/null
+++ b/.idea/django.iml
@@ -0,0 +1,12 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module type=""PYTHON_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"">
+    <content url=""file://$MODULE_DIR$"" />
+    <orderEntry type=""jdk"" jdkName=""Python 3.12 (djangodev)"" jdkType=""Python SDK"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+  </component>
+  <component name=""PyDocumentationSettings"">
+    <option name=""format"" value=""PLAIN"" />
+    <option name=""myDocStringFormat"" value=""Plain"" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 000000000000..3a8b13cb0de6
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,25 @@
+<component name=""InspectionProjectProfileManager"">
+  <profile version=""1.0"">
+    <option name=""myName"" value=""Project Default"" />
+    <inspection_tool class=""PyPackageRequirementsInspection"" enabled=""true"" level=""WARNING"" enabled_by_default=""true"">
+      <option name=""ignoredPackages"">
+        <value>
+          <list size=""5"">
+            <item index=""0"" class=""java.lang.String"" itemvalue=""anyjson"" />
+            <item index=""1"" class=""java.lang.String"" itemvalue=""psycopg2"" />
+            <item index=""2"" class=""java.lang.String"" itemvalue=""sentry-sdk"" />
+            <item index=""3"" class=""java.lang.String"" itemvalue=""Django"" />
+            <item index=""4"" class=""java.lang.String"" itemvalue=""django-allauth"" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class=""PyUnresolvedReferencesInspection"" enabled=""true"" level=""WARNING"" enabled_by_default=""true"">
+      <option name=""ignoredIdentifiers"">
+        <list>
+          <option value=""app.transactions.models.*"" />
+        </list>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
index 000000000000..105ce2da2d64
--- /dev/null
+++ b/.idea/inspectionProfiles/profiles_settings.xml
@@ -0,0 +1,6 @@
+<component name=""InspectionProjectProfileManager"">
+  <settings>
+    <option name=""USE_PROJECT_PROFILE"" value=""false"" />
+    <version value=""1.0"" />
+  </settings>
+</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 000000000000..e930c7c203ee
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,7 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<project version=""4"">
+  <component name=""Black"">
+    <option name=""sdkName"" value=""Python 3.12 (djangodev)"" />
+  </component>
+  <component name=""ProjectRootManager"" version=""2"" project-jdk-name=""Python 3.12 (djangodev)"" project-jdk-type=""Python SDK"" />
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 000000000000..d2d7b19231b4
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<project version=""4"">
+  <component name=""ProjectModuleManager"">
+    <modules>
+      <module fileurl=""file://$PROJECT_DIR$/.idea/django.iml"" filepath=""$PROJECT_DIR$/.idea/django.iml"" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 000000000000..35eb1ddfbbc0
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<project version=""4"">
+  <component name=""VcsDirectoryMappings"">
+    <mapping directory="""" vcs=""Git"" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/django/shortcuts.py b/django/shortcuts.py
index 6274631dbad7..9c2aa10329a7 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -192,3 +192,7 @@ def resolve_url(to, *args, **kwargs):
 
     # Finally, fall back and assume it's a URL
     return to
+
+
+def make_toast():
+    return ""toast""
diff --git a/docs/releases/2.2.txt b/docs/releases/2.2.txt
index 664549473eab..11979230b92d 100644
--- a/docs/releases/2.2.txt
+++ b/docs/releases/2.2.txt
@@ -90,6 +90,11 @@ Minor features
 * Added path matching to the :option:`collectstatic --ignore` option so that
   patterns like ``/vendor/*.js`` can be used.
 
+:mod:`django.shortcuts`
+~~~~~~~~~~~~~~~~~~~~~~~
+
+* The new :func:`django.shortcuts.make_toast` function returns ``'toast'``.
+
 Database backends
 ~~~~~~~~~~~~~~~~~
 
diff --git a/docs/topics/http/shortcuts.txt b/docs/topics/http/shortcuts.txt
index 308eae085522..3b32bea9a0da 100644
--- a/docs/topics/http/shortcuts.txt
+++ b/docs/topics/http/shortcuts.txt
@@ -317,3 +317,11 @@ This example is equivalent to::
         if not my_objects:
             raise Http404(""No MyModel matches the given query."")
 
+``make_toast()``
+================
+
+.. function:: make_toast()
+
+.. versionadded:: 2.2
+
+Returns ``'toast'``.
diff --git a/tests/shortcuts/test_make_toast.py b/tests/shortcuts/test_make_toast.py
new file mode 100644
index 000000000000..f51c703a255c
--- /dev/null
+++ b/tests/shortcuts/test_make_toast.py
@@ -0,0 +1,7 @@
+from django.shortcuts import make_toast
+from django.test import SimpleTestCase
+
+
+class MakeToastTests(SimpleTestCase):
+    def test_make_toast(self):
+        self.assertEqual(make_toast(), ""toast"")
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18278,"diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index 7eee5da8b8ce..2eb8aa354bae 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -505,3 +505,16 @@ def _create_alternatives(self, msg):
                     )
                 )
         return msg
+
+    def body_contains(self, text):
+        """"""
+        Checks that ``text`` occurs in the email body and in all attached MIME
+        type text/* alternatives.
+        """"""
+        if text not in self.body:
+            return False
+
+        for content, mimetype in self.alternatives:
+            if mimetype.startswith(""text/"") and text not in content:
+                return False
+        return True
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 61101ce1fdcf..8b77ecc48245 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -143,6 +143,10 @@ Email
   <django.core.mail.EmailMultiAlternatives.alternatives>` is now a list of
   named tuples, as opposed to regular tuples.
 
+* The new :meth:`~django.core.mail.EmailMultiAlternatives.body_contains` method
+  returns a boolean indicating whether a provided text is contained in the
+  email ``body`` and in all attached MIME type ``text/*`` alternatives.
+
 Error Reporting
 ~~~~~~~~~~~~~~~
 
diff --git a/docs/topics/email.txt b/docs/topics/email.txt
index 635864a95e55..e5d4f277f526 100644
--- a/docs/topics/email.txt
+++ b/docs/topics/email.txt
@@ -436,6 +436,26 @@ Django's email library, you can do this using the
             msg.attach_alternative(html_content, ""text/html"")
             msg.send()
 
+    .. method:: body_contains(text)
+
+        .. versionadded:: 5.2
+
+        Returns a boolean indicating whether the provided ``text`` is
+        contained in the email ``body`` and in all attached MIME type
+        ``text/*`` alternatives.
+
+        This can be useful when testing emails. For example::
+
+            def test_contains_email_content(self):
+                subject = ""Hello World""
+                from_email = ""from@example.com""
+                to = ""to@example.com""
+                msg = EmailMultiAlternatives(subject, ""I am content."", from_email, [to])
+                msg.attach_alternative(""<p>I am content.</p>"", ""text/html"")
+
+                self.assertIs(msg.body_contains(""I am content""), True)
+                self.assertIs(msg.body_contains(""<p>I am content.</p>""), False)
+
 Updating the default content type
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/tests/mail/tests.py b/tests/mail/tests.py
index 3746ede3380d..1f7cbbadcaf7 100644
--- a/tests/mail/tests.py
+++ b/tests/mail/tests.py
@@ -1163,6 +1163,24 @@ def test_email_multi_alternatives_content_mimetype_none(self):
         with self.assertRaisesMessage(ValueError, msg):
             email_msg.attach_alternative(""<p>content</p>"", None)
 
+    def test_body_contains(self):
+        email_msg = EmailMultiAlternatives()
+        email_msg.body = ""I am content.""
+        self.assertIs(email_msg.body_contains(""I am""), True)
+        self.assertIs(email_msg.body_contains(""I am content.""), True)
+
+        email_msg.attach_alternative(""<p>I am different content.</p>"", ""text/html"")
+        self.assertIs(email_msg.body_contains(""I am""), True)
+        self.assertIs(email_msg.body_contains(""I am content.""), False)
+        self.assertIs(email_msg.body_contains(""<p>I am different content.</p>""), False)
+
+    def test_body_contains_alternative_non_text(self):
+        email_msg = EmailMultiAlternatives()
+        email_msg.body = ""I am content.""
+        email_msg.attach_alternative(""I am content."", ""text/html"")
+        email_msg.attach_alternative(b""I am a song."", ""audio/mpeg"")
+        self.assertIs(email_msg.body_contains(""I am content""), True)
+
 
 @requires_tz_support
 class MailTimeZoneTests(SimpleTestCase):
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35528

# Branch description

Currently, it's very hard and tedious to assert the content of an email object. Therefore, we want to add a method ""body_contains()"" to ""EmailMultiAlternatives"" to check a search string in all available text-based alternatives (content parts, like HTML).

This method can then be easily asserted in any given unit-test.

There's a forum discussion going on about this topic: [​https://forum.djangoproject.com/t/improve-email-unit-testing/32044/1](https://forum.djangoproject.com/t/improve-email-unit-testing/32044/1)

I've already created a PR for a suggetion: [​https://github.com/django/django/pull/18278/files](https://github.com/django/django/pull/18278/files)

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19464,"diff --git a/django/conf/app_template/urls.py-tpl b/django/conf/app_template/urls.py-tpl
new file mode 100644
index 000000000000..2f35140149de
--- /dev/null
+++ b/django/conf/app_template/urls.py-tpl
@@ -0,0 +1,5 @@
+from django.urls import path
+
+urlpatterns = [
+    # path('', views.home, name='home'),
+]
diff --git a/tests/app_url/test_project/manage.py b/tests/app_url/test_project/manage.py
new file mode 100644
index 000000000000..b455bc84e607
--- /dev/null
+++ b/tests/app_url/test_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+""""""Django's command-line utility for administrative tasks.""""""
+import os
+import sys
+
+
+def main():
+    """"""Run administrative tasks.""""""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            ""Couldn't import Django. Are you sure it's installed and ""
+            ""available on your PYTHONPATH environment variable? Did you ""
+            ""forget to activate a virtual environment?""
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/tests/app_url/test_project/miapp/__init__.py b/tests/app_url/test_project/miapp/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/app_url/test_project/miapp/admin.py b/tests/app_url/test_project/miapp/admin.py
new file mode 100644
index 000000000000..8c38f3f3dad5
--- /dev/null
+++ b/tests/app_url/test_project/miapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/tests/app_url/test_project/miapp/apps.py b/tests/app_url/test_project/miapp/apps.py
new file mode 100644
index 000000000000..eba2a7365398
--- /dev/null
+++ b/tests/app_url/test_project/miapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class MiappConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'miapp'
diff --git a/tests/app_url/test_project/miapp/migrations/__init__.py b/tests/app_url/test_project/miapp/migrations/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/app_url/test_project/miapp/models.py b/tests/app_url/test_project/miapp/models.py
new file mode 100644
index 000000000000..71a836239075
--- /dev/null
+++ b/tests/app_url/test_project/miapp/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/tests/app_url/test_project/miapp/tests.py b/tests/app_url/test_project/miapp/tests.py
new file mode 100644
index 000000000000..7ce503c2dd97
--- /dev/null
+++ b/tests/app_url/test_project/miapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/tests/app_url/test_project/miapp/urls.py b/tests/app_url/test_project/miapp/urls.py
new file mode 100644
index 000000000000..2f35140149de
--- /dev/null
+++ b/tests/app_url/test_project/miapp/urls.py
@@ -0,0 +1,5 @@
+from django.urls import path
+
+urlpatterns = [
+    # path('', views.home, name='home'),
+]
diff --git a/tests/app_url/test_project/miapp/views.py b/tests/app_url/test_project/miapp/views.py
new file mode 100644
index 000000000000..91ea44a218fb
--- /dev/null
+++ b/tests/app_url/test_project/miapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/tests/app_url/test_project/test_project/__init__.py b/tests/app_url/test_project/test_project/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/app_url/test_project/test_project/asgi.py b/tests/app_url/test_project/test_project/asgi.py
new file mode 100644
index 000000000000..342a9c9009ef
--- /dev/null
+++ b/tests/app_url/test_project/test_project/asgi.py
@@ -0,0 +1,16 @@
+""""""
+ASGI config for test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+""""""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_asgi_application()
diff --git a/tests/app_url/test_project/test_project/settings.py b/tests/app_url/test_project/test_project/settings.py
new file mode 100644
index 000000000000..e44769da67ea
--- /dev/null
+++ b/tests/app_url/test_project/test_project/settings.py
@@ -0,0 +1,122 @@
+""""""
+Django settings for test_project project.
+
+Generated by 'django-admin startproject' using Django 6.0.dev20250513154117.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+""""""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure--x1en5c&vcfb45y*^v$%trvbd+8-h@ff2qiuzs6ovwuzo4ke0#'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/tests/app_url/test_project/test_project/urls.py b/tests/app_url/test_project/test_project/urls.py
new file mode 100644
index 000000000000..fb60a71ef827
--- /dev/null
+++ b/tests/app_url/test_project/test_project/urls.py
@@ -0,0 +1,22 @@
+""""""
+URL configuration for test_project project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+""""""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/tests/app_url/test_project/test_project/wsgi.py b/tests/app_url/test_project/test_project/wsgi.py
new file mode 100644
index 000000000000..7050af9edd83
--- /dev/null
+++ b/tests/app_url/test_project/test_project/wsgi.py
@@ -0,0 +1,16 @@
+""""""
+WSGI config for test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+""""""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_wsgi_application()
","> This pull request adds a default `urls.py` file to the template used when running `python manage.py startapp`. The goal is to promote better app modularization by encouraging developers to define app-level URL configurations from the start.
>
> Currently, Django does not include this file by default, even though creating it is a common and repetitive step in nearly every app. By including it, we:
>
> * Encourage better separation of concerns between project-wide and app-specific routing.
> * Save time for developers, especially those working with reusable or pluggable apps.
> * Improve onboarding for new developers by giving them a structure to define routes from the beginning.
>
> The added `urls.py` file includes a minimal and clean scaffold:
>
> ```python
> from django.urls import path
>
> urlpatterns = [
>     # path('', views.home, name='home'),
> ]
> ```
>
> I believe this small addition aligns with Django’s philosophy of clarity and reusability. Let me know if there are any improvements or considerations needed — happy to iterate on the suggestion.
"
django/django,18398,"diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index 64103f14db92..e9e41cff1ebf 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -208,24 +208,28 @@ def test_update(self):
 
     def _test_slicing_of_f_expressions(self, model):
         tests = [
-            (F(""name"")[:], ""Example Inc."", ""Example Inc.""),
-            (F(""name"")[:7], ""Example Inc."", ""Example""),
-            (F(""name"")[:6][:5], ""Example"", ""Examp""),  # Nested slicing.
-            (F(""name"")[0], ""Examp"", ""E""),
-            (F(""name"")[5], ""E"", """"),
-            (F(""name"")[7:], ""Foobar Ltd."", ""Ltd.""),
-            (F(""name"")[0:10], ""Ltd."", ""Ltd.""),
-            (F(""name"")[2:7], ""Test GmbH"", ""st Gm""),
-            (F(""name"")[1:][:3], ""st Gm"", ""t G""),
-            (F(""name"")[2:2], ""t G"", """"),
+            (F(""name"")[:], ""Example Inc.""),
+            (F(""name"")[:7], ""Example""),
+            (F(""name"")[:6][:5], ""Examp""),  # Nested slicing.
+            (F(""name"")[0], ""E""),
+            (F(""name"")[13], """"),
+            (F(""name"")[8:], ""Inc.""),
+            (F(""name"")[0:15], ""Example Inc.""),
+            (F(""name"")[2:7], ""ample""),
+            (F(""name"")[1:][:3], ""xam""),
+            (F(""name"")[2:2], """"),
         ]
-        for expression, name, expected in tests:
-            with self.subTest(expression=expression, name=name, expected=expected):
-                obj = model.objects.get(name=name)
-                obj.name = expression
-                obj.save()
-                obj.refresh_from_db()
-                self.assertEqual(obj.name, expected)
+        for expression, expected in tests:
+            with self.subTest(expression=expression, expected=expected):
+                obj = model.objects.get(name=""Example Inc."")
+                try:
+                    obj.name = expression
+                    obj.save(update_fields=[""name""])
+                    obj.refresh_from_db()
+                    self.assertEqual(obj.name, expected)
+                finally:
+                    obj.name = ""Example Inc.""
+                    obj.save(update_fields=[""name""])
 
     def test_slicing_of_f_expressions_charfield(self):
         self._test_slicing_of_f_expressions(Company)
",Thanks Tim Graham for the [report](https://github.com/django/django/pull/17596/files#r1679386032).
django/django,19399,"diff --git a/django/db/backends/base/base.py b/django/db/backends/base/base.py
index 54328c845068..b85e68896df1 100644
--- a/django/db/backends/base/base.py
+++ b/django/db/backends/base/base.py
@@ -20,6 +20,7 @@
 from django.db.utils import DatabaseErrorWrapper, ProgrammingError
 from django.utils.asyncio import async_unsafe
 from django.utils.functional import cached_property
+from django.views.decorators.debug import sensitive_variables
 
 NO_DB_ALIAS = ""__no_db__""
 RAN_DB_VERSION_CHECK = set()
@@ -205,6 +206,7 @@ def check_database_version_supported(self):
 
     # ##### Backend-specific methods for creating connections and cursors #####
 
+    @sensitive_variables()
     def get_connection_params(self):
         """"""Return a dict of parameters suitable for get_new_connection.""""""
         raise NotImplementedError(
@@ -212,6 +214,7 @@ def get_connection_params(self):
             ""method""
         )
 
+    @sensitive_variables(""conn_params"")
     def get_new_connection(self, conn_params):
         """"""Open a connection to the database.""""""
         raise NotImplementedError(
@@ -234,6 +237,7 @@ def create_cursor(self, name=None):
     # ##### Backend-specific methods for creating connections #####
 
     @async_unsafe
+    @sensitive_variables(""conn_params"")
     def connect(self):
         """"""Connect to the database. Assume that the connection is closed.""""""
         # Check for invalid configurations.
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35930 

#### Branch description
Added appropriate @sensitive_variables decorators to database backend
connection methods to prevent sensitive credentials from appearing in
debug pages. The changes include:

* @sensitive_variables() for get_connection_params() to mask all variables
* @sensitive_variables('conn_params') for get_new_connection()
* @sensitive_variables('conn_params') for connect()

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19047,"diff --git a/django/contrib/gis/geoip2.py b/django/contrib/gis/geoip2.py
index a5fe429b89ed..5b510dee7f96 100644
--- a/django/contrib/gis/geoip2.py
+++ b/django/contrib/gis/geoip2.py
@@ -153,11 +153,12 @@ def _query(self, query, *, require_city=False):
         if require_city and not self.is_city:
             raise GeoIP2Exception(f""Invalid GeoIP city data file: {self._path}"")
 
-        try:
-            validate_ipv46_address(query)
-        except ValidationError:
-            # GeoIP2 only takes IP addresses, so try to resolve a hostname.
-            query = socket.gethostbyname(query)
+        if isinstance(query, str):
+            try:
+                validate_ipv46_address(query)
+            except ValidationError:
+                # GeoIP2 only takes IP addresses, so try to resolve a hostname.
+                query = socket.gethostbyname(query)
 
         function = self._reader.city if self.is_city else self._reader.country
         return function(query)
diff --git a/django/utils/ipv6.py b/django/utils/ipv6.py
index 1b79d5222646..c77083e3cfb1 100644
--- a/django/utils/ipv6.py
+++ b/django/utils/ipv6.py
@@ -51,12 +51,14 @@ def clean_ipv6_address(
     return str(addr)
 
 
-def is_valid_ipv6_address(ip_str):
+def is_valid_ipv6_address(ip_addr):
     """"""
-    Return whether or not the `ip_str` string is a valid IPv6 address.
+    Return whether the `ip_addr` object is a valid IPv6 address.
     """"""
+    if isinstance(ip_addr, ipaddress.IPv6Address):
+        return True
     try:
-        _ipv6_address_from_str(ip_str)
-    except ValueError:
+        _ipv6_address_from_str(ip_addr)
+    except (TypeError, ValueError):
         return False
     return True
diff --git a/docs/releases/4.2.19.txt b/docs/releases/4.2.19.txt
new file mode 100644
index 000000000000..91bc8e584293
--- /dev/null
+++ b/docs/releases/4.2.19.txt
@@ -0,0 +1,14 @@
+===========================
+Django 4.2.19 release notes
+===========================
+
+*Expected February 5, 2025*
+
+Django 4.2.19 fixes a regression in 4.2.18.
+
+Bugfixes
+========
+
+* Fixed a regression in Django 4.2.18 that caused ``validate_ipv6_address()``
+  and ``validate_ipv46_address()`` to crash when handling non-string values
+  (:ticket:`36098`).
diff --git a/docs/releases/5.0.12.txt b/docs/releases/5.0.12.txt
new file mode 100644
index 000000000000..1e1f0f2a956f
--- /dev/null
+++ b/docs/releases/5.0.12.txt
@@ -0,0 +1,14 @@
+===========================
+Django 5.0.12 release notes
+===========================
+
+*Expected February 5, 2025*
+
+Django 5.0.12 fixes a regression in 5.0.11.
+
+Bugfixes
+========
+
+* Fixed a regression in Django 5.0.11 that caused ``validate_ipv6_address()``
+  and ``validate_ipv46_address()`` to crash when handling non-string values
+  (:ticket:`36098`).
diff --git a/docs/releases/5.1.6.txt b/docs/releases/5.1.6.txt
index fa60de4c8dc4..3b2319203317 100644
--- a/docs/releases/5.1.6.txt
+++ b/docs/releases/5.1.6.txt
@@ -9,4 +9,6 @@ Django 5.1.6 fixes several bugs in 5.1.5.
 Bugfixes
 ========
 
-* ...
+* Fixed a regression in Django 5.1.5 that caused ``validate_ipv6_address()``
+  and ``validate_ipv46_address()`` to crash when handling non-string values
+  (:ticket:`36098`).
diff --git a/docs/releases/index.txt b/docs/releases/index.txt
index 8190a47a1411..11059e5da20c 100644
--- a/docs/releases/index.txt
+++ b/docs/releases/index.txt
@@ -45,6 +45,7 @@ versions of the documentation contain the release notes for any later releases.
 .. toctree::
    :maxdepth: 1
 
+   5.0.12
    5.0.11
    5.0.10
    5.0.9
@@ -64,6 +65,7 @@ versions of the documentation contain the release notes for any later releases.
 .. toctree::
    :maxdepth: 1
 
+   4.2.19
    4.2.18
    4.2.17
    4.2.16
diff --git a/tests/utils_tests/test_ipv6.py b/tests/utils_tests/test_ipv6.py
index 1754c7b3569b..e43e6ca6e4f5 100644
--- a/tests/utils_tests/test_ipv6.py
+++ b/tests/utils_tests/test_ipv6.py
@@ -1,5 +1,7 @@
 import traceback
+from decimal import Decimal
 from io import StringIO
+from ipaddress import IPv6Address
 
 from django.core.exceptions import ValidationError
 from django.test import SimpleTestCase
@@ -23,6 +25,16 @@ def test_validates_correct_with_v4mapping(self):
         self.assertTrue(is_valid_ipv6_address(""::ffff:254.42.16.14""))
         self.assertTrue(is_valid_ipv6_address(""::ffff:0a0a:0a0a""))
 
+    def test_validates_correct_with_ipv6_instance(self):
+        cases = [
+            IPv6Address(""::ffff:2.125.160.216""),
+            IPv6Address(""fe80::1""),
+            IPv6Address(""::""),
+        ]
+        for case in cases:
+            with self.subTest(case=case):
+                self.assertIs(is_valid_ipv6_address(case), True)
+
     def test_validates_incorrect_plain_address(self):
         self.assertFalse(is_valid_ipv6_address(""foo""))
         self.assertFalse(is_valid_ipv6_address(""127.0.0.1""))
@@ -45,6 +57,12 @@ def test_validates_incorrect_with_v4mapping(self):
         self.assertFalse(is_valid_ipv6_address(""::999.42.16.14""))
         self.assertFalse(is_valid_ipv6_address(""::zzzz:0a0a""))
 
+    def test_validates_incorrect_with_non_string(self):
+        cases = [None, [], {}, (), Decimal(""2.46""), 192.168, 42]
+        for case in cases:
+            with self.subTest(case=case):
+                self.assertIs(is_valid_ipv6_address(case), False)
+
     def test_cleans_plain_address(self):
         self.assertEqual(clean_ipv6_address(""DEAD::0:BEEF""), ""dead::beef"")
         self.assertEqual(
diff --git a/tests/validators/tests.py b/tests/validators/tests.py
index acd867c54532..49f4b6acbb80 100644
--- a/tests/validators/tests.py
+++ b/tests/validators/tests.py
@@ -1,3 +1,4 @@
+import ipaddress
 import re
 import types
 from datetime import datetime, timedelta
@@ -398,15 +399,25 @@
     (validate_ipv6_address, ""fe80::1"", None),
     (validate_ipv6_address, ""::1"", None),
     (validate_ipv6_address, ""1:2:3:4:5:6:7:8"", None),
+    (validate_ipv6_address, ipaddress.IPv6Address(""::ffff:2.125.160.216""), None),
+    (validate_ipv6_address, ipaddress.IPv6Address(""fe80::1""), None),
+    (validate_ipv6_address, Decimal(""33.1""), ValidationError),
+    (validate_ipv6_address, 9.22, ValidationError),
     (validate_ipv6_address, ""1:2"", ValidationError),
     (validate_ipv6_address, ""::zzz"", ValidationError),
     (validate_ipv6_address, ""12345::"", ValidationError),
     (validate_ipv46_address, ""1.1.1.1"", None),
     (validate_ipv46_address, ""255.0.0.0"", None),
     (validate_ipv46_address, ""0.0.0.0"", None),
+    (validate_ipv46_address, ipaddress.IPv4Address(""1.1.1.1""), None),
+    (validate_ipv46_address, ipaddress.IPv4Address(""255.0.0.0""), None),
     (validate_ipv46_address, ""fe80::1"", None),
     (validate_ipv46_address, ""::1"", None),
     (validate_ipv46_address, ""1:2:3:4:5:6:7:8"", None),
+    (validate_ipv46_address, ipaddress.IPv6Address(""::ffff:2.125.160.216""), None),
+    (validate_ipv46_address, ipaddress.IPv6Address(""fe80::1""), None),
+    (validate_ipv46_address, Decimal(""33.1""), ValidationError),
+    (validate_ipv46_address, 9.22, ValidationError),
     (validate_ipv46_address, ""256.1.1.1"", ValidationError),
     (validate_ipv46_address, ""25.1.1."", ValidationError),
     (validate_ipv46_address, ""25,1,1,1"", ValidationError),
","ticket-36098
"
django/django,19152,"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 57ceadcec468..444e2fab7b41 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -523,6 +523,18 @@ class Expression(BaseExpression, Combinable):
     def _constructor_signature(cls):
         return inspect.signature(cls.__init__)
 
+    @classmethod
+    def _identity(cls, value):
+        if isinstance(value, tuple):
+            return tuple(map(cls._identity, value))
+        if isinstance(value, dict):
+            return tuple((key, cls._identity(val)) for key, val in value.items())
+        if isinstance(value, fields.Field):
+            if value.name and value.model:
+                return value.model._meta.label, value.name
+            return type(value)
+        return make_hashable(value)
+
     @cached_property
     def identity(self):
         args, kwargs = self._constructor_args
@@ -532,13 +544,10 @@ def identity(self):
         next(arguments)
         identity = [self.__class__]
         for arg, value in arguments:
-            if isinstance(value, fields.Field):
-                if value.name and value.model:
-                    value = (value.model._meta.label, value.name)
-                else:
-                    value = type(value)
-            else:
-                value = make_hashable(value)
+            # If __init__() makes use of *args or **kwargs captures `value`
+            # will respectively be a tuple or a dict that must have its
+            # constituents unpacked (mainly if contain Field instances).
+            value = self._identity(value)
             identity.append((arg, value))
         return tuple(identity)
 
diff --git a/tests/db_functions/text/test_concat.py b/tests/db_functions/text/test_concat.py
index 6e4cb91d3a93..ffcd19fad6b6 100644
--- a/tests/db_functions/text/test_concat.py
+++ b/tests/db_functions/text/test_concat.py
@@ -107,3 +107,17 @@ def test_concat_non_str(self):
             ctx.captured_queries[0][""sql""].count(""::text""),
             1 if connection.vendor == ""postgresql"" else 0,
         )
+
+    def test_equal(self):
+        self.assertEqual(
+            Concat(""foo"", ""bar"", output_field=TextField()),
+            Concat(""foo"", ""bar"", output_field=TextField()),
+        )
+        self.assertNotEqual(
+            Concat(""foo"", ""bar"", output_field=TextField()),
+            Concat(""foo"", ""bar"", output_field=CharField()),
+        )
+        self.assertNotEqual(
+            Concat(""foo"", ""bar"", output_field=TextField()),
+            Concat(""bar"", ""foo"", output_field=TextField()),
+        )
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index cfa33b6f45ca..89601de85bda 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -1433,6 +1433,29 @@ class TestModel(Model):
             Expression(TestModel._meta.get_field(""other_field"")),
         )
 
+        class InitCaptureExpression(Expression):
+            def __init__(self, *args, **kwargs):
+                super().__init__(*args, **kwargs)
+
+        # The identity of expressions that obscure their __init__() signature
+        # with *args and **kwargs cannot be determined when bound with
+        # different combinations or *args and **kwargs.
+        self.assertNotEqual(
+            InitCaptureExpression(IntegerField()),
+            InitCaptureExpression(output_field=IntegerField()),
+        )
+
+        # However, they should be considered equal when their bindings are
+        # equal.
+        self.assertEqual(
+            InitCaptureExpression(IntegerField()),
+            InitCaptureExpression(IntegerField()),
+        )
+        self.assertEqual(
+            InitCaptureExpression(output_field=IntegerField()),
+            InitCaptureExpression(output_field=IntegerField()),
+        )
+
     def test_hash(self):
         self.assertEqual(hash(Expression()), hash(Expression()))
         self.assertEqual(
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36173

#### Branch description

When `Expression.__init__` overrides make use of `*args`, `**kwargs` captures their argument values are respectively bound as a `tuple` and `dict` instances. These composite values might themselves contain values that require special identity treatments such as `Concat(*expressions, output_field)` as it's a `Field` instance.

Refs ticket-30628 which introduced bound `Field` differentiation but lacked argument captures handling.

Thanks @erchenstein for the report.


"
django/django,17614,"diff --git a/tests/cache/tests.py b/tests/cache/tests.py
index fcce9579d48c..c2a1ebdbb844 100644
--- a/tests/cache/tests.py
+++ b/tests/cache/tests.py
@@ -1766,6 +1766,28 @@ def test_has_key_race_handling(self):
             self.assertIs(cache.has_key(""key""), False)
             mocked_open.assert_called_once()
 
+    def test_touch(self):
+        """"""Override to manually advance time since file access can be slow.""""""
+
+        class ManualTickingTime:
+            def __init__(self):
+                # Freeze time, calling `sleep` will manually advance it.
+                self._time = time.time()
+
+            def time(self):
+                return self._time
+
+            def sleep(self, seconds):
+                self._time += seconds
+
+        mocked_time = ManualTickingTime()
+        with (
+            mock.patch(""django.core.cache.backends.filebased.time"", new=mocked_time),
+            mock.patch(""django.core.cache.backends.base.time"", new=mocked_time),
+            mock.patch(""cache.tests.time"", new=mocked_time),
+        ):
+            super().test_touch()
+
 
 @unittest.skipUnless(RedisCache_params, ""Redis backend not configured"")
 @override_settings(
","I've noticed a recurrent failure in Jenkins' runs where the `test_touch` for the filesystem cache backend fails (intermittently but often enough that it bothers me). My understanding is that this is caused by the cache expiration happening faster than the test execution, specifically the code:

```python
        self.assertIs(cache.touch(""expire1"", timeout=4), True)
        time.sleep(2)
        self.assertIs(cache.has_key(""expire1""), True)
```

is flaky in that `cache.has_key` returns False if the expiration happened faster than the 2 second sleeping plus the file opening, de-pickling and checking for its contents.

This proposal mocks `time` for this particular test and backend to manually control time and thus ensuring deterministic runs."
django/django,19178,"diff --git a/docs/internals/howto-release-django.txt b/docs/internals/howto-release-django.txt
index fe0b8368e24c..5427ab31c05b 100644
--- a/docs/internals/howto-release-django.txt
+++ b/docs/internals/howto-release-django.txt
@@ -1,5 +1,5 @@
 =====================
-How is Django Formed?
+How to release Django
 =====================
 
 This document explains how to release Django.
@@ -30,20 +30,26 @@ The short version of the steps involved is:
 #. Proofread the release notes, looking for organization and writing errors.
    Draft a blog post and email announcement.
 
-#. Update version numbers and create the release package(s).
+#. Update version numbers and create the release artifacts.
 
-#. Upload the package(s) to the ``djangoproject.com`` server.
+#. Create the new ``Release`` in the admin on ``djangoproject.com``.
+
+   #. Set the proper date but ensure the flag ``is_active`` is disabled.
+   #. Upload the artifacts (tarball, wheel, and checksums).
 
 #. Verify package(s) signatures, check if they can be installed, and ensure
    minimal functionality.
 
 #. Upload the new version(s) to PyPI.
 
-#. Declare the new version in the admin on ``djangoproject.com``.
+#. Enable the ``is_active`` flag for each release in the admin on
+   ``djangoproject.com``.
 
 #. Post the blog entry and send out the email announcements.
 
-#. Update version numbers post-release.
+#. Update version numbers post-release in stable branch(es).
+
+#. Add stub release notes for the next patch release in ``main`` and backport.
 
 There are a lot of details, so please read on.
 
@@ -65,7 +71,6 @@ permissions.
   * hashing tools (typically ``md5sum``, ``sha1sum``, and ``sha256sum`` on
     Linux, or ``md5`` and ``shasum`` on macOS)
   * python
-  * ssh
 
 * A GPG key pair. Ensure that the private part of this key is securely stored.
   The public part needs to be uploaded to your GitHub account, and also to the
@@ -121,15 +126,12 @@ permissions.
        rest_hostname = https://rest.api.transifex.com
        token = # API token
 
-* Access to the ``djangoproject.com`` server to upload files (using ``scp``).
-
 * Access to the Django admin on ``djangoproject.com`` as a ""Site maintainer"".
 
 * Access to create a post in the `Django Forum - Announcements category
-  <https://forum.djangoproject.com/c/announcements/7>`_ and to  send emails to
-  the following mailing lists:
-
-  * `django-announce <https://groups.google.com/g/django-announce/>`_
+  <https://forum.djangoproject.com/c/announcements/7>`_ and to send emails to
+  the `django-announce <https://groups.google.com/g/django-announce/>`_
+  mailing list.
 
 * Access to the ``django-security`` repo in GitHub. Among other things, this
   provides access to the pre-notification distribution list (needed for
@@ -457,25 +459,33 @@ issuing **multiple releases**, repeat these steps for each release.
    #. Otherwise, make sure the classifier is set to
       ``Development Status :: 5 - Production/Stable``.
 
-#. Tag the release using ``git tag``. For example:
+Building the artifacts
+----------------------
 
-   .. code-block:: shell
+.. admonition:: Optionally use helper scripts
 
-        $ git tag --sign --message=""Tag 4.1.1"" 4.1.1
+    You can streamline some of the steps below using helper scripts from the Wiki:
 
-   You can check your work running ``git tag --verify <tag>``.
+    * `Release script for versions 5.1 and newer
+      <https://code.djangoproject.com/wiki/ReleaseScript>`_
+    * `Release script for versions 5.0 and older
+      <https://code.djangoproject.com/wiki/ReleaseScript5.0AndOlder>`_
+    * `Test new version script
+      <https://code.djangoproject.com/wiki/ReleaseTestNewVersion>`_
 
-#. Push your work and the new tag:
+#. Tag the release using ``git tag``. For example:
 
    .. code-block:: shell
 
-        $ git push
-        $ git push --tags
+        $ git tag --sign --message=""Tag 4.1.1"" 4.1.1
+
+   You can check your work running ``git tag --verify <tag>``.
 
 #. Make sure you have an absolutely clean tree by running ``git clean -dfx``.
 
 #. Run ``python -m build`` to generate the release packages. This will create
-   the release packages in a ``dist/`` directory.
+   the release artifacts (tarball and wheel) in a ``dist/`` directory. For
+   Django 5.0 or older, you need to run ``make -f extras/Makefile`` instead.
 
 #. Generate the hashes of the release packages:
 
@@ -521,8 +531,8 @@ issuing **multiple releases**, repeat these steps for each release.
     Release packages
     ================
 
-    https://www.djangoproject.com/m/releases/<<MAJOR VERSION>>/<<RELEASE TAR.GZ FILENAME>>
-    https://www.djangoproject.com/m/releases/<<MAJOR VERSION>>/<<RELEASE WHL FILENAME>>
+    https://www.djangoproject.com/download/<<VERSION>>/tarball/
+    https://www.djangoproject.com/download/<<VERSION>>/wheel/
 
     MD5 checksums
     =============
@@ -552,55 +562,36 @@ Making the release(s) available to the public
 
 Now you're ready to actually put the release out there. To do this:
 
-#. Upload the checksum file(s):
-
-   .. code-block:: shell
+#. Create a new ``Release`` entry in the `djangoproject.com's admin
+   <https://www.djangoproject.com/admin/releases/release/add/>`_. If this is a
+   security release, this should be done 15 minutes before the announced
+   release time, no sooner:
 
-        $ scp Django-A.B.C.checksum.txt.asc djangoproject.com:/home/www/www/media/pgp/Django-A.B.C.checksum.txt
+   Version
+     Must match the version number as defined in the tarball
+     (``django-<version>.tar.gz``). For example: ""5.2"", ""4.1.1"", or ""4.2rc1"".
 
-   (If this is a security release, what follows should be done 15 minutes
-   before the announced release time, no sooner.)
+   Is active
+     Set to False until the release is fully published (last step).
 
-#. Upload the release package(s) to the djangoproject server, replacing
-   A.B. with the appropriate version number, e.g. 4.1 for a 4.1.x release:
+   LTS
+     Enable if the release is part of an :abbr:`LTS (Long Term Support)`
+     branch.
 
-   .. code-block:: shell
+   Dates
+     Set the release date to today. This release will not be published until
+     ``is_active`` is enabled.
 
-        $ scp Django-* djangoproject.com:/home/www/www/media/releases/A.B
+   Artifacts
+     Upload the tarball (``django-<version>.tar.gz``), wheel
+     (``django-<version>-py3-none-any.whl``), and checksum
+     (``django-<version>.checksum.txt.asc``) files created earlier.
 
 #. Test that the release packages install correctly using ``pip``. Here's one
    simple method (this just tests that the binaries are available, that they
    install correctly, and that migrations and the development server start, but
    it'll catch silly mistakes):
-
-   .. code-block:: shell
-
-        $ RELEASE_VERSION='4.1.1'
-        $ MAJOR_VERSION=`echo $RELEASE_VERSION| cut -c 1-3`
-
-        $ python -m venv django-pip-tarball
-        $ . django-pip-tarball/bin/activate
-        $ python -m pip install https://www.djangoproject.com/m/releases/$MAJOR_VERSION/Django-$RELEASE_VERSION.tar.gz
-        $ django-admin startproject test_tarball
-        $ cd test_tarball
-        $ ./manage.py --help  # Ensure executable bits
-        $ python manage.py migrate
-        $ python manage.py runserver
-        <CTRL+C>
-        $ deactivate
-        $ cd .. && rm -rf test_tarball && rm -rf django-pip-tarball
-
-        $ python -m venv django-pip-wheel
-        $ . django-pip-wheel/bin/activate
-        $ python -m pip install https://www.djangoproject.com/m/releases/$MAJOR_VERSION/Django-$RELEASE_VERSION-py3-none-any.whl
-        $ django-admin startproject test_wheel
-        $ cd test_wheel
-        $ ./manage.py --help  # Ensure executable bits
-        $ python manage.py migrate
-        $ python manage.py runserver
-        <CTRL+C>
-        $ deactivate
-        $ cd .. && rm -rf test_wheel && rm -rf django-pip-wheel
+   https://code.djangoproject.com/wiki/ReleaseTestNewVersion.
 
 #. Run the `confirm-release`__ build on Jenkins to verify the checksum file(s)
    (e.g. use ``4.2rc1`` for
@@ -615,12 +606,15 @@ Now you're ready to actually put the release out there. To do this:
 
        $ twine upload --repository django dist/*
 
-#. Go to the `Add release page in the admin`__, enter the new release number
-   exactly as it appears in the name of the tarball
-   (``Django-<version>.tar.gz``). So for example enter ""4.1.1"" or ""4.2rc1"",
-   etc. If the release is part of an LTS branch, mark it so.
+#. Update the newly created ``Release`` in the admin in ``djangoproject.com``
+   and enable the ``is_active`` flag.
 
-   __ https://www.djangoproject.com/admin/releases/release/add/
+#. Push your work and the new tag:
+
+   .. code-block:: shell
+
+        $ git push
+        $ git push --tags
 
 #. Make the blog post announcing the release live.
 
",This PR updates the documented release process to match the changes proposed in https://github.com/django/djangoproject.com/pull/1801
django/django,6936,"diff --git a/django/db/models/query.py b/django/db/models/query.py
index cff7135ef6e8..05f6ed370d6d 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -25,7 +25,7 @@
 from django.db.models.sql.constants import CURSOR
 from django.utils import six, timezone
 from django.utils.deprecation import RemovedInDjango20Warning
-from django.utils.functional import partition
+from django.utils.functional import cached_property, partition
 from django.utils.version import get_version
 
 # The maximum number of items to display in a QuerySet.__repr__
@@ -1545,7 +1545,12 @@ def get_prefetcher(instance, through_attr, to_attr):
                 if hasattr(rel_obj, 'get_prefetch_queryset'):
                     prefetcher = rel_obj
                 if through_attr != to_attr:
-                    is_fetched = hasattr(instance, to_attr)
+                    # Special case cached_property instances because hasattr
+                    # triggers attribute computation and assignment.
+                    if isinstance(getattr(instance.__class__, to_attr, None), cached_property):
+                        is_fetched = to_attr in instance.__dict__
+                    else:
+                        is_fetched = hasattr(instance, to_attr)
                 else:
                     is_fetched = through_attr in instance._prefetched_objects_cache
     return prefetcher, rel_obj_descriptor, attr_found, is_fetched
diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py
index 32570e9109da..064ce1dfbdac 100644
--- a/tests/prefetch_related/models.py
+++ b/tests/prefetch_related/models.py
@@ -6,6 +6,7 @@
 from django.contrib.contenttypes.models import ContentType
 from django.db import models
 from django.utils.encoding import python_2_unicode_compatible
+from django.utils.functional import cached_property
 
 
 # Basic tests
@@ -219,6 +220,10 @@ def primary_house(self):
     def all_houses(self):
         return list(self.houses.all())
 
+    @cached_property
+    def cached_all_houses(self):
+        return self.all_houses
+
     class Meta:
         ordering = ['id']
 
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index c34682a33d87..7c36975084e7 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -743,6 +743,17 @@ def test_to_attr_doesnt_cache_through_attr_as_list(self):
         ).get(pk=self.house3.pk)
         self.assertIsInstance(house.rooms.all(), QuerySet)
 
+    def test_to_attr_cached_property(self):
+        persons = Person.objects.prefetch_related(
+            Prefetch('houses', House.objects.all(), to_attr='cached_all_houses'),
+        )
+        for person in persons:
+            # To bypass caching at the related descriptor level, don't use
+            # person.houses.all() here.
+            all_houses = list(House.objects.filter(occupants=person))
+            with self.assertNumQueries(0):
+                self.assertEqual(person.cached_all_houses, all_houses)
+
 
 class DefaultManagerTests(TestCase):
 
","Thanks Trac alias karyon for the report.
"
django/django,19550,"diff --git a/docs/releases/security.txt b/docs/releases/security.txt
index e676a965bd4..353f1a9b96a 100644
--- a/docs/releases/security.txt
+++ b/docs/releases/security.txt
@@ -47,6 +47,14 @@ Potential log injection via unescaped request path.
 * Django 5.1 :commit:`(patch) <596542ddb46cdabe011322917e1655f0d24eece2>`
 * Django 4.2 :commit:`(patch) <ac03c5e7df8680c61cdb0d3bdb8be9095dba841e>`
 
+There was an additional hardening with new patch releases published on June 10,
+2025. `Full description
+<https://www.djangoproject.com/weblog/2025/jun/10/bugfix-releases/>`__
+
+* Django 5.2.3 :commit:`(patch) <8fcc83953c350e158a484bf1da0aa1b79b69bb07>`
+* Django 5.1.11 :commit:`(patch) <31f4bd31fa16f7f5302f65b9b8b7a49b69a7c4a6>`
+* Django 4.2.23 :commit:`(patch) <b597d46bb19c8567615e62029210dab16c70db7d>`
+
 May 7, 2025 - :cve:`2025-32873`
 -------------------------------
 
","Proposal on how to update the security archive :+1: 

Another option would be to add a new entry

This is to show that the patches relate to CVE-2025-48432. If it's not necessary, we don't need to add"
django/django,19029,"diff --git a/tests/forms_tests/templates/forms_tests/custom_field.html b/tests/forms_tests/templates/forms_tests/custom_field.html
index 5d19c9ed49a2..eb0ecee6a275 100644
--- a/tests/forms_tests/templates/forms_tests/custom_field.html
+++ b/tests/forms_tests/templates/forms_tests/custom_field.html
@@ -1,3 +1,3 @@
 {{ field.label_tag }}
-<p>Custom Field<p>
+<p>Custom Field</p>
 {{ field }}
diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py
index b41424d43d64..55a16ea560d3 100644
--- a/tests/forms_tests/tests/test_forms.py
+++ b/tests/forms_tests/tests/test_forms.py
@@ -5354,7 +5354,7 @@ class MyForm(Form):
         f = MyForm()
         self.assertHTMLEqual(
             f.render(),
-            '<div><label for=""id_first_name"">First name:</label><p>Custom Field<p>'
+            '<div><label for=""id_first_name"">First name:</label><p>Custom Field</p>'
             '<input type=""text"" name=""first_name"" required id=""id_first_name""></div>',
         )
 
@@ -5365,7 +5365,7 @@ class MyForm(Form):
         f = MyForm()
         self.assertHTMLEqual(
             f[""first_name""].render(template_name=""forms_tests/custom_field.html""),
-            '<label for=""id_first_name"">First name:</label><p>Custom Field<p>'
+            '<label for=""id_first_name"">First name:</label><p>Custom Field</p>'
             '<input type=""text"" name=""first_name"" required id=""id_first_name"">',
         )
 
@@ -5393,7 +5393,7 @@ class Person(Form):
         html = t.render(Context({""form"": Person()}))
         expected = """"""
         <label for=""id_first_name"">First name:</label>
-        <p>Custom Field<p>
+        <p>Custom Field</p>
         <input type=""text"" name=""first_name"" required id=""id_first_name"">
         """"""
         self.assertHTMLEqual(html, expected)
diff --git a/tests/view_tests/templates/jsi18n-multi-catalogs.html b/tests/view_tests/templates/jsi18n-multi-catalogs.html
index 11b84d0bfabe..b7466e47136f 100644
--- a/tests/view_tests/templates/jsi18n-multi-catalogs.html
+++ b/tests/view_tests/templates/jsi18n-multi-catalogs.html
@@ -2,6 +2,7 @@
 <head>
   <script src=""/jsi18n/app1/""></script>
   <script src=""/jsi18n/app2/""></script>
+</head>
 <body>
   <p id=""app1string"">
     <script>
","#### Trac ticket number
N/A
#### Branch description
I'm in the process of writing a django template formatter and was doing some testing on Django, found a few templates in tests folders with invalid html syntax's that this PR fixes.

I've ran `./runtests.py` locally to test this change.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19367,"diff --git a/tests/gis_tests/gdal_tests/test_geom.py b/tests/gis_tests/gdal_tests/test_geom.py
index a296af75f934..919e54751102 100644
--- a/tests/gis_tests/gdal_tests/test_geom.py
+++ b/tests/gis_tests/gdal_tests/test_geom.py
@@ -1,6 +1,5 @@
 import json
 import pickle
-from unittest import mock, skipIf
 
 from django.contrib.gis.gdal import (
     CoordTransform,
@@ -11,7 +10,6 @@
 )
 from django.contrib.gis.gdal.geometries import CircularString, CurvePolygon
 from django.contrib.gis.geos import GEOSException
-from django.contrib.gis.geos.libgeos import geos_version_tuple
 from django.template import Context
 from django.template.engine import Engine
 from django.test import SimpleTestCase
@@ -873,19 +871,12 @@ def test_point_m_dimension_types(self):
         self.assertEqual(geom.geom_type.name, ""PointM"")
         self.assertEqual(geom.geom_type.num, 2001)
 
-    @skipIf(geos_version_tuple() < (3, 12), ""GEOS >= 3.12.0 is required"")
     def test_point_m_dimension_geos(self):
-        geo_zm = OGRGeometry(""POINT ZM (1 2 3 4)"")
-        self.assertEqual(geo_zm.geos.wkt, ""POINT ZM (1 2 3 4)"")
-        geo_m = OGRGeometry(""POINT M (1 2 3)"")
-        self.assertEqual(geo_m.geos.wkt, ""POINT M (1 2 3)"")
-
-    @mock.patch(""django.contrib.gis.geos.libgeos.geos_version"", lambda: b""3.11.0"")
-    def test_point_m_dimension_geos_version(self):
-        geo_zm = OGRGeometry(""POINT ZM (1 2 3 4)"")
-        self.assertEqual(geo_zm.geos.wkt, ""POINT Z (1 2 3)"")
-        geo_m = OGRGeometry(""POINT M (1 2 3)"")
-        self.assertEqual(geo_m.geos.wkt, ""POINT (1 2)"")
+        """"""GEOSGeometry does not yet support the M dimension.""""""
+        geom = OGRGeometry(""POINT ZM (1 2 3 4)"")
+        self.assertEqual(geom.geos.wkt, ""POINT Z (1 2 3)"")
+        geom = OGRGeometry(""POINT M (1 2 3)"")
+        self.assertEqual(geom.geos.wkt, ""POINT (1 2)"")
 
     def test_centroid(self):
         point = OGRGeometry(""POINT (1 2 3)"")
diff --git a/tests/gis_tests/geos_tests/test_geos.py b/tests/gis_tests/geos_tests/test_geos.py
index 018eccae4a1d..724555560b9c 100644
--- a/tests/gis_tests/geos_tests/test_geos.py
+++ b/tests/gis_tests/geos_tests/test_geos.py
@@ -86,22 +86,6 @@ def test_hexewkb(self):
         # Redundant sanity check.
         self.assertEqual(4326, GEOSGeometry(hexewkb_2d).srid)
 
-    @skipIf(geos_version_tuple() < (3, 12), ""GEOS >= 3.12.0 is required"")
-    def test_4d_hexewkb(self):
-        ogc_hex_4d = (
-            b""01010000C00000000000000000000000000000""
-            b""F03F00000000000000400000000000000000""
-        )
-        hexewkb_4d = (
-            b""01010000E0E61000000000000000000000000000000000""
-            b""F03F00000000000000400000000000000000""
-        )
-        pnt_4d = Point(0, 1, 2, 0, srid=4326)
-        self.assertEqual(ogc_hex_4d, pnt_4d.hex)
-        self.assertEqual(hexewkb_4d, pnt_4d.hexewkb)
-        self.assertIs(GEOSGeometry(hexewkb_4d).hasm, True)
-        self.assertEqual(memoryview(a2b_hex(hexewkb_4d)), pnt_4d.ewkb)
-
     def test_kml(self):
         ""Testing KML output.""
         for tg in self.geometries.wkt_out:
@@ -1285,12 +1269,6 @@ def test_gdal(self):
         self.assertEqual(g2.hex, g2.ogr.hex)
         self.assertEqual(""WGS 84"", g2.srs.name)
 
-    @skipIf(geos_version_tuple() < (3, 12), ""GEOS >= 3.12.0 is required"")
-    def test_gdal_4d(self):
-        g1_4d = fromstr(""POINT(5 23 8 0)"")
-        self.assertIsInstance(g1_4d.ogr, gdal.OGRGeometry)
-        self.assertEqual(g1_4d.ogr.m, 0)
-
     def test_copy(self):
         ""Testing use with the Python `copy` module.""
         import copy
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36036

#### Branch description
When working on https://github.com/django/django/pull/19023/ tests that were meant for https://github.com/django/django/pull/19013 were included. This removes the tests that needed more than exposing `GEOSHasM` to be able to pass.

#### Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18284,"diff --git a/django/core/validators.py b/django/core/validators.py
index b1c5c053b846..f8405b442a27 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -401,7 +401,7 @@ class BaseValidator:
 
     def __init__(self, limit_value, message=None):
         self.limit_value = limit_value
-        if message:
+        if message is not None:
             self.message = message
 
     def __call__(self, value):
","Fix unnecessary lazy evaluation in BaseValidator

# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-N/A

# Branch description
if you run this:

```python
from django.utils.translation import gettext_lazy
from django.core.validators import MinValidator

MinValidator(0, message=gettext_lazy('hi'))
```

This will raise:

```
django.core.exceptions.AppRegistryNotReady: The translation infrastructure cannot be initialized before the apps registry is ready. Check that you don't make non-lazy gettext calls at import time.
```

And the problem is this line because it tries to evaluate message instead of checking if it is None. This PR will solve this issue

# Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18312,"diff --git a/django/test/testcases.py b/django/test/testcases.py
index f1c6b5ae9c54..5cd90a7415db 100644
--- a/django/test/testcases.py
+++ b/django/test/testcases.py
@@ -7,7 +7,7 @@
 import threading
 import unittest
 from collections import Counter
-from contextlib import contextmanager
+from contextlib import contextmanager, suppress
 from copy import copy, deepcopy
 from difflib import get_close_matches
 from functools import wraps
@@ -1125,6 +1125,11 @@ def _pre_setup(self):
         try:
             self._fixture_setup()
         except Exception:
+            # Attempt to teardown fixtures on exception during setup as
+            # `_post_teardown` won't be triggered to cleanup state when an
+            # an exception is surfaced to `SimpleTestCase._pre_setup`.
+            with suppress(Exception):
+                self._fixture_teardown()
             if self.available_apps is not None:
                 apps.unset_available_apps()
                 setting_changed.send(
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35548

# Branch description


# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,17782,"diff --git a/LICENSE.python b/LICENSE.python
index a25ce5cf7b97..9f995bf7bf0b 100644
--- a/LICENSE.python
+++ b/LICENSE.python
@@ -13,12 +13,12 @@ A. HISTORY OF THE SOFTWARE
 ==========================
 
 Python was created in the early 1990s by Guido van Rossum at Stichting
-Mathematisch Centrum (CWI, see http://www.cwi.nl) in the Netherlands
+Mathematisch Centrum (CWI, see https://www.cwi.nl) in the Netherlands
 as a successor of a language called ABC.  Guido remains Python's
 principal author, although it includes many contributions from others.
 
 In 1995, Guido continued his work on Python at the Corporation for
-National Research Initiatives (CNRI, see http://www.cnri.reston.va.us)
+National Research Initiatives (CNRI, see https://www.cnri.reston.va.us)
 in Reston, Virginia where he released several versions of the
 software.
 
@@ -30,7 +30,7 @@ https://www.python.org/psf/) was formed, a non-profit organization
 created specifically to own Python-related Intellectual Property.
 Zope Corporation was a sponsoring member of the PSF.
 
-All Python releases are Open Source (see http://www.opensource.org for
+All Python releases are Open Source (see https://opensource.org for
 the Open Source Definition).  Historically, most, but not all, Python
 releases have also been GPL-compatible; the table below summarizes
 the various releases.
@@ -94,10 +94,8 @@ grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
 analyze, test, perform and/or display publicly, prepare derivative works,
 distribute, and otherwise use Python alone or in any derivative version,
 provided, however, that PSF's License Agreement and PSF's notice of copyright,
-i.e., ""Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
-2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 Python Software Foundation;
-All Rights Reserved"" are retained in Python alone or in any derivative version
-prepared by Licensee.
+i.e., ""Copyright (c) 2001-2024 Python Software Foundation; All Rights Reserved""
+are retained in Python alone or in any derivative version prepared by Licensee.
 
 3. In the event Licensee prepares a derivative work that is based on
 or incorporates Python or any part thereof, and wants to make
","This includes changes from the following commits:

- Synchronize links in other copies of HISTORY OF THE SOFTWARE https://github.com/python/cpython/commit/ea4be278fa6123d1f78c1fd556d79b311cd59f96

- Update copyright years to 2023. https://github.com/python/cpython/commit/11f99323c2ae0ec428c370a335695e3d8d4afc1d

- Update copyright years to 2024. https://github.com/python/cpython/commit/c86571e4c9765a88ba05a7d9b874b40af0e1d6ab"
django/django,18101,"diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index 770f88265c6f..a3e87f6ed45e 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -140,7 +140,8 @@ def _check_content_type_field(self):
             else:
                 return []
 
-    def get_cache_name(self):
+    @cached_property
+    def cache_name(self):
         return self.name
 
     def get_content_type(self, obj=None, id=None, using=None, model=None):
diff --git a/django/db/models/fields/mixins.py b/django/db/models/fields/mixins.py
index e7f282210e93..9f2809dfc8ad 100644
--- a/django/db/models/fields/mixins.py
+++ b/django/db/models/fields/mixins.py
@@ -1,31 +1,52 @@
+import warnings
+
 from django.core import checks
+from django.utils.deprecation import RemovedInDjango60Warning
+from django.utils.functional import cached_property
 
 NOT_PROVIDED = object()
 
 
 class FieldCacheMixin:
-    """"""Provide an API for working with the model's fields value cache.""""""
+    """"""
+    An API for working with the model's fields value cache.
+
+    Subclasses must set self.cache_name to a unique entry for the cache -
+    typically the field’s name.
+    """"""
 
+    # RemovedInDjango60Warning.
     def get_cache_name(self):
         raise NotImplementedError
 
-    def get_cached_value(self, instance, default=NOT_PROVIDED):
+    @cached_property
+    def cache_name(self):
+        # RemovedInDjango60Warning: when the deprecation ends, replace with:
+        # raise NotImplementedError
         cache_name = self.get_cache_name()
+        warnings.warn(
+            f""Override {self.__class__.__qualname__}.cache_name instead of ""
+            ""get_cache_name()."",
+            RemovedInDjango60Warning,
+        )
+        return cache_name
+
+    def get_cached_value(self, instance, default=NOT_PROVIDED):
         try:
-            return instance._state.fields_cache[cache_name]
+            return instance._state.fields_cache[self.cache_name]
         except KeyError:
             if default is NOT_PROVIDED:
                 raise
             return default
 
     def is_cached(self, instance):
-        return self.get_cache_name() in instance._state.fields_cache
+        return self.cache_name in instance._state.fields_cache
 
     def set_cached_value(self, instance, value):
-        instance._state.fields_cache[self.get_cache_name()] = value
+        instance._state.fields_cache[self.cache_name] = value
 
     def delete_cached_value(self, instance):
-        del instance._state.fields_cache[self.get_cache_name()]
+        del instance._state.fields_cache[self.cache_name]
 
 
 class CheckFieldDefaultMixin:
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 3e4bfe34c1b1..7d42d1ea38a1 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -509,7 +509,8 @@ def target_field(self):
             )
         return target_fields[0]
 
-    def get_cache_name(self):
+    @cached_property
+    def cache_name(self):
         return self.name
 
 
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index c7848ee63a3e..bc288c47ecec 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -210,7 +210,7 @@ def get_prefetch_querysets(self, instances, querysets=None):
             rel_obj_attr,
             instance_attr,
             True,
-            self.field.get_cache_name(),
+            self.field.cache_name,
             False,
         )
 
@@ -486,7 +486,7 @@ def get_prefetch_querysets(self, instances, querysets=None):
             rel_obj_attr,
             instance_attr,
             True,
-            self.related.get_cache_name(),
+            self.related.cache_name,
             False,
         )
 
@@ -744,7 +744,7 @@ def _apply_rel_filters(self, queryset):
         def _remove_prefetched_objects(self):
             try:
                 self.instance._prefetched_objects_cache.pop(
-                    self.field.remote_field.get_cache_name()
+                    self.field.remote_field.cache_name
                 )
             except (AttributeError, KeyError):
                 pass  # nothing to clear from cache
@@ -760,7 +760,7 @@ def get_queryset(self):
                 )
             try:
                 return self.instance._prefetched_objects_cache[
-                    self.field.remote_field.get_cache_name()
+                    self.field.remote_field.cache_name
                 ]
             except (AttributeError, KeyError):
                 queryset = super().get_queryset()
@@ -798,7 +798,7 @@ def get_prefetch_querysets(self, instances, querysets=None):
                 if not self.field.is_cached(rel_obj):
                     instance = instances_dict[rel_obj_attr(rel_obj)]
                     setattr(rel_obj, self.field.name, instance)
-            cache_name = self.field.remote_field.get_cache_name()
+            cache_name = self.field.remote_field.cache_name
             return queryset, rel_obj_attr, instance_attr, False, cache_name, False
 
         def add(self, *objs, bulk=True):
diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index c9f9232ff73c..a39bfd07daaa 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -248,7 +248,8 @@ def get_path_info(self, filtered_relation=None):
     def path_infos(self):
         return self.get_path_info()
 
-    def get_cache_name(self):
+    @cached_property
+    def cache_name(self):
         """"""
         Return the name of the cache key to use for storing an instance of the
         forward model on the reverse model.
diff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt
index 4f89481ac7a9..1a74a2a46bbb 100644
--- a/docs/internals/deprecation.txt
+++ b/docs/internals/deprecation.txt
@@ -82,6 +82,8 @@ details on these changes.
 * The ``OS_OPEN_FLAGS`` attribute of
   :class:`~django.core.files.storage.FileSystemStorage` will be removed.
 
+* The ``get_cache_name()`` method of ``FieldCacheMixin`` will be removed.
+
 .. _deprecation-removed-in-5.1:
 
 5.1
diff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt
index 388487b32247..bb5e4f3fe415 100644
--- a/docs/releases/5.1.txt
+++ b/docs/releases/5.1.txt
@@ -474,6 +474,8 @@ Miscellaneous
   overwriting files in storage, set the new
   :attr:`~django.core.files.storage.FileSystemStorage.allow_overwrite` option
   to ``True`` instead.
+* The ``get_cache_name()`` method of ``FieldCacheMixin`` is deprecated in favor
+  of the ``cache_name`` cached property.
 
 Features removed in 5.1
 =======================
diff --git a/tests/model_fields/test_mixins.py b/tests/model_fields/test_mixins.py
new file mode 100644
index 000000000000..5ccfac4d7899
--- /dev/null
+++ b/tests/model_fields/test_mixins.py
@@ -0,0 +1,75 @@
+from django.db.models.fields.mixins import FieldCacheMixin
+from django.test import SimpleTestCase
+from django.utils.deprecation import RemovedInDjango60Warning
+from django.utils.functional import cached_property
+
+from .models import Foo
+
+
+# RemovedInDjango60Warning.
+class ExampleOld(FieldCacheMixin):
+    def get_cache_name(self):
+        return ""example""
+
+
+class Example(FieldCacheMixin):
+    @cached_property
+    def cache_name(self):
+        return ""example""
+
+
+class FieldCacheMixinTests(SimpleTestCase):
+    def setUp(self):
+        self.instance = Foo()
+        self.field = Example()
+
+    # RemovedInDjango60Warning: when the deprecation ends, replace with:
+    # def test_cache_name_not_implemented(self):
+    #   with self.assertRaises(NotImplementedError):
+    #       FieldCacheMixin().cache_name
+    def test_get_cache_name_not_implemented(self):
+        with self.assertRaises(NotImplementedError):
+            FieldCacheMixin().get_cache_name()
+
+    # RemovedInDjango60Warning.
+    def test_get_cache_name_deprecated(self):
+        msg = ""Override ExampleOld.cache_name instead of get_cache_name().""
+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):
+            result = ExampleOld().cache_name
+        self.assertEqual(result, ""example"")
+
+    def test_cache_name(self):
+        result = Example().cache_name
+        self.assertEqual(result, ""example"")
+
+    def test_get_cached_value_missing(self):
+        with self.assertRaises(KeyError):
+            self.field.get_cached_value(self.instance)
+
+    def test_get_cached_value_default(self):
+        default = object()
+        result = self.field.get_cached_value(self.instance, default=default)
+        self.assertIs(result, default)
+
+    def test_get_cached_value_after_set(self):
+        value = object()
+
+        self.field.set_cached_value(self.instance, value)
+        result = self.field.get_cached_value(self.instance)
+
+        self.assertIs(result, value)
+
+    def test_is_cached_false(self):
+        result = self.field.is_cached(self.instance)
+        self.assertFalse(result)
+
+    def test_is_cached_true(self):
+        self.field.set_cached_value(self.instance, 1)
+        result = self.field.is_cached(self.instance)
+        self.assertTrue(result)
+
+    def test_delete_cached_value(self):
+        self.field.set_cached_value(self.instance, 1)
+        self.field.delete_cached_value(self.instance)
+        result = self.field.is_cached(self.instance)
+        self.assertFalse(result)
","# Trac ticket number

ticket-35405

# Branch description

Optimization as described on ticket.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19269,"diff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py
index a0b5e4154e82..24399a58856d 100644
--- a/django/db/backends/postgresql/base.py
+++ b/django/db/backends/postgresql/base.py
@@ -268,20 +268,12 @@ def get_connection_params(self):
 
         conn_params.pop(""assume_role"", None)
         conn_params.pop(""isolation_level"", None)
+        conn_params.pop(""server_side_binding"", None)
 
         pool_options = conn_params.pop(""pool"", None)
         if pool_options and not is_psycopg3:
             raise ImproperlyConfigured(""Database pooling requires psycopg >= 3"")
 
-        server_side_binding = conn_params.pop(""server_side_binding"", None)
-        conn_params.setdefault(
-            ""cursor_factory"",
-            (
-                ServerBindingCursor
-                if is_psycopg3 and server_side_binding is True
-                else Cursor
-            ),
-        )
         if settings_dict[""USER""]:
             conn_params[""user""] = settings_dict[""USER""]
         if settings_dict[""PASSWORD""]:
@@ -296,9 +288,8 @@ def get_connection_params(self):
             )
             # Disable prepared statements by default to keep connection poolers
             # working. Can be reenabled via OPTIONS in the settings dict.
-            conn_params[""prepare_threshold""] = conn_params.pop(
-                ""prepare_threshold"", None
-            )
+            if ""prepare_threshold"" not in conn_params:
+                conn_params[""prepare_threshold""] = None
         return conn_params
 
     @async_unsafe
@@ -405,28 +396,20 @@ def init_connection_state(self):
 
     @async_unsafe
     def create_cursor(self, name=None):
+        ssb = self.settings_dict[""OPTIONS""].get(""server_side_binding"")
+        cursor_factory = self.settings_dict[""OPTIONS""].get(""cursor_factory"")
+
         if name:
-            if is_psycopg3 and (
-                self.settings_dict[""OPTIONS""].get(""server_side_binding"") is not True
-            ):
-                # psycopg >= 3 forces the usage of server-side bindings for
-                # named cursors so a specialized class that implements
-                # server-side cursors while performing client-side bindings
-                # must be used if `server_side_binding` is disabled (default).
-                cursor = ServerSideCursor(
-                    self.connection,
-                    name=name,
-                    scrollable=False,
-                    withhold=self.connection.autocommit,
-                )
-            else:
-                # In autocommit mode, the cursor will be used outside of a
-                # transaction, hence use a holdable cursor.
-                cursor = self.connection.cursor(
-                    name, scrollable=False, withhold=self.connection.autocommit
-                )
+            # In autocommit mode, the cursor will be used outside of a
+            # transaction, hence use a holdable cursor.
+            cursor = _server_cursor_factory(ssb, cursor_factory)(
+                self.connection,
+                name=name,
+                scrollable=False,
+                withhold=self.connection.autocommit,
+            )
         else:
-            cursor = self.connection.cursor()
+            cursor = _cursor_factory(ssb, cursor_factory)(self.connection)
 
         if is_psycopg3:
             # Register the cursor timezone only if the connection disagrees, to
@@ -571,15 +554,32 @@ def callproc(self, name, args=None):
             return args
 
     class ServerBindingCursor(CursorMixin, Database.Cursor):
-        pass
+        """"""
+        Cursor that performs server-side parameter binding.
+
+        This is the default in psycopg3.
+        """"""
 
     class Cursor(CursorMixin, Database.ClientCursor):
-        pass
+        """"""
+        Cursor that performs client-side parameter binding.
 
-    class ServerSideCursor(
-        CursorMixin, Database.client_cursor.ClientCursorMixin, Database.ServerCursor
-    ):
+        This is the default in Django.
         """"""
+
+    class ServerCursor(CursorMixin, Database.ServerCursor):
+        """"""
+        Cursor that performs server-side parameter binding and uses
+        server side cursors.
+
+        This is the default for named cursors in psycopg3.
+        """"""
+
+    class ServerSideCursor(Database.client_cursor.ClientCursorMixin, ServerCursor):
+        """"""
+        Cursor that performs client-side parameter binding and uses
+        server side cursors.
+
         psycopg >= 3 forces the usage of server-side bindings when using named
         cursors but the ORM doesn't yet support the systematic generation of
         prepareable SQL (#20516).
@@ -591,8 +591,18 @@ class ServerSideCursor(
         Mixing ClientCursorMixin in wouldn't be necessary if Cursor allowed to
         specify how parameters should be bound instead, which ServerCursor
         would inherit, but that's not the case.
+
+        This is the default for named cursors in Django.
         """"""
 
+    def _cursor_factory(server_side_binding, cursor_factory):
+        if cursor_factory:
+            return cursor_factory
+        return ServerBindingCursor if server_side_binding else Cursor
+
+    def _server_cursor_factory(server_side_binding, cursor_factory):
+        return ServerCursor if server_side_binding else ServerSideCursor
+
     class CursorDebugWrapper(BaseCursorDebugWrapper):
         def copy(self, statement):
             with self.debug_sql(statement):
@@ -601,6 +611,11 @@ def copy(self, statement):
 else:
     Cursor = psycopg2.extensions.cursor
 
+    def _cursor_factory(server_side_binding, cursor_factory):
+        return cursor_factory or Cursor
+
+    _server_cursor_factory = _cursor_factory
+
     class CursorDebugWrapper(BaseCursorDebugWrapper):
         def copy_expert(self, sql, file, *args):
             with self.debug_sql(sql):
",Solely a cleanup to make the code more readable. Also documents what the individual cursors do so I don't always have to look it up in the respective psycopg3 sources :)
django/django,19299,"diff --git a/docs/ref/contrib/gis/tutorial.txt b/docs/ref/contrib/gis/tutorial.txt
index b051a57a0f3f..17635d2e24b8 100644
--- a/docs/ref/contrib/gis/tutorial.txt
+++ b/docs/ref/contrib/gis/tutorial.txt
@@ -158,22 +158,34 @@ and use the ``-so`` option to get only the important summary information:
           using driver `ESRI Shapefile' successful.
 
     Layer name: TM_WORLD_BORDERS-0.3
+    Metadata:
+      DBF_DATE_LAST_UPDATE=2008-07-30
     Geometry: Polygon
     Feature Count: 246
     Extent: (-180.000000, -90.000000) - (180.000000, 83.623596)
     Layer SRS WKT:
-    GEOGCS[""GCS_WGS_1984"",
-        DATUM[""WGS_1984"",
-            SPHEROID[""WGS_1984"",6378137.0,298.257223563]],
-        PRIMEM[""Greenwich"",0.0],
-        UNIT[""Degree"",0.0174532925199433]]
+    GEOGCRS[""WGS 84"",
+        DATUM[""World Geodetic System 1984"",
+            ELLIPSOID[""WGS 84"",6378137,298.257223563,
+                LENGTHUNIT[""metre"",1]]],
+        PRIMEM[""Greenwich"",0,
+            ANGLEUNIT[""degree"",0.0174532925199433]],
+        CS[ellipsoidal,2],
+            AXIS[""latitude"",north,
+                ORDER[1],
+                ANGLEUNIT[""degree"",0.0174532925199433]],
+            AXIS[""longitude"",east,
+                ORDER[2],
+                ANGLEUNIT[""degree"",0.0174532925199433]],
+        ID[""EPSG"",4326]]
+    Data axis to CRS axis mapping: 2,1
     FIPS: String (2.0)
     ISO2: String (2.0)
     ISO3: String (3.0)
     UN: Integer (3.0)
     NAME: String (50.0)
     AREA: Integer (7.0)
-    POP2005: Integer (10.0)
+    POP2005: Integer64 (10.0)
     REGION: Integer (3.0)
     SUBREGION: Integer (3.0)
     LON: Real (8.3)
","#### Trac ticket number
N/A

#### Branch description
This commit updates only the output of the `ogrinfo` command in the GIS tutorial. Since the paragraph explaining parts of the output is still valid, no additional updates were made to this section of the tutorial.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,9281,"diff --git a/django/utils/timezone.py b/django/utils/timezone.py
index 7586fef75038..deabab51760c 100644
--- a/django/utils/timezone.py
+++ b/django/utils/timezone.py
@@ -58,7 +58,7 @@ def dst(self, dt):
 def get_fixed_timezone(offset):
     """"""Return a tzinfo instance with a fixed offset from UTC.""""""
     if isinstance(offset, timedelta):
-        offset = offset.seconds // 60
+        offset = offset.total_seconds() // 60
     sign = '-' if offset < 0 else '+'
     hhmm = '%02d%02d' % divmod(abs(offset), 60)
     name = sign + hhmm
diff --git a/tests/utils_tests/test_timezone.py b/tests/utils_tests/test_timezone.py
index 3c0b092d8ab1..32906f8b8860 100644
--- a/tests/utils_tests/test_timezone.py
+++ b/tests/utils_tests/test_timezone.py
@@ -194,5 +194,9 @@ def test_fixedoffset_timedelta(self):
         delta = datetime.timedelta(hours=1)
         self.assertEqual(timezone.get_fixed_timezone(delta).utcoffset(''), delta)
 
+    def test_fixedoffset_negative_timedelta(self):
+        delta = datetime.timedelta(hours=-2)
+        self.assertEqual(timezone.get_fixed_timezone(delta).utcoffset(''), delta)
+
     def test_fixedoffset_pickle(self):
         self.assertEqual(pickle.loads(pickle.dumps(timezone.FixedOffset(0, 'tzname'))).tzname(''), 'tzname')
","(Fix requires Python 3.2+ or 2.7+; should be suitable 
for any Django version as far back as 1.8.)"
django/django,19200,"diff --git a/django/forms/models.py b/django/forms/models.py
index be59dbe4a0a5..d220e3c90ff9 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1562,7 +1562,12 @@ def to_python(self, value):
             if isinstance(value, self.queryset.model):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
-        except (ValueError, TypeError, self.queryset.model.DoesNotExist):
+        except (
+            ValueError,
+            TypeError,
+            self.queryset.model.DoesNotExist,
+            ValidationError,
+        ):
             raise ValidationError(
                 self.error_messages[""invalid_choice""],
                 code=""invalid_choice"",
@@ -1640,7 +1645,7 @@ def _check_values(self, value):
             self.validate_no_null_characters(pk)
             try:
                 self.queryset.filter(**{key: pk})
-            except (ValueError, TypeError):
+            except (ValueError, TypeError, ValidationError):
                 raise ValidationError(
                     self.error_messages[""invalid_pk_value""],
                     code=""invalid_pk_value"",
diff --git a/tests/model_forms/test_uuid.py b/tests/model_forms/test_uuid.py
index 583b3fea9487..b60ec9308654 100644
--- a/tests/model_forms/test_uuid.py
+++ b/tests/model_forms/test_uuid.py
@@ -30,6 +30,15 @@ def test_update_save_error(self):
     def test_model_multiple_choice_field_uuid_pk(self):
         f = forms.ModelMultipleChoiceField(UUIDPK.objects.all())
         with self.assertRaisesMessage(
-            ValidationError, ""“invalid_uuid” is not a valid UUID.""
+            ValidationError, ""“invalid_uuid” is not a valid value.""
         ):
             f.clean([""invalid_uuid""])
+
+    def test_model_choice_invalid_pk_value_error_messages(self):
+        f = forms.ModelChoiceField(UUIDPK.objects.all())
+        with self.assertRaisesMessage(
+            ValidationError,
+            ""['Select a valid choice. ""
+            ""That choice is not one of the available choices.']"",
+        ):
+            f.clean(""invalid"")
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36201

#### Branch description
@sarahboyce Thank you for providing the test code for this ticket.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19416,"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index cf9243ccf0bc..da1266b605d4 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -923,13 +923,8 @@ def alter_field(self, model, old_field, new_field, strict=False):
     def _field_db_check(self, field, field_db_params):
         # Always check constraints with the same mocked column name to avoid
         # recreating constrains when the column is renamed.
-        check_constraints = self.connection.data_type_check_constraints
-        data = field.db_type_parameters(self.connection)
-        data[""column""] = ""__column_name__""
-        try:
-            return check_constraints[field.get_internal_type()] % data
-        except KeyError:
-            return None
+        overrides = {""column"": ""__column_name__""}
+        return field.db_check(self.connection, **overrides)
 
     def _alter_field(
         self,
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 69289627f0ec..9ab26d3515c0 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -840,13 +840,15 @@ def clean(self, value, model_instance):
     def db_type_parameters(self, connection):
         return DictWrapper(self.__dict__, connection.ops.quote_name, ""qn_"")
 
-    def db_check(self, connection):
+    def db_check(self, connection, **overrides):
         """"""
         Return the database column check constraint for this field, for the
         provided connection. Works the same way as db_type() for the case that
         get_internal_type() does not map to a preexisting model field.
+        Any keyword arguments provided will override the ones received from
+        db_type_parameters() and used for formatting the constraint's SQL string.
         """"""
-        data = self.db_type_parameters(connection)
+        data = self.db_type_parameters(connection) | overrides
         try:
             return (
                 connection.data_type_check_constraints[self.get_internal_type()] % data
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index bad71a5fd630..5b4d43cec3f6 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1215,7 +1215,7 @@ def formfield(self, *, using=None, **kwargs):
             }
         )
 
-    def db_check(self, connection):
+    def db_check(self, connection, **overrides):
         return None
 
     def db_type(self, connection):
@@ -2052,7 +2052,7 @@ def formfield(self, *, using=None, **kwargs):
             defaults[""initial""] = [i.pk for i in initial]
         return super().formfield(**defaults)
 
-    def db_check(self, connection):
+    def db_check(self, connection, **overrides):
         return None
 
     def db_type(self, connection):
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index dbed4b709d63..d7d9f9b2428a 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -65,6 +65,7 @@
     Upper,
 )
 from django.db.models.indexes import IndexExpression
+from django.db.models.lookups import In as InLookup
 from django.db.transaction import TransactionManagementError, atomic
 from django.test import TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature
 from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup
@@ -2476,6 +2477,57 @@ class Meta:
         ]
         self.assertEqual(len(check_constraints), 1)
 
+    @skipUnlessDBFeature(
+        ""supports_column_check_constraints"", ""can_introspect_check_constraints""
+    )
+    @isolate_apps(""schema"")
+    def test_field_custom_constraint_detected_in_alter_field(self):
+        class CharChoiceField(CharField):
+            """"""
+            A custom CharField that automatically creates a db constraint to guarante
+            that the stored value respects the field's `choices`.
+            """"""
+
+            @property
+            def non_db_attrs(self):
+                # Remove `choices` from non_db_attrs so that migrations that only change
+                # choices still trigger a db operation and drop/create the constraint.
+                attrs = super().non_db_attrs
+                return tuple({*attrs} - {""choices""})
+
+            def db_check(self, connection, **overrides):
+                if not self.choices:
+                    return None
+                data = self.db_type_parameters(connection) | overrides
+                constraint = CheckConstraint(
+                    condition=InLookup(F(data[""column""]), dict(self.choices)),
+                    name="""",  # doesn't matter, Django will reassign one anyway
+                )
+                with connection.schema_editor() as schema_editor:
+                    return constraint._get_check_sql(self.model, schema_editor)
+
+        class ModelWithCustomField(Model):
+            f = CharChoiceField(choices=[])
+
+            class Meta:
+                app_label = ""schema""
+
+        self.isolated_local_models = [ModelWithCustomField]
+        with connection.schema_editor() as editor:
+            editor.create_model(ModelWithCustomField)
+
+        constraints = self.get_constraints_for_column(ModelWithCustomField, ""f"")
+        self.assertEqual(len(constraints), 0)
+
+        old_field = ModelWithCustomField._meta.get_field(""f"")
+        new_field = CharChoiceField(choices=[(""a"", ""a"")])
+        new_field.contribute_to_class(ModelWithCustomField, ""f"")
+        with connection.schema_editor() as editor:
+            editor.alter_field(ModelWithCustomField, old_field, new_field, strict=True)
+
+        constraints = self.get_constraints_for_column(ModelWithCustomField, ""f"")
+        self.assertEqual(len(constraints), 1)
+
     def _test_m2m_create(self, M2MFieldClass):
         """"""
         Tests M2M fields on models during creation
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36350

#### Branch description
This PR changes the logic in BaseDatabaseSchemaEditor._field_db_check() to make use of Field.db_check() instead of looking up constraints in connection.data_type_check_constraints. This re-enable custom fields being able to manage their own constraints.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18379,"diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml
index 18a3b7f08311..17e0b9583e4a 100644
--- a/.github/workflows/tests.yml
+++ b/.github/workflows/tests.yml
@@ -18,12 +18,24 @@ permissions:
   contents: read
 
 jobs:
+  matrix_prep:
+    runs-on: ubuntu-latest
+    outputs:
+      python_versions_output: ${{ steps.set-matrix.outputs.python_versions }}
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v4
+      - id: set-matrix
+        run: |
+          python_versions=$(sed -n ""s/^.*Programming Language :: Python :: \([[:digit:]]\+\.[[:digit:]]\+\).*$/'\1', /p"" setup.cfg | tr -d '\n' | sed 's/, $//g')
+          echo ""Supported Python versions: $python_versions""
+          echo ""python_versions=[$python_versions]"" >> ""$GITHUB_OUTPUT""
   windows:
     runs-on: windows-latest
+    needs: matrix_prep
     strategy:
       matrix:
-        python-version:
-          - '3.12'
+        python-version: ${{ fromJson(needs.matrix_prep.outputs.python_versions_output) }}
     name: Windows, SQLite, Python ${{ matrix.python-version }}
     steps:
       - name: Checkout
","Backport of 4420500aab437a59f545d7d5ebffb3b2cf370d72 from main.
"
numpy/numpy,29145,"diff --git a/numpy/lib/__init__.pyi b/numpy/lib/__init__.pyi
index 8532ef8d9fb9..6185a494d035 100644
--- a/numpy/lib/__init__.pyi
+++ b/numpy/lib/__init__.pyi
@@ -1,15 +1,30 @@
 from numpy._core.function_base import add_newdoc
 from numpy._core.multiarray import add_docstring, tracemalloc_domain
 
-from . import (  # noqa: F401
-    array_utils,
-    format,
-    introspect,
-    mixins,
-    npyio,
-    scimath,
-    stride_tricks,
-)
+# all submodules of `lib` are accessible at runtime through `__getattr__`,
+# so we implicitly re-export them here
+from . import _array_utils_impl as _array_utils_impl
+from . import _arraypad_impl as _arraypad_impl
+from . import _arraysetops_impl as _arraysetops_impl
+from . import _arrayterator_impl as _arrayterator_impl
+from . import _datasource as _datasource
+from . import _format_impl as _format_impl
+from . import _function_base_impl as _function_base_impl
+from . import _histograms_impl as _histograms_impl
+from . import _index_tricks_impl as _index_tricks_impl
+from . import _iotools as _iotools
+from . import _nanfunctions_impl as _nanfunctions_impl
+from . import _npyio_impl as _npyio_impl
+from . import _polynomial_impl as _polynomial_impl
+from . import _scimath_impl as _scimath_impl
+from . import _shape_base_impl as _shape_base_impl
+from . import _stride_tricks_impl as _stride_tricks_impl
+from . import _twodim_base_impl as _twodim_base_impl
+from . import _type_check_impl as _type_check_impl
+from . import _ufunclike_impl as _ufunclike_impl
+from . import _utils_impl as _utils_impl
+from . import _version as _version
+from . import array_utils, format, introspect, mixins, npyio, scimath, stride_tricks
 from ._arrayterator_impl import Arrayterator
 from ._version import NumpyVersion
 
@@ -18,6 +33,7 @@ __all__ = [
     ""add_docstring"",
     ""add_newdoc"",
     ""array_utils"",
+    ""format"",
     ""introspect"",
     ""mixins"",
     ""NumpyVersion"",
",Spotted by `stubtest` in numtype.
django/django,18658,"diff --git a/docs/internals/security.txt b/docs/internals/security.txt
index 55300b01e170..6aac9a6b660d 100644
--- a/docs/internals/security.txt
+++ b/docs/internals/security.txt
@@ -38,6 +38,41 @@ action to be taken, you may receive further followup emails.
 
 .. _our public Trac instance: https://code.djangoproject.com/query
 
+.. _security-report-evaluation:
+
+How does Django evaluate a report
+=================================
+
+These are criteria used by the security team when evaluating whether a report
+requires a security release:
+
+* The vulnerability is within a :ref:`supported version <security-support>` of
+  Django.
+
+* The vulnerability applies to a production-grade Django application. This means
+  the following do not require a security release:
+
+  * Exploits that only affect local development, for example when using
+    :djadmin:`runserver`.
+  * Exploits which fail to follow security best practices, such as failure to
+    sanitize user input. For other examples, see our :ref:`security
+    documentation <cross-site-scripting>`.
+  * Exploits in AI generated code that do not adhere to security best practices.
+
+The security team may conclude that the source of the vulnerability is within
+the Python standard library, in which case the reporter will be asked to report
+the vulnerability to the Python core team. For further details see the `Python
+security guidelines <https://www.python.org/dev/security/>`_.
+
+On occasion, a security release may be issued to help resolve a security
+vulnerability within a popular third-party package. These reports should come
+from the package maintainers.
+
+If you are unsure whether your finding meets these criteria, please still report
+it :ref:`privately by emailing security@djangoproject.com
+<reporting-security-issues>`. The security team will review your report and
+recommend the correct course of action.
+
 .. _security-support:
 
 Supported versions
","#### Trac ticket number

ticket-35612

#### Branch description

Adding explicit security reporting guidelines in our docs so we can reply to reports with this as a link.
This is an extension of @OkayJosh 's work in #18451 (who is a co-author - thank you!)

You can read this [here](https://django--18658.org.readthedocs.build/en/18658/internals/security.html#reporting-guidelines)
"
django/django,18390,,"Edit: replaced by https://github.com/django/django/pull/18437

# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35601

# Branch description
Despite seeming functionally identical to standard `text` inputs, `tel` input offers some benefits:
* Mobile browsers may opt to present a custom keypad optimized for entering phone numbers.
* Validation for a specific format can be implemented with the `pattern` attribute
* Browsers that don't support type `tel` fall back to a standard `text` input.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes. (N/A)
"
django/django,7606,"diff --git a/django/db/models/base.py b/django/db/models/base.py
index 33c562138a0a..7c339dda5a54 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -19,7 +19,6 @@
 from django.db.models import signals
 from django.db.models.constants import LOOKUP_SEP
 from django.db.models.deletion import CASCADE, Collector
-from django.db.models.fields import AutoField
 from django.db.models.fields.related import (
     ForeignObjectRel, OneToOneField, lazy_related_operation, resolve_relation,
 )
@@ -899,7 +898,7 @@ def _save_table(self, raw=False, cls=None, force_insert=False,
 
             fields = meta.local_concrete_fields
             if not pk_set:
-                fields = [f for f in fields if not isinstance(f, AutoField)]
+                fields = [f for f in fields if f is not meta.auto_field]
 
             update_pk = bool(meta.has_auto_field and not pk_set)
             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
","Identity comparison is quicker than `isinstance`, plus it avoids coupling between `Model` and `AutoField`."
django/django,18025,"diff --git a/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html b/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html
index 8e4356a95cce..99b20545af93 100644
--- a/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html
+++ b/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html
@@ -1,5 +1,5 @@
 {% load i18n static %}
-<div class=""related-widget-wrapper"" {% if not model_has_limit_choices_to %}data-model-ref=""{{ model }}""{% endif %}>
+<div class=""related-widget-wrapper"" {% if not model_has_limit_choices_to %}data-model-ref=""{{ model_name }}""{% endif %}>
     {{ rendered_widget }}
     {% block links %}
         {% spaceless %}
diff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py
index 216b87671b15..260ff33ca57a 100644
--- a/django/contrib/admin/widgets.py
+++ b/django/contrib/admin/widgets.py
@@ -329,6 +329,7 @@ def get_context(self, name, value, attrs):
             ""name"": name,
             ""url_params"": url_params,
             ""model"": rel_opts.verbose_name,
+            ""model_name"": rel_opts.model_name,
             ""can_add_related"": self.can_add_related,
             ""can_change_related"": self.can_change_related,
             ""can_delete_related"": self.can_delete_related,
diff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py
index c157e7050514..0ea64d594ac5 100644
--- a/tests/admin_views/admin.py
+++ b/tests/admin_views/admin.py
@@ -33,6 +33,8 @@
     Book,
     Bookmark,
     Box,
+    CamelCaseModel,
+    CamelCaseRelatedModel,
     Category,
     Chapter,
     ChapterXtra1,
@@ -1181,6 +1183,10 @@ class SquareAdmin(admin.ModelAdmin):
     readonly_fields = (""area"",)
 
 
+class CamelCaseAdmin(admin.ModelAdmin):
+    filter_horizontal = [""m2m""]
+
+
 site = admin.AdminSite(name=""admin"")
 site.site_url = ""/my-site-url/""
 site.register(Article, ArticleAdmin)
@@ -1305,6 +1311,8 @@ class SquareAdmin(admin.ModelAdmin):
 site.register(Country, CountryAdmin)
 site.register(Traveler, TravelerAdmin)
 site.register(Square, SquareAdmin)
+site.register(CamelCaseModel)
+site.register(CamelCaseRelatedModel, CamelCaseAdmin)
 
 # Register core models we need in our tests
 site.register(User, UserAdmin)
diff --git a/tests/admin_views/models.py b/tests/admin_views/models.py
index 341e5aaed021..812505de828e 100644
--- a/tests/admin_views/models.py
+++ b/tests/admin_views/models.py
@@ -1155,3 +1155,15 @@ class Square(models.Model):
 
     class Meta:
         required_db_features = {""supports_stored_generated_columns""}
+
+
+class CamelCaseModel(models.Model):
+    interesting_name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.interesting_name
+
+
+class CamelCaseRelatedModel(models.Model):
+    m2m = models.ManyToManyField(CamelCaseModel, related_name=""m2m"")
+    fk = models.ForeignKey(CamelCaseModel, on_delete=models.CASCADE, related_name=""fk"")
diff --git a/tests/admin_views/test_related_object_lookups.py b/tests/admin_views/test_related_object_lookups.py
index 145bf0d6deb6..955bebea9eb6 100644
--- a/tests/admin_views/test_related_object_lookups.py
+++ b/tests/admin_views/test_related_object_lookups.py
@@ -76,3 +76,45 @@ def test_related_object_lookup_link_enabled(self):
             with self.subTest(link_id):
                 link = self.selenium.find_element(By.XPATH, f'//*[@id=""{link_id}""]')
                 self.assertIsNone(link.get_attribute(""aria-disabled""))
+
+    def test_related_object_update_with_camel_casing(self):
+        from selenium.webdriver.common.by import By
+
+        def _get_HTML_inside_element_by_id(id_):
+            return self.selenium.find_element(By.ID, id_).get_attribute(""innerHTML"")
+
+        add_url = reverse(""admin:admin_views_camelcaserelatedmodel_add"")
+        self.selenium.get(self.live_server_url + add_url)
+        interesting_name = ""A test name""
+
+        # Add a new CamelCaseModel using the ""+"" icon next to the ""fk"" field.
+        self.selenium.find_element(By.ID, ""add_id_fk"").click()
+
+        # Switch to the add popup window.
+        self.wait_for_and_switch_to_popup()
+
+        # Find the ""interesting_name"" field and enter a value, then save it.
+        self.selenium.find_element(By.ID, ""id_interesting_name"").send_keys(
+            interesting_name
+        )
+        self.selenium.find_element(By.NAME, ""_save"").click()
+
+        # Return to the main window.
+        self.wait_until(lambda d: len(d.window_handles) == 1, 1)
+        self.selenium.switch_to.window(self.selenium.window_handles[0])
+
+        # Check that both the ""Available"" m2m box and the ""Fk"" dropdown now
+        # include the newly added CamelCaseModel instance.
+        self.assertHTMLEqual(
+            self.selenium.find_element(By.ID, ""id_fk""),
+            f""""""
+            <option value="""" selected="""">---------</option>
+            <option value=""1"" selected>{interesting_name}</option>
+            """""",
+        )
+        self.assertHTMLEqual(
+            self.selenium.find_element(By.ID, ""id_m2m_from""),
+            f""""""
+            <option value=""1"">{interesting_name}</option>
+            """""",
+        )
diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py
index 76a47e486843..4d188496926d 100644
--- a/tests/admin_widgets/tests.py
+++ b/tests/admin_widgets/tests.py
@@ -937,6 +937,28 @@ def test_widget_is_not_hidden(self):
         # Related item links are present.
         self.assertIn(""<a "", output)
 
+    def test_data_model_ref_when_model_name_is_camel_case(self):
+        rel = VideoStream._meta.get_field(""release_event"").remote_field
+        widget = forms.Select()
+        wrapper = widgets.RelatedFieldWidgetWrapper(widget, rel, widget_admin_site)
+        self.assertIs(wrapper.is_hidden, False)
+        context = wrapper.get_context(""release_event"", None, {})
+        self.assertEqual(context[""model""], ""release event"")
+        self.assertEqual(context[""model_name""], ""releaseevent"")
+        output = wrapper.render(""stream"", ""value"")
+        expected = """"""
+        <div class=""related-widget-wrapper"" data-model-ref=""releaseevent"">
+          <select name=""stream"">
+          </select>
+          <a class=""related-widget-wrapper-link add-related"" id=""add_id_stream""
+             data-popup=""yes"" title=""Add another release event""
+             href=""/admin_widgets/releaseevent/add/?_to_field=album&amp;_popup=1"">
+            <img src=""/static/admin/img/icon-addlink.svg"" alt="""" width=""20"" height=""20"">
+          </a>
+        </div>
+        """"""
+        self.assertHTMLEqual(output, expected)
+
 
 @override_settings(ROOT_URLCONF=""admin_widgets.urls"")
 class AdminWidgetSeleniumTestCase(AdminSeleniumTestCase):
","ticket-35330

# Branch description

This fix introduces `model_name` to use as the check for `data-model-ref` instead of `model` so that in the event that a model utilizes CamelCasing, we are able to correctly update related fields within the admin."
django/django,18928,"diff --git a/django/shortcuts.py b/django/shortcuts.py
index 6274631dbad7..9c2aa10329a7 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -192,3 +192,7 @@ def resolve_url(to, *args, **kwargs):
 
     # Finally, fall back and assume it's a URL
     return to
+
+
+def make_toast():
+    return ""toast""
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 58d5727f326e..5ce8bf580397 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -53,6 +53,11 @@ See :doc:`/topics/composite-primary-key` for more details.
 Minor features
 --------------
 
+:mod:`django.shortcuts`
+~~~~~~~~~~~~~~~~~~~~~~~
+
+* The new :func:`django.shortcuts.make_toast` function returns ``'toast'``.
+
 :mod:`django.contrib.admin`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/docs/topics/http/shortcuts.txt b/docs/topics/http/shortcuts.txt
index 308eae085522..3b32bea9a0da 100644
--- a/docs/topics/http/shortcuts.txt
+++ b/docs/topics/http/shortcuts.txt
@@ -317,3 +317,11 @@ This example is equivalent to::
         if not my_objects:
             raise Http404(""No MyModel matches the given query."")
 
+``make_toast()``
+================
+
+.. function:: make_toast()
+
+.. versionadded:: 2.2
+
+Returns ``'toast'``.
diff --git a/tests/shortcuts/test_make_toast.py b/tests/shortcuts/test_make_toast.py
new file mode 100644
index 000000000000..f51c703a255c
--- /dev/null
+++ b/tests/shortcuts/test_make_toast.py
@@ -0,0 +1,7 @@
+from django.shortcuts import make_toast
+from django.test import SimpleTestCase
+
+
+class MakeToastTests(SimpleTestCase):
+    def test_make_toast(self):
+        self.assertEqual(make_toast(), ""toast"")
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18467,"diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 3795809a1226..2c8e445de86b 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -11,6 +11,7 @@
 from django.db import connections
 from django.utils import autoreload
 from django.utils.regex_helper import _lazy_re_compile
+from django.utils.version import get_docs_version
 
 naiveip_re = _lazy_re_compile(
     r""""""^(?:
@@ -188,12 +189,14 @@ def on_bind(self, server_port):
             f""Quit the server with {quit_command}."",
             file=self.stdout,
         )
+        docs_version = get_docs_version()
         if os.environ.get(""HIDE_PRODUCTION_WARNING"") != ""true"":
             self.stdout.write(
                 self.style.WARNING(
                     ""WARNING: This is a development server. Do not use it in a ""
                     ""production setting. Use a production WSGI or ASGI server ""
                     ""instead.\nFor more information on production servers see: ""
-                    ""https://docs.djangoproject.com/en/stable/howto/deployment/""
+                    f""https://docs.djangoproject.com/en/{docs_version}/howto/""
+                    ""deployment/""
                 )
             )
diff --git a/docs/intro/tutorial01.txt b/docs/intro/tutorial01.txt
index 0536eca2f776..3f89220949dd 100644
--- a/docs/intro/tutorial01.txt
+++ b/docs/intro/tutorial01.txt
@@ -135,7 +135,7 @@ You'll see the following output on the command line:
     Quit the server with CONTROL-C.
 
     WARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.
-    For more information on production servers see: https://docs.djangoproject.com/en/stable/howto/deployment/
+    For more information on production servers see: https://docs.djangoproject.com/en/|version|/howto/deployment/
 
 .. note::
     Ignore the warning about unapplied database migrations for now; we'll deal
diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index 52eaaa331b65..f2c9e1bdc350 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -957,7 +957,7 @@ suitable for production:
 .. code-block:: text
 
     WARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.
-    For more information on production servers see: https://docs.djangoproject.com/en/stable/howto/deployment/
+    For more information on production servers see: https://docs.djangoproject.com/en/|version|/howto/deployment/
 
 Set this environment variable to ``""true""`` to hide this warning.
 
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 67362460a99d..5ee3eeb80336 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -33,7 +33,7 @@
 from django.test import LiveServerTestCase, SimpleTestCase, TestCase, override_settings
 from django.test.utils import captured_stderr, captured_stdout
 from django.urls import path
-from django.utils.version import PY313
+from django.utils.version import PY313, get_docs_version
 from django.views.static import serve
 
 from . import urls
@@ -1597,11 +1597,13 @@ def test_zero_ip_addr(self):
             ""Starting development server at http://0.0.0.0:8000/"",
             self.output.getvalue(),
         )
+        docs_version = get_docs_version()
         self.assertIn(
             ""WARNING: This is a development server. Do not use it in a ""
             ""production setting. Use a production WSGI or ASGI server instead.""
             ""\nFor more information on production servers see: ""
-            ""https://docs.djangoproject.com/en/stable/howto/deployment/"",
+            f""https://docs.djangoproject.com/en/{docs_version}/howto/""
+            ""deployment/"",
             self.output.getvalue(),
         )
 
@@ -1613,11 +1615,13 @@ def test_on_bind(self):
             ""Starting development server at http://127.0.0.1:14437/"",
             self.output.getvalue(),
         )
+        docs_version = get_docs_version()
         self.assertIn(
             ""WARNING: This is a development server. Do not use it in a ""
             ""production setting. Use a production WSGI or ASGI server instead.""
             ""\nFor more information on production servers see: ""
-            ""https://docs.djangoproject.com/en/stable/howto/deployment/"",
+            f""https://docs.djangoproject.com/en/{docs_version}/howto/""
+            ""deployment/"",
             self.output.getvalue(),
         )
 
@@ -1630,11 +1634,13 @@ def test_hide_production_warning_with_environment_variable(self):
             ""Starting development server at http://0.0.0.0:8000/"",
             self.output.getvalue(),
         )
+        docs_version = get_docs_version()
         self.assertNotIn(
             ""WARNING: This is a development server. Do not use it in a ""
             ""production setting. Use a production WSGI or ASGI server instead.""
             ""\nFor more information on production servers see: ""
-            ""https://docs.djangoproject.com/en/stable/howto/deployment/"",
+            f""https://docs.djangoproject.com/en/{docs_version}/howto/""
+            ""deployment/"",
             self.output.getvalue(),
         )
 
",ticket-35591
django/django,19096,"diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py
index f7d318fdc940..b746457675d8 100644
--- a/tests/forms_tests/field_tests/test_urlfield.py
+++ b/tests/forms_tests/field_tests/test_urlfield.py
@@ -80,6 +80,7 @@ def test_urlfield_clean(self):
     def test_urlfield_clean_invalid(self):
         f = URLField()
         tests = [
+            ""localhost"",
             ""foo"",
             ""com."",
             ""."",
","if its lacking a scheme like ""https"", localhost ist invalid.

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36131

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18729,"diff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt
index 716e3180db19..d9e12f0165e1 100644
--- a/docs/ref/contrib/admin/index.txt
+++ b/docs/ref/contrib/admin/index.txt
@@ -337,7 +337,8 @@ subclass::
     If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present,
     Django will default to displaying each field that isn't an ``AutoField`` and
     has ``editable=True``, in a single fieldset, in the same order as the fields
-    are defined in the model.
+    are defined in the model, followed by any fields defined in
+    :attr:`~ModelAdmin.readonly_fields`.
 
 .. attribute:: ModelAdmin.fieldsets
 
","This is a minor change regarding the use of `readonly_fields` to display a non-editable field, such as a `DateTimeField` with `auto_now_add=True`.

It is enough to only add the field to `readonly_fields` of the `ModelAdmin`, setting `fields` is unnecessary.

This is a widely used (for instance, mentioned [here](https://stackoverflow.com/questions/61158984/how-can-i-show-auto-now-add-field-in-django-admin)) and cool feature that needs to be mentioned in the documentation."
django/django,17160,"diff --git a/tests/contribute_to_meta/.gitignore b/tests/contribute_to_meta/.gitignore
new file mode 100644
index 000000000000..6892d0b6cfa9
--- /dev/null
+++ b/tests/contribute_to_meta/.gitignore
@@ -0,0 +1 @@
+apps/*/migrations/????_*.py
diff --git a/tests/contribute_to_meta/__init__.py b/tests/contribute_to_meta/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/__init__.py b/tests/contribute_to_meta/apps/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/modelchoicefield/__init__.py b/tests/contribute_to_meta/apps/modelchoicefield/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/modelchoicefield/migrations/__init__.py b/tests/contribute_to_meta/apps/modelchoicefield/migrations/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/modelchoicefield/models.py b/tests/contribute_to_meta/apps/modelchoicefield/models.py
new file mode 100644
index 000000000000..0b93128594ae
--- /dev/null
+++ b/tests/contribute_to_meta/apps/modelchoicefield/models.py
@@ -0,0 +1 @@
+# (models will be created dynamically)
diff --git a/tests/contribute_to_meta/apps/modelsimple/__init__.py b/tests/contribute_to_meta/apps/modelsimple/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/modelsimple/migrations/__init__.py b/tests/contribute_to_meta/apps/modelsimple/migrations/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/modelsimple/models.py b/tests/contribute_to_meta/apps/modelsimple/models.py
new file mode 100644
index 000000000000..15360e64d2aa
--- /dev/null
+++ b/tests/contribute_to_meta/apps/modelsimple/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+from ...fields import ConstraintField
+
+
+class Model(models.Model):
+    field = ConstraintField(max_length=10)
diff --git a/tests/contribute_to_meta/apps/modelwithmeta/__init__.py b/tests/contribute_to_meta/apps/modelwithmeta/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/modelwithmeta/migrations/__init__.py b/tests/contribute_to_meta/apps/modelwithmeta/migrations/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/contribute_to_meta/apps/modelwithmeta/models.py b/tests/contribute_to_meta/apps/modelwithmeta/models.py
new file mode 100644
index 000000000000..60c8d733d35f
--- /dev/null
+++ b/tests/contribute_to_meta/apps/modelwithmeta/models.py
@@ -0,0 +1,10 @@
+from django.db import models
+
+from ...fields import ConstraintField
+
+
+class Model(models.Model):
+    class Meta:
+        constraints = []
+
+    field = ConstraintField(max_length=10)
diff --git a/tests/contribute_to_meta/fields.py b/tests/contribute_to_meta/fields.py
new file mode 100644
index 000000000000..c6e421484c76
--- /dev/null
+++ b/tests/contribute_to_meta/fields.py
@@ -0,0 +1,29 @@
+from django.db import models
+
+
+class ConstraintField(models.CharField):
+    """"""A field that contributes a DB contraint to the model's Meta""""""
+
+    def contribute_to_class(self, cls, name, private_only=False):
+        super().contribute_to_class(cls, name, private_only)
+        cls._meta.constraints.append(
+            models.CheckConstraint(
+                check=models.Q(**{name: ""valid""}),
+                name=f""test_constraint_{cls.__name__.lower()}"",
+            )
+        )
+
+
+class ChoiceField(models.CharField):
+    """"""A field that contributes a DB contraint to the model's Meta
+    to enforce choice values""""""
+
+    def contribute_to_class(self, cls, name, private_only=False):
+        super().contribute_to_class(cls, name, private_only)
+        accepted_values = [c[0] for c in self.choices]
+        cls._meta.constraints.append(
+            models.CheckConstraint(
+                check=models.Q(**{f""{name}__in"": accepted_values}),
+                name=f""%(app_label)s_%(class)s_{name}_valid_choices"",
+            )
+        )
diff --git a/tests/contribute_to_meta/tests.py b/tests/contribute_to_meta/tests.py
new file mode 100644
index 000000000000..127eb5c6f706
--- /dev/null
+++ b/tests/contribute_to_meta/tests.py
@@ -0,0 +1,114 @@
+from importlib import import_module
+from pathlib import Path
+
+from django.apps import apps
+from django.core.management import call_command
+from django.db import IntegrityError, models
+from django.test import TransactionTestCase, override_settings, skipUnlessDBFeature
+
+test_apps = [
+    ""contribute_to_meta.apps.modelsimple"",
+    ""contribute_to_meta.apps.modelwithmeta"",
+    ""contribute_to_meta.apps.modelchoicefield"",
+]
+
+
+@override_settings(INSTALLED_APPS=test_apps)
+@skipUnlessDBFeature(""supports_table_check_constraints"")
+class ConstraintsTests(TransactionTestCase):
+    """"""Check that the constraints allow valid values and reject invalid ones""""""
+
+    available_apps = test_apps
+
+    @property
+    def _app_name(self):
+        return self._testMethodName.split(""_"")[1]
+
+    @property
+    def _migrations_folder(self):
+        return Path(__file__).parent / ""apps"" / self._app_name / ""migrations""
+
+    def _migration_content(self, migration_name):
+        return (self._migrations_folder / migration_name).read_text()
+
+    def setUp(self):
+        # Reset the migrations
+        for m in self._migrations_folder.glob(""????_*.py""):
+            m.unlink(missing_ok=True)
+
+    def _do_test(self, app_qualified_name):
+        # Run the migrations
+        call_command(""makemigrations"", self._app_name, ""--verbosity"", ""0"")
+        call_command(""migrate"", self._app_name, ""--verbosity"", ""0"")
+
+        # Check that the constraint behaves as expected
+        Model = import_module(app_qualified_name).models.Model
+        Model.objects.create(field=""valid"")
+        with self.assertRaises(IntegrityError):
+            Model.objects.all().update(field=""invalid"")
+
+        # Check that the constraint is present in the migration file
+        m1 = self._migration_content(""0001_initial.py"")
+        self.assertTrue(
+            ""models.CheckConstraint"" in m1, ""No constraint in the migration""
+        )
+
+    def test_modelsimple(self):
+        self._do_test(""contribute_to_meta.apps.modelsimple"")
+
+    def test_modelwithmeta(self):
+        self._do_test(""contribute_to_meta.apps.modelwithmeta"")
+
+    def test_modelchoicefield(self):
+        """"""Tests the use where constraints are used to enforce valid choices""""""
+
+        from contribute_to_meta.apps.modelchoicefield import models as mcf_models
+
+        from .fields import ChoiceField
+
+        # Create a model with a choice field
+        mcf_models.Model = type(
+            ""Model"",
+            (models.Model,),
+            {
+                ""__module__"": ""contribute_to_meta.apps.modelchoicefield.models"",
+                ""Meta"": type(""Meta"", (object,), {""constraints"": []}),
+                ""field"": ChoiceField(max_length=10, choices=[""a"", ""b"", ""c""]),
+            },
+        )
+
+        # Make the initial migration
+        call_command(""makemigrations"", self._app_name, ""--verbosity"", ""0"")
+
+        # Change the model's choices
+        del apps.get_app_config(self._app_name).models[""model""]
+        mcf_models.Model = type(
+            ""Model"",
+            (models.Model,),
+            {
+                ""__module__"": ""contribute_to_meta.apps.modelchoicefield.models"",
+                ""Meta"": type(""Meta"", (object,), {""constraints"": []}),
+                ""field"": ChoiceField(max_length=10, choices=[""d"", ""e"", ""f""]),
+            },
+        )
+
+        # Make the migration for the change
+        call_command(
+            ""makemigrations"", self._app_name, ""--name"", ""update"", ""--verbosity"", ""0""
+        )
+
+        # Check that the constraint is present in the migration file
+        m1 = self._migration_content(""0001_initial.py"")
+        m2 = self._migration_content(""0002_update.py"")
+        self.assertTrue(
+            'check=models.Q((""field__in"", [""a"", ""b"", ""c""]))' in m1,
+            ""No corresponding constraint in first migration"",
+        )
+        self.assertTrue(
+            ""migrations.RemoveConstraint"" in m2,
+            ""No drop constraint in second migration"",
+        )
+        self.assertTrue(
+            'check=models.Q((""field__in"", [""d"", ""e"", ""f""]))' in m2,
+            ""No corresponding constraint in second migration"",
+        )
","For now this is only a failing test case to run against official CI. Hope it's OK to open such a PR. At some point this will hopefully become a PR to support having fields populating DB constraints in contribute_to_fields.

See https://forum.djangoproject.com/t/dynamically-populate-constraints-in-field-contribute-to-class/22934 for full context."
django/django,18979,"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index 8491506aad54..911b60a86d43 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -166,6 +166,7 @@ class Count(Aggregate):
     output_field = IntegerField()
     allow_distinct = True
     empty_result_set_value = 0
+    allows_composite_expressions = True
 
     def __init__(self, expression, filter=None, **extra):
         if expression == ""*"":
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 667e9f93c605..746fe0414361 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -184,6 +184,8 @@ class BaseExpression:
     constraint_validation_compatible = True
     # Does the expression possibly return more than one row?
     set_returning = False
+    # Does the expression allow composite expressions?
+    allows_composite_expressions = False
 
     def __init__(self, output_field=None):
         if output_field is not None:
@@ -758,6 +760,8 @@ def resolve_expression(
         rhs = self.rhs.resolve_expression(
             query, allow_joins, reuse, summarize, for_save
         )
+        if isinstance(lhs, ColPairs) or isinstance(rhs, ColPairs):
+            raise ValueError(""CompositePrimaryKey is not combinable."")
         if not isinstance(self, (DurationExpression, TemporalSubtraction)):
             try:
                 lhs_type = lhs.output_field.get_internal_type()
@@ -1075,6 +1079,12 @@ def resolve_expression(
             c.source_expressions[pos] = arg.resolve_expression(
                 query, allow_joins, reuse, summarize, for_save
             )
+        if not self.allows_composite_expressions and any(
+            isinstance(expr, ColPairs) for expr in c.get_source_expressions()
+        ):
+            raise ValueError(
+                f""{self.__class__.__name__} does not support composite primary keys.""
+            )
         return c
 
     def as_sql(
@@ -1825,6 +1835,7 @@ class OrderBy(Expression):
     template = ""%(expression)s %(ordering)s""
     conditional = False
     constraint_validation_compatible = False
+    allows_composite_expressions = True
 
     def __init__(self, expression, descending=False, nulls_first=None, nulls_last=None):
         if nulls_first and nulls_last:
diff --git a/django/db/models/fields/tuple_lookups.py b/django/db/models/fields/tuple_lookups.py
index e515e971b400..51432a666b5f 100644
--- a/django/db/models/fields/tuple_lookups.py
+++ b/django/db/models/fields/tuple_lookups.py
@@ -17,6 +17,7 @@
 
 
 class Tuple(Func):
+    allows_composite_expressions = True
     function = """"
     output_field = Field()
 
@@ -28,6 +29,8 @@ def __iter__(self):
 
 
 class TupleLookupMixin:
+    allows_composite_expressions = True
+
     def get_prep_lookup(self):
         self.check_rhs_is_tuple_or_list()
         self.check_rhs_length_equals_lhs_length()
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 734f911f83be..56dbdabac1e2 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -4,7 +4,7 @@
 
 from django.core.exceptions import EmptyResultSet, FullResultSet
 from django.db.backends.base.operations import BaseDatabaseOperations
-from django.db.models.expressions import Case, Expression, Func, Value, When
+from django.db.models.expressions import Case, ColPairs, Expression, Func, Value, When
 from django.db.models.fields import (
     BooleanField,
     CharField,
@@ -119,6 +119,10 @@ def process_rhs(self, compiler, connection):
             value = value.resolve_expression(compiler.query)
         if hasattr(value, ""as_sql""):
             sql, params = compiler.compile(value)
+            if isinstance(value, ColPairs):
+                raise ValueError(
+                    ""CompositePrimaryKey cannot be used as a lookup value.""
+                )
             # Ensure expression is wrapped in parentheses to respect operator
             # precedence but avoid double wrapping as it can be misinterpreted
             # on some backends (e.g. subqueries on SQLite).
diff --git a/docs/ref/models/expressions.txt b/docs/ref/models/expressions.txt
index f273b00a9ed2..6faec969c3b4 100644
--- a/docs/ref/models/expressions.txt
+++ b/docs/ref/models/expressions.txt
@@ -1105,6 +1105,14 @@ calling the appropriate methods on the wrapped expression.
         ``UNNEST``, etc.) to skip optimization and be properly evaluated when
         annotations spawn rows themselves. Defaults to ``False``.
 
+    .. attribute:: allows_composite_expressions
+
+        .. versionadded:: 5.2
+
+        Tells Django that this expression allows composite expressions, for
+        example, to support :ref:`composite primary keys
+        <cpk-and-database-functions>`. Defaults to ``False``.
+
     .. method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)
 
         Provides the chance to do any preprocessing or validation of
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 35c602c4e2fb..f1d68d234fee 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -330,6 +330,10 @@ Models
   accepts a list of field names or expressions and returns a JSON array
   containing those values.
 
+* The new :attr:`.Expression.allows_composite_expressions` attribute specifies
+  that the expression allows composite expressions, for example, to support
+  :ref:`composite primary keys <cpk-and-database-functions>`.
+
 Requests and Responses
 ~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/docs/topics/composite-primary-key.txt b/docs/topics/composite-primary-key.txt
index 9e5234ca9faa..f252f318c1ff 100644
--- a/docs/topics/composite-primary-key.txt
+++ b/docs/topics/composite-primary-key.txt
@@ -131,6 +131,8 @@ database.
     ``ForeignObject`` is an internal API. This means it is not covered by our
     :ref:`deprecation policy <internal-release-deprecation-policy>`.
 
+.. _cpk-and-database-functions:
+
 Composite primary keys and database functions
 =============================================
 
@@ -141,13 +143,15 @@ Many database functions only accept a single expression.
     MAX(""order_id"")  -- OK
     MAX(""product_id"", ""order_id"")  -- ERROR
 
-As a consequence, they cannot be used with composite primary key references as
-they are composed of multiple column expressions.
+In these cases, providing a composite primary key reference raises a
+``ValueError``, since it is composed of multiple column expressions. An
+exception is made for ``Count``.
 
 .. code-block:: python
 
     Max(""order_id"")  # OK
-    Max(""pk"")  # ERROR
+    Max(""pk"")  # ValueError
+    Count(""pk"")  # OK
 
 Composite primary keys in forms
 ===============================
diff --git a/tests/composite_pk/test_aggregate.py b/tests/composite_pk/test_aggregate.py
index 7b40bffe9a44..e8751df0a3a6 100644
--- a/tests/composite_pk/test_aggregate.py
+++ b/tests/composite_pk/test_aggregate.py
@@ -1,4 +1,4 @@
-from django.db.models import Count, Q
+from django.db.models import Count, Max, Q
 from django.test import TestCase
 
 from .models import Comment, Tenant, User
@@ -136,3 +136,8 @@ def test_order_by_comments_id_count(self):
             ),
             (self.user_3, self.user_1, self.user_2),
         )
+
+    def test_max_pk(self):
+        msg = ""Max does not support composite primary keys.""
+        with self.assertRaisesMessage(ValueError, msg):
+            Comment.objects.aggregate(Max(""pk""))
diff --git a/tests/composite_pk/test_filter.py b/tests/composite_pk/test_filter.py
index 7e361c5925b2..06cd6781dfb9 100644
--- a/tests/composite_pk/test_filter.py
+++ b/tests/composite_pk/test_filter.py
@@ -1,3 +1,5 @@
+from django.db.models import F, TextField
+from django.db.models.functions import Cast
 from django.test import TestCase
 
 from .models import Comment, Tenant, User
@@ -54,6 +56,20 @@ def test_filter_and_count_user_by_pk(self):
             with self.subTest(lookup=lookup, count=count):
                 self.assertEqual(User.objects.filter(**lookup).count(), count)
 
+    def test_rhs_pk(self):
+        msg = ""CompositePrimaryKey cannot be used as a lookup value.""
+        with self.assertRaisesMessage(ValueError, msg):
+            Comment.objects.filter(text__gt=F(""pk"")).count()
+
+    def test_rhs_combinable(self):
+        msg = ""CompositePrimaryKey is not combinable.""
+        for expr in [F(""pk"") + (1, 1), (1, 1) + F(""pk"")]:
+            with (
+                self.subTest(expression=expr),
+                self.assertRaisesMessage(ValueError, msg),
+            ):
+                Comment.objects.filter(text__gt=expr).count()
+
     def test_order_comments_by_pk_asc(self):
         self.assertSequenceEqual(
             Comment.objects.order_by(""pk""),
@@ -410,3 +426,8 @@ def test_filter_users_by_comments_subquery(self):
         subquery = Comment.objects.filter(id=3).only(""pk"")
         queryset = User.objects.filter(comments__in=subquery)
         self.assertSequenceEqual(queryset, (self.user_2,))
+
+    def test_cannot_cast_pk(self):
+        msg = ""Cast does not support composite primary keys.""
+        with self.assertRaisesMessage(ValueError, msg):
+            Comment.objects.filter(text__gt=Cast(F(""pk""), TextField())).count()
","#### Trac ticket number
ticket-36042

#### Branch description
Before, using `CompositePrimaryKey` in a right-hand side (as `F(pk)`) would raise database errors. It would also fail on all but PostgreSQL when attempting to cast to a TextField.

Now, more informative errors are raised at the ORM compilation level instead of at the database level.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18440,"diff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py
index aa657b3ba459..a83560b89296 100644
--- a/django/db/backends/oracle/features.py
+++ b/django/db/backends/oracle/features.py
@@ -204,10 +204,6 @@ def supports_comparing_boolean_expr(self):
     def supports_aggregation_over_interval_types(self):
         return self.connection.oracle_version >= (23,)
 
-    @cached_property
-    def supports_bulk_insert_with_multiple_rows(self):
-        return self.connection.oracle_version >= (23,)
-
     @cached_property
     def bare_select_suffix(self):
         return """" if self.connection.oracle_version >= (23,) else "" FROM DUAL""
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index 507c5fb369cb..86340bbf4ac1 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -678,24 +678,6 @@ def bulk_insert_sql(self, fields, placeholder_rows):
             for field in fields
             if field
         ]
-        if (
-            self.connection.features.supports_bulk_insert_with_multiple_rows
-            # A workaround with UNION of SELECTs is required for models without
-            # any fields.
-            and field_placeholders
-        ):
-            placeholder_rows_sql = []
-            for row in placeholder_rows:
-                placeholders_row = (
-                    field_placeholder % placeholder
-                    for field_placeholder, placeholder in zip(
-                        field_placeholders, row, strict=True
-                    )
-                )
-                placeholder_rows_sql.append(placeholders_row)
-            return super().bulk_insert_sql(fields, placeholder_rows_sql)
-        # Oracle < 23c doesn't support inserting multiple rows in a single
-        # statement, use UNION of SELECTs as a workaround.
         query = []
         for row in placeholder_rows:
             select = []
","This reverts commit 175b04942afaff978013db61495f3b39ea12989b due to a crash when Oracle > 23.3.

----

@csirmazbendeguz can you confirm this fixes https://github.com/oracle/python-oracledb/issues/356 for you?
"
django/django,19245,"diff --git a/django/db/models/base.py b/django/db/models/base.py
index 34c537fea06a..eaedd4874896 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -756,11 +756,12 @@ def refresh_from_db(self, using=None, fields=None, from_queryset=None):
 
         db_instance = db_instance_qs.get()
         non_loaded_fields = db_instance.get_deferred_fields()
-        for field in self._meta.concrete_fields:
+        for field in self._meta.fields:
             if field.attname in non_loaded_fields:
                 # This field wasn't refreshed - skip ahead.
                 continue
-            setattr(self, field.attname, getattr(db_instance, field.attname))
+            if field.concrete:
+                setattr(self, field.attname, getattr(db_instance, field.attname))
             # Clear or copy cached foreign keys.
             if field.is_relation:
                 if field.is_cached(db_instance):
diff --git a/tests/foreign_object/tests.py b/tests/foreign_object/tests.py
index 7670330995a1..696dfcd5fd22 100644
--- a/tests/foreign_object/tests.py
+++ b/tests/foreign_object/tests.py
@@ -450,6 +450,15 @@ def test_prefetch_related_m2m_reverse_works(self):
         normal_groups_lists = [list(p.groups.all()) for p in Person.objects.all()]
         self.assertEqual(groups_lists, normal_groups_lists)
 
+    def test_refresh_foreign_object(self):
+        member = Membership.objects.create(
+            membership_country=self.usa, person=self.bob, group=self.cia
+        )
+        member.person = self.jim
+        with self.assertNumQueries(1):
+            member.refresh_from_db()
+        self.assertEqual(member.person, self.bob)
+
     @translation.override(""fi"")
     def test_translations(self):
         a1 = Article.objects.create(pub_date=datetime.date.today())
","#### Trac ticket number
ticket-36207

#### Branch description
Before, model fields using the private API `models.ForeignObject` to relate foreign objects without enforcing a foreign key (as [modeled](https://docs.djangoproject.com/en/5.2/topics/composite-primary-key/#composite-primary-keys-and-relations) in the composite pk docs) didn't have their relations cleared via `refresh_from_db()`.

Alternative to #19207

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [n/a] I have added or updated relevant docs, including release notes if applicable.
- [n/a] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18552,"diff --git a/django/contrib/admin/templates/admin/auth/user/add_form.html b/django/contrib/admin/templates/admin/auth/user/add_form.html
index 48406f11a2a9..a13e75e89a54 100644
--- a/django/contrib/admin/templates/admin/auth/user/add_form.html
+++ b/django/contrib/admin/templates/admin/auth/user/add_form.html
@@ -3,9 +3,7 @@
 
 {% block form_top %}
   {% if not is_popup %}
-    <p>{% translate 'First, enter a username and password. Then, you’ll be able to edit more user options.' %}</p>
-  {% else %}
-    <p>{% translate ""Enter a username and password."" %}</p>
+    <p>{% translate ""After you've created a user, you’ll be able to edit more user options."" %}</p>
   {% endif %}
 {% endblock %}
 {% block extrahead %}
diff --git a/django/contrib/admin/templates/admin/login.html b/django/contrib/admin/templates/admin/login.html
index 3999dd370300..fa0dcbc01db1 100644
--- a/django/contrib/admin/templates/admin/login.html
+++ b/django/contrib/admin/templates/admin/login.html
@@ -57,7 +57,7 @@
   {% url 'admin_password_reset' as password_reset_url %}
   {% if password_reset_url %}
   <div class=""password-reset-link"">
-    <a href=""{{ password_reset_url }}"">{% translate 'Forgotten your password or username?' %}</a>
+    <a href=""{{ password_reset_url }}"">{% translate 'Forgotten your login credentials?' %}</a>
   </div>
   {% endif %}
   <div class=""submit-row"">
diff --git a/django/contrib/admin/templates/registration/password_reset_email.html b/django/contrib/admin/templates/registration/password_reset_email.html
index 64822091d1f3..2a428c48ceb9 100644
--- a/django/contrib/admin/templates/registration/password_reset_email.html
+++ b/django/contrib/admin/templates/registration/password_reset_email.html
@@ -5,7 +5,7 @@
 {% block reset_link %}
 {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}
 {% endblock %}
-{% translate 'Your username, in case you’ve forgotten:' %} {{ user.get_username }}
+{% translate 'In case you’ve forgotten, you are:' %} {{ user.get_username }}
 
 {% translate ""Thanks for using our site!"" %}
 
","#### Trac ticket number

[ticket-35742](https://code.djangoproject.com/ticket/35742#ticket)

#### Branch description
Improve UserAdmin by replacing the static ""username"" with the dynamic USERNAME_FIELD value.
```
# admin.py
class CustomUserAdmin(UserAdmin):
  add_fieldsets = (
    (
      None,
      {
        ""classes"": (""wide"",),
        ""fields"": (User.USERNAME_FIELD, ""usable_password"", ""password1"", ""password2""),
      },
    ),
  )

# add_form.html
{% block form_top %}
  {% if not is_popup %}
    <p>{% blocktranslate %}First, enter a {{ username }} and password. Then, you’ll be able to edit more user options.{% endblocktranslate %}</p>
  {% else %}
    <p>{% blcoktranslate %}Enter a {{ username }} and password.{% endblocktranslate %}</p>
  {% endif %}
{% endblock %}
```


#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,17970,"diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 139875eed50b..18c4f2ca08d6 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -122,7 +122,7 @@ def process_rhs(self, compiler, connection):
             # Ensure expression is wrapped in parentheses to respect operator
             # precedence but avoid double wrapping as it can be misinterpreted
             # on some backends (e.g. subqueries on SQLite).
-            if sql and sql[0] != ""("":
+            if not isinstance(value, Value) and sql and sql[0] != ""("":
                 sql = ""(%s)"" % sql
             return sql, params
         else:
diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py
index a198a13b62b5..ebdaa21e3d31 100644
--- a/tests/lookup/tests.py
+++ b/tests/lookup/tests.py
@@ -1366,6 +1366,12 @@ def test_lookup_rhs(self):
             [stock_1, stock_2],
         )
 
+    def test_lookup_direct_value_rhs_unwrapped(self):
+        with self.assertNumQueries(1) as ctx:
+            self.assertIs(Author.objects.filter(GreaterThan(2, 1)).exists(), True)
+        # Direct values on RHS are not wrapped.
+        self.assertIn(""2 > 1"", ctx.captured_queries[0][""sql""])
+
 
 class LookupQueryingTests(TestCase):
     @classmethod
",https://github.com/django/django/pull/17969#issuecomment-1993788188
django/django,18965,"diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py
index cb0207cae909..12a54edda57b 100644
--- a/tests/file_storage/models.py
+++ b/tests/file_storage/models.py
@@ -80,5 +80,5 @@ def pathlib_upload_to(self, filename):
         storage=temp_storage, upload_to=""tests"", max_length=20
     )
     extended_length = models.FileField(
-        storage=temp_storage, upload_to=""tests"", max_length=300
+        storage=temp_storage, upload_to=""tests"", max_length=1024
     )
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35740

#### Branch description
filesystem (like bcachefs) allows file names longer than 300 characters, the file name will get truncated by Django's FileField (due to its max_length=300 setting). So i made the changes accordingly mentioned in the discussions.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18580,"diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py
index 60b65e309a31..1110466fcfd1 100644
--- a/tests/test_utils/tests.py
+++ b/tests/test_utils/tests.py
@@ -2186,6 +2186,8 @@ def test_allowed_database_copy_queries(self):
         finally:
             new_connection.validate_thread_sharing()
             new_connection._close()
+            if hasattr(new_connection, ""close_pool""):
+                new_connection.close_pool()
 
 
 class DatabaseAliasTests(SimpleTestCase):
","Pulled from #18568

This can be seen when running postgres tests with a connection pool.

Before:
```
$ docker-compose run --rm postgres test_utils.tests.AllowedDatabaseQueriesTests
Creating django-docker-box_postgres_run ... done
wait-for-it.sh: waiting 20 seconds for postgres-db:5432
wait-for-it.sh: postgres-db:5432 is available after 0 seconds
Testing against Django installed in '/tests/django/django' with up to 12 processes
Found 4 test(s).
Creating test database for alias 'default'...
System check identified no issues (0 silenced).

Running tests...
----------------------------------------------------------------------
....
----------------------------------------------------------------------
Ran 4 tests in 0.018s

OK

Generating XML reports...
Destroying test database for alias 'default'...
Traceback (most recent call last):
  File ""/tests/django/django/db/backends/utils.py"", line 103, in _execute
    return self.cursor.execute(sql)
  File ""/usr/local/lib/python3.10/site-packages/psycopg/cursor.py"", line 97, in execute
    raise ex.with_traceback(None)
psycopg.errors.ObjectInUse: database ""test_django"" is being accessed by other users
DETAIL:  There are 4 other sessions using the database.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/tests/django/tests/runtests.py"", line 788, in <module>
    failures = django_tests(
  File ""/tests/django/tests/runtests.py"", line 426, in django_tests
    failures = test_runner.run_tests(test_labels)
  File ""/tests/django/django/test/runner.py"", line 1080, in run_tests
    self.teardown_databases(old_config)
  File ""/tests/django/django/test/runner.py"", line 1008, in teardown_databases
    _teardown_databases(
  File ""/tests/django/django/test/utils.py"", line 369, in teardown_databases
    connection.creation.destroy_test_db(old_name, verbosity, keepdb)
  File ""/tests/django/django/db/backends/base/creation.py"", line 311, in destroy_test_db
    self._destroy_test_db(test_database_name, verbosity)
  File ""/tests/django/django/db/backends/postgresql/creation.py"", line 91, in _destroy_test_db
    return super()._destroy_test_db(test_database_name, verbosity)
  File ""/tests/django/django/db/backends/base/creation.py"", line 327, in _destroy_test_db
    cursor.execute(
  File ""/tests/django/django/db/backends/utils.py"", line 79, in execute
    return self._execute_with_wrappers(
  File ""/tests/django/django/db/backends/utils.py"", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File ""/tests/django/django/db/backends/utils.py"", line 100, in _execute
    with self.db.wrap_database_errors:
  File ""/tests/django/django/db/utils.py"", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File ""/tests/django/django/db/backends/utils.py"", line 103, in _execute
    return self.cursor.execute(sql)
  File ""/usr/local/lib/python3.10/site-packages/psycopg/cursor.py"", line 97, in execute
    raise ex.with_traceback(None)
django.db.utils.OperationalError: database ""test_django"" is being accessed by other users
DETAIL:  There are 4 other sessions using the database.
ERROR: 1

```

After:
```
$ docker-compose run --rm postgres test_utils.tests.AllowedDatabaseQueriesTests
Creating django-docker-box_postgres_run  ... done
wait-for-it.sh: waiting 20 seconds for postgres-db:5432
wait-for-it.sh: postgres-db:5432 is available after 0 seconds
Testing against Django installed in '/tests/django/django' with up to 12 processes
Found 4 test(s).
Creating test database for alias 'default'...
System check identified no issues (0 silenced).

Running tests...
----------------------------------------------------------------------
....
----------------------------------------------------------------------
Ran 4 tests in 0.025s

OK

Generating XML reports...
Destroying test database for alias 'default'...
```"
django/django,18389,"diff --git a/django/contrib/auth/middleware.py b/django/contrib/auth/middleware.py
index cb409ee778a8..979bbd8bc92f 100644
--- a/django/contrib/auth/middleware.py
+++ b/django/contrib/auth/middleware.py
@@ -35,7 +35,10 @@ def process_request(self, request):
                 ""'django.contrib.auth.middleware.AuthenticationMiddleware'.""
             )
         request.user = SimpleLazyObject(lambda: get_user(request))
-        request.auser = partial(auser, request)
+
+    async def aprocess_request(self, request):
+        self.process_request(request)
+        request.auser = await auser(request)
 
 
 class LoginRequiredMiddleware(MiddlewareMixin):
diff --git a/django/utils/deprecation.py b/django/utils/deprecation.py
index d690dc5d5682..fc0e3aad720e 100644
--- a/django/utils/deprecation.py
+++ b/django/utils/deprecation.py
@@ -128,7 +128,9 @@ async def __acall__(self, request):
         is running.
         """"""
         response = None
-        if hasattr(self, ""process_request""):
+        if hasattr(self, ""aprocess_request""):
+            response = await self.aprocess_request(request)
+        elif hasattr(self, ""process_request""):
             response = await sync_to_async(
                 self.process_request,
                 thread_sensitive=True,
diff --git a/tests/auth_tests/test_middleware.py b/tests/auth_tests/test_middleware.py
index a837eb8b965e..9c906c0088fd 100644
--- a/tests/auth_tests/test_middleware.py
+++ b/tests/auth_tests/test_middleware.py
@@ -52,9 +52,9 @@ def test_no_session(self):
 
     async def test_auser(self):
         self.middleware(self.request)
-        auser = await self.request.auser()
+        auser = self.request.auser
         self.assertEqual(auser, self.user)
-        auser_second = await self.request.auser()
+        auser_second = self.request.auser
         self.assertIs(auser, auser_second)
 
 
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35615


# Branch description
#### provide `auser` to templates when an Aync view is being used.
#### this has been done because django's templates can not `await` on coroutines and the current form of `auser` only provides a coroutine object which isn't very useful.
#### more complete description has been provided in the ticket.

# Checklist
- [ x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19058,"diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 9b5ad1b2b954..7ce5dac12ac9 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -225,6 +225,10 @@ def merge(*lists):
             return list(dict.fromkeys(chain.from_iterable(filter(None, lists))))
 
     def __add__(self, other):
+        if type(other) is not Media and hasattr(other, ""__radd__""):
+            return other.__radd__(self)
+        elif not isinstance(other, Media):
+            return NotImplemented
         combined = Media()
         combined._css_lists = self._css_lists[:]
         combined._js_lists = self._js_lists[:]
diff --git a/docs/releases/6.0.txt b/docs/releases/6.0.txt
index 4e5f3c1f02ea..f7b04d2eba5d 100644
--- a/docs/releases/6.0.txt
+++ b/docs/releases/6.0.txt
@@ -146,7 +146,9 @@ File Uploads
 Forms
 ~~~~~
 
-* ...
+* ``forms.Media`` now returns ``NotImplemented`` in ``__add__`` for
+  non-``Media``-right-hand side values. This allows ``__radd__`` to be used if
+  available.
 
 Generic Views
 ~~~~~~~~~~~~~
diff --git a/tests/forms_tests/tests/test_media.py b/tests/forms_tests/tests/test_media.py
index 9f6b15074c27..767fc4ee7d02 100644
--- a/tests/forms_tests/tests/test_media.py
+++ b/tests/forms_tests/tests/test_media.py
@@ -799,6 +799,49 @@ def test_add_empty(self):
         self.assertEqual(merged._css_lists, [{""screen"": [""a.css""]}])
         self.assertEqual(merged._js_lists, [[""a""]])
 
+    def test_add_other(self):
+        """"""Media.__add__ shouldn't assume media instances""""""
+        with self.assertRaisesRegex(TypeError, ""unsupported operand type""):
+            Media() + 3
+
+    def test_add_media_subclass_with_radd(self):
+        class SubclassedMedia(Media):
+            def __radd__(self, other):
+                combined = SubclassedMedia()
+                # Simplify the test by ignoring _css_lists
+                combined._js_lists = [*other._js_lists, *self._js_lists]
+                return combined
+
+        media = Media(js=[""b.js"", ""c.js""])
+        subclassed = SubclassedMedia(js=[""a.js"", ""b.js""])
+
+        merged = media + subclassed
+        self.assertEqual(merged._js, [""a.js"", ""b.js"", ""c.js""])
+        self.assertIsInstance(merged, SubclassedMedia)
+
+        merged = subclassed + media
+        self.assertEqual(merged._js, [""a.js"", ""b.js"", ""c.js""])
+        self.assertIsInstance(merged, Media)
+
+    def test_add_media_subclass_with_add(self):
+        class SubclassedMedia(Media):
+            def __add__(self, other):
+                combined = SubclassedMedia()
+                # Simplify the test by ignoring _css_lists
+                combined._js_lists = [*other._js_lists, *self._js_lists]
+                return combined
+
+        media = Media(js=[""b.js"", ""c.js""])
+        subclassed = SubclassedMedia(js=[""a.js"", ""b.js""])
+
+        merged = media + subclassed
+        self.assertEqual(merged._js, [""a.js"", ""b.js"", ""c.js""])
+        self.assertIsInstance(merged, Media)
+
+        merged = subclassed + media
+        self.assertEqual(merged._js, [""a.js"", ""b.js"", ""c.js""])
+        self.assertIsInstance(merged, SubclassedMedia)
+
 
 @override_settings(
     STATIC_URL=""http://media.example.com/static/"",
","#### Trac ticket number

[ticket-36104](https://code.djangoproject.com/ticket/36104)

#### Branch description

`Media.__add__` currently assumes that the only thing added to it will only ever be other `Media` objects. That doesn't necessarily have to be the case. Change the code to allow the right-hand side to handle the addition, for example to allow subclasses of `forms.Media` to override the behavior. If the right-hand side isn't a `Media` instance and if it has defined `__radd__`, call that instead of continuing. Additionally, if the right hand side isn't a `Media` instance at all but something completely different, return `NotImplemented` instead of failing later with obscure `AttributeError` exceptions.

I classified the trac ticket as a bug, I'm not sure this is an enhancement per se.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
numpy/numpy,28970,"diff --git a/benchmarks/benchmarks/bench_ufunc.py b/benchmarks/benchmarks/bench_ufunc.py
index 7dc321ac2980..155e7d4f7421 100644
--- a/benchmarks/benchmarks/bench_ufunc.py
+++ b/benchmarks/benchmarks/bench_ufunc.py
@@ -53,7 +53,7 @@ def setup(self, ufuncname):
         except AttributeError:
             raise NotImplementedError
         self.args = []
-        for _, aarg in get_squares_().items():
+        for aarg in get_squares_().values():
             arg = (aarg,) * 1  # no nin
             try:
                 self.afdn(*arg)
@@ -100,7 +100,7 @@ def setup(self, ufuncname):
         except AttributeError:
             raise NotImplementedError
         self.args = []
-        for _, aarg in get_squares_().items():
+        for aarg in get_squares_().values():
             arg = (aarg,) * self.ufn.nin
             try:
                 self.ufn(*arg)
diff --git a/numpy/_core/code_generators/genapi.py b/numpy/_core/code_generators/genapi.py
index caeaf7a08532..6a370a7dc3cd 100644
--- a/numpy/_core/code_generators/genapi.py
+++ b/numpy/_core/code_generators/genapi.py
@@ -466,8 +466,7 @@ def _key(x):
 def merge_api_dicts(dicts):
     ret = {}
     for d in dicts:
-        for k, v in d.items():
-            ret[k] = v
+        ret.update(d)
 
     return ret
 
diff --git a/numpy/f2py/func2subr.py b/numpy/f2py/func2subr.py
index 0a875006ed75..09b67f7c3085 100644
--- a/numpy/f2py/func2subr.py
+++ b/numpy/f2py/func2subr.py
@@ -77,7 +77,7 @@ def var2fixfortran(vars, a, fa=None, f90mode=None):
 
 def useiso_c_binding(rout):
     useisoc = False
-    for key, value in rout['vars'].items():
+    for value in rout['vars'].values():
         kind_value = value.get('kindselector', {}).get('kind')
         if kind_value in isoc_kindmap:
             return True
diff --git a/numpy/lib/introspect.py b/numpy/lib/introspect.py
index f4a0f32a98da..2bd612d53e17 100644
--- a/numpy/lib/introspect.py
+++ b/numpy/lib/introspect.py
@@ -87,7 +87,7 @@ def opt_func_info(func_name=None, signature=None):
                     sig_pattern.search(c) or sig_pattern.search(dtype(c).name)
                     for c in chars
                 ):
-                    matching_chars[chars] = targets
+                    matching_chars[chars] = targets  # noqa: PERF403
             if matching_chars:
                 matching_sigs[k] = matching_chars
     else:
diff --git a/numpy/ma/testutils.py b/numpy/ma/testutils.py
index bffcc34b759c..0df3b1757fd6 100644
--- a/numpy/ma/testutils.py
+++ b/numpy/ma/testutils.py
@@ -121,7 +121,7 @@ def assert_equal(actual, desired, err_msg=''):
         if not isinstance(actual, dict):
             raise AssertionError(repr(type(actual)))
         assert_equal(len(actual), len(desired), err_msg)
-        for k, i in desired.items():
+        for k in desired:
             if k not in actual:
                 raise AssertionError(f""{k} not in {actual}"")
             assert_equal(actual[k], desired[k], f'key={k!r}\n{err_msg}')
@@ -159,7 +159,7 @@ def fail_if_equal(actual, desired, err_msg='',):
         if not isinstance(actual, dict):
             raise AssertionError(repr(type(actual)))
         fail_if_equal(len(actual), len(desired), err_msg)
-        for k, i in desired.items():
+        for k in desired:
             if k not in actual:
                 raise AssertionError(repr(k))
             fail_if_equal(actual[k], desired[k], f'key={k!r}\n{err_msg}')
diff --git a/numpy/testing/_private/utils.py b/numpy/testing/_private/utils.py
index d7ceaeab72cc..7c74c894d0cc 100644
--- a/numpy/testing/_private/utils.py
+++ b/numpy/testing/_private/utils.py
@@ -353,7 +353,7 @@ def assert_equal(actual, desired, err_msg='', verbose=True, *, strict=False):
         if not isinstance(actual, dict):
             raise AssertionError(repr(type(actual)))
         assert_equal(len(actual), len(desired), err_msg, verbose)
-        for k, i in desired.items():
+        for k in desired:
             if k not in actual:
                 raise AssertionError(repr(k))
             assert_equal(actual[k], desired[k], f'key={k!r}\n{err_msg}',
diff --git a/ruff.toml b/ruff.toml
index 6b05d8de69ee..074d016c311f 100644
--- a/ruff.toml
+++ b/ruff.toml
@@ -29,6 +29,7 @@ extend-select = [
     ""FLY"",
     ""I"",
     ""PD"",
+    ""PERF"",
     ""E"",
     ""W"",
     ""PGH"",
@@ -36,32 +37,33 @@ extend-select = [
     ""UP"",
 ]
 ignore = [
-    ""B006"",   # Do not use mutable data structures for argument defaults
-    ""B007"",   # Loop control variable not used within loop body
-    ""B011"",   # Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
-    ""B023"",   # Function definition does not bind loop variable
-    ""B028"",   # No explicit `stacklevel` keyword argument found
-    ""B904"",   # Within an `except` clause distinguish raised exceptions from errors in exception handling
-    ""B905"",   #`zip()` without an explicit `strict=` parameter
-    ""C408"",   # Unnecessary `dict()` call (rewrite as a literal)
-    ""ISC002"", # Implicitly concatenated string literals over multiple lines
-    ""PIE790"", # Unnecessary `pass` statement
-    ""PD901"",  # Avoid using the generic variable name `df` for DataFrames
-    ""E241"",   # Multiple spaces after comma
-    ""E265"",   # Block comment should start with `# `
-    ""E266"",   # Too many leading `#` before block comment
-    ""E302"",   # TODO: Expected 2 blank lines, found 1
-    ""E402"",   # Module level import not at top of file
-    ""E712"",   # Avoid equality comparisons to `True` or `False`
-    ""E721"",   # TODO: Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance check
-    ""E731"",   # Do not assign a `lambda` expression, use a `def`
-    ""E741"",   # Ambiguous variable name
-    ""F403"",   # `from ... import *` used; unable to detect undefined names
-    ""F405"",   # may be undefined, or defined from star imports
-    ""F821"",   # Undefined name
-    ""F841"",   # Local variable is assigned to but never used
-    ""UP015"",  # Unnecessary mode argument
-    ""UP031"",  # TODO: Use format specifiers instead of percent format
+    ""B006"",    # Do not use mutable data structures for argument defaults
+    ""B007"",    # Loop control variable not used within loop body
+    ""B011"",    # Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
+    ""B023"",    # Function definition does not bind loop variable
+    ""B028"",    # No explicit `stacklevel` keyword argument found
+    ""B904"",    # Within an `except` clause distinguish raised exceptions from errors in exception handling
+    ""B905"",    #`zip()` without an explicit `strict=` parameter
+    ""C408"",    # Unnecessary `dict()` call (rewrite as a literal)
+    ""ISC002"",  # Implicitly concatenated string literals over multiple lines
+    ""PIE790"",  # Unnecessary `pass` statement
+    ""PD901"",   # Avoid using the generic variable name `df` for DataFrames
+    ""PERF401"", # Use a list comprehension to create a transformed list
+    ""E241"",    # Multiple spaces after comma
+    ""E265"",    # Block comment should start with `# `
+    ""E266"",    # Too many leading `#` before block comment
+    ""E302"",    # TODO: Expected 2 blank lines, found 1
+    ""E402"",    # Module level import not at top of file
+    ""E712"",    # Avoid equality comparisons to `True` or `False`
+    ""E721"",    # TODO: Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance check
+    ""E731"",    # Do not assign a `lambda` expression, use a `def`
+    ""E741"",    # Ambiguous variable name
+    ""F403"",    # `from ... import *` used; unable to detect undefined names
+    ""F405"",    # may be undefined, or defined from star imports
+    ""F821"",    # Undefined name
+    ""F841"",    # Local variable is assigned to but never used
+    ""UP015"" ,  # Unnecessary mode argument
+    ""UP031"",   # TODO: Use format specifiers instead of percent format
 ]
 
 [lint.per-file-ignores]
","Left out because I seem to recall maintainers don't like it:
* [manual-list-comprehension (PERF401)](https://docs.astral.sh/ruff/rules/manual-list-comprehension/#manual-list-comprehension-perf401)"
django/django,18861,"diff --git a/docs/intro/tutorial07.txt b/docs/intro/tutorial07.txt
index a8d5e61b8177..a5ee096bf497 100644
--- a/docs/intro/tutorial07.txt
+++ b/docs/intro/tutorial07.txt
@@ -311,8 +311,8 @@ Templates can live anywhere on your filesystem that Django can access. (Django
 runs as whatever user your server runs.) However, keeping your templates within
 the project is a good convention to follow.
 
-Open your settings file (:file:`mysite/settings.py`, remember) and add a
-:setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:
+Open your settings file (:file:`mysite/settings.py`, remember) and make note
+of the :setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:
 
 .. code-block:: python
     :caption: ``mysite/settings.py``
","#### Trac ticket number
N/A

#### Branch description
This PR addresses a minor error in the ""Customize the admin look and feel"" section of the documentation.
* By following the directions up to this point, the reader will already have the correct entry in their settings.py file.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19292,"diff --git a/django/template/base.py b/django/template/base.py
index e586a2799176..e7b853e02f45 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -39,7 +39,7 @@
 >>> s = '<html>{% if test %}<h1>{{ varvalue }}</h1>{% endif %}</html>'
 >>> t = template.Template(s)
 
-(t is now a compiled template, and its render() method can be called multiple
+(It is now a compiled template, and its render() method can be called multiple
 times with multiple contexts)
 
 >>> c = template.Context({'test':True, 'varvalue': 'Hello'})
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-N/A

#### Branch description
Fixed a typo
#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19282,"diff --git a/django/views/context.py b/django/views/context.py
new file mode 100644
index 000000000000..76fb110b6ace
--- /dev/null
+++ b/django/views/context.py
@@ -0,0 +1,9 @@
+def get_context():
+
+    return {
+        ""message"": ""Hell this is Bhupesh Panwar"",
+        ""message1"": ""this is Bhupesh Panwar"",
+    }
+
+
+# for example this is an context( this is an suggestion fix).
diff --git a/django/views/debug.py b/django/views/debug.py
index 425ad296b24b..c657917e6c12 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -18,6 +18,7 @@
 from django.utils.module_loading import import_string
 from django.utils.regex_helper import _lazy_re_compile
 from django.utils.version import get_docs_version
+from django.views.context import get_context  # importing context
 from django.views.decorators.debug import coroutine_functions_to_sensitive_variables
 
 # Minimal Django templates engine to render the error templates
@@ -391,6 +392,7 @@ def get_traceback_data(self):
             ""request_meta"": self.filter.get_safe_request_meta(self.request),
             ""request_COOKIES_items"": self.filter.get_safe_cookies(self.request).items(),
             ""user_str"": user_str,
+            ""context"": get_context(),  # storing the dictionary with name context
             ""filtered_POST_items"": list(
                 self.filter.get_post_parameters(self.request).items()
             ),
@@ -425,7 +427,9 @@ def get_traceback_html(self):
         """"""Return HTML version of debug 500 HTTP error page.""""""
         with self.html_template_path.open(encoding=""utf-8"") as fh:
             t = DEBUG_ENGINE.from_string(fh.read())
-        c = Context(self.get_traceback_data(), use_l10n=False)
+        c = Context(
+            self.get_traceback_data(), use_l10n=False
+        )  # these stored context  will be used through this
         return t.render(c)
 
     def get_traceback_text(self):
diff --git a/django/views/templates/technical_500.html b/django/views/templates/technical_500.html
index a2fc8415f56d..0cacae8803a7 100644
--- a/django/views/templates/technical_500.html
+++ b/django/views/templates/technical_500.html
@@ -217,6 +217,9 @@ <h2>Traceback{% if not is_email %} <span class=""commands""><a href=""#"" role=""butt
   </h2>
   <div id=""browserTraceback"">
     <ul class=""traceback"">
+      {% for key,value in context.items%}
+      {{ key }}:{{ value }} <!-- using for loop for each entries in context-->
+      {%  endfor %}
       {% for frame in frames %}
         {% ifchanged frame.exc_cause %}{% if frame.exc_cause %}
           <li class=""cause""><h3>
","####  Issue 29446


ticket-29446

template context issue

I have implemented a  fix by creating a context file. I then imported this context into debug.py and stored it in a dictionary (c). After that, I made some modifications to the 500.html error page.
I understand that the changes should allow us to retrieve the context from the user view, but I found multiple approaches online and am unsure which one is best.
Previously, I had  closed my pr  due to ESLint errors(during precommit). I have now created a new branch and submitted a fresh pull request.
"
django/django,18469,"diff --git a/django/utils/html.py b/django/utils/html.py
index 154c820d3431..3ad920aca029 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -4,6 +4,7 @@
 import json
 import re
 import warnings
+from collections.abc import Mapping
 from html.parser import HTMLParser
 from urllib.parse import parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit
 
@@ -155,7 +156,12 @@ def format_html_join(sep, format_string, args_generator):
     """"""
     return mark_safe(
         conditional_escape(sep).join(
-            format_html(format_string, *args) for args in args_generator
+            (
+                format_html(format_string, **args)
+                if isinstance(args, Mapping)
+                else format_html(format_string, *args)
+            )
+            for args in args_generator
         )
     )
 
diff --git a/docs/ref/utils.txt b/docs/ref/utils.txt
index d6c70a9bb016..33e0fceadf5c 100644
--- a/docs/ref/utils.txt
+++ b/docs/ref/utils.txt
@@ -699,10 +699,29 @@ escaping HTML.
     joined using ``sep``. ``sep`` is also passed through
     :func:`conditional_escape`.
 
-    ``args_generator`` should be an iterator that returns the sequence of
-    ``args`` that will be passed to :func:`format_html`. For example::
+    ``args_generator`` should be an iterator that yields arguments to pass to
+    :func:`format_html`, either sequences of positional arguments or mappings of
+    keyword arguments.
 
-        format_html_join(""\n"", ""<li>{} {}</li>"", ((u.first_name, u.last_name) for u in users))
+    For example, tuples can be used for positional arguments::
+
+        format_html_join(
+            ""\n"",
+            ""<li>{} {}</li>"",
+            ((u.first_name, u.last_name) for u in users),
+        )
+
+    Or dictionaries can be used for keyword arguments::
+
+        format_html_join(
+            ""\n"",
+            '<li data-id=""{id}"">{id} {title}</li>',
+            ({""id"": b.id, ""title"": b.title} for b in books),
+        )
+
+    .. versionchanged:: 5.2
+
+        Support for mappings in ``args_generator`` was added.
 
 .. function:: json_script(value, element_id=None, encoder=None)
 
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index ccd79bcd484d..871aa1159951 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -267,6 +267,10 @@ Utilities
   values. This aligns with the :py:class:`str` addition behavior and allows
   ``__radd__`` to be used if available.
 
+* :func:`~django.utils.html.format_html_join` now supports taking an iterable
+  of mappings, passing their contents as keyword arguments to
+  :func:`~django.utils.html.format_html`.
+
 Validators
 ~~~~~~~~~~
 
diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py
index 82dbd58f1279..f6373e304896 100644
--- a/tests/utils_tests/test_html.py
+++ b/tests/utils_tests/test_html.py
@@ -10,6 +10,7 @@
     escape,
     escapejs,
     format_html,
+    format_html_join,
     html_safe,
     json_script,
     linebreaks,
@@ -75,6 +76,26 @@ def test_format_html_no_params(self):
             name = ""Adam""
             self.assertEqual(format_html(f""<i>{name}</i>""), ""<i>Adam</i>"")
 
+    def test_format_html_join_with_positional_arguments(self):
+        self.assertEqual(
+            format_html_join(
+                ""\n"",
+                ""<li>{}) {}</li>"",
+                [(1, ""Emma""), (2, ""Matilda"")],
+            ),
+            ""<li>1) Emma</li>\n<li>2) Matilda</li>"",
+        )
+
+    def test_format_html_join_with_keyword_arguments(self):
+        self.assertEqual(
+            format_html_join(
+                ""\n"",
+                ""<li>{id}) {text}</li>"",
+                [{""id"": 1, ""text"": ""Emma""}, {""id"": 2, ""text"": ""Matilda""}],
+            ),
+            ""<li>1) Emma</li>\n<li>2) Matilda</li>"",
+        )
+
     def test_linebreaks(self):
         items = (
             (""para1\n\npara2\r\rpara3"", ""<p>para1</p>\n\n<p>para2</p>\n\n<p>para3</p>""),
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

[ticket-35668](https://code.djangoproject.com/ticket/35668)

# Branch description
Added support for dict-like objects for `format_html_join` so that it can be used with named arguments. The provided args must be either all named or all positional. Not sure if we should any docs, but I added some tests.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18253,"diff --git a/docs/intro/tutorial02.txt b/docs/intro/tutorial02.txt
index 3cda0d38d6bc..d43c82c5d2fe 100644
--- a/docs/intro/tutorial02.txt
+++ b/docs/intro/tutorial02.txt
@@ -17,48 +17,15 @@ Database setup
 Now, open up :file:`mysite/settings.py`. It's a normal Python module with
 module-level variables representing Django settings.
 
-By default, the configuration uses SQLite. If you're new to databases, or
-you're just interested in trying Django, this is the easiest choice. SQLite is
-included in Python, so you won't need to install anything else to support your
-database. When starting your first real project, however, you may want to use a
-more scalable database like PostgreSQL, to avoid database-switching headaches
-down the road.
-
-If you wish to use another database, install the appropriate :ref:`database
-bindings <database-installation>` and change the following keys in the
-:setting:`DATABASES` ``'default'`` item to match your database connection
-settings:
-
-* :setting:`ENGINE <DATABASE-ENGINE>` -- Either
-  ``'django.db.backends.sqlite3'``,
-  ``'django.db.backends.postgresql'``,
-  ``'django.db.backends.mysql'``, or
-  ``'django.db.backends.oracle'``. Other backends are :ref:`also available
-  <third-party-notes>`.
-
-* :setting:`NAME` -- The name of your database. If you're using SQLite, the
-  database will be a file on your computer; in that case, :setting:`NAME`
-  should be the full absolute path, including filename, of that file. The
-  default value, ``BASE_DIR / 'db.sqlite3'``, will store the file in your
-  project directory.
-
-If you are not using SQLite as your database, additional settings such as
-:setting:`USER`, :setting:`PASSWORD`, and :setting:`HOST` must be added.
-For more details, see the reference documentation for :setting:`DATABASES`.
-
-.. admonition:: For databases other than SQLite
-
-    If you're using a database besides SQLite, make sure you've created a
-    database by this point. Do that with ""``CREATE DATABASE database_name;``""
-    within your database's interactive prompt.
-
-    Also make sure that the database user provided in :file:`mysite/settings.py`
-    has ""create database"" privileges. This allows automatic creation of a
-    :ref:`test database <the-test-database>` which will be needed in a later
-    tutorial.
-
-    If you're using SQLite, you don't need to create anything beforehand - the
-    database file will be created automatically when it is needed.
+By default, the :setting:`DATABASES` configuration uses SQLite. If you're new
+to databases, or you're just interested in trying Django, this is the easiest
+choice. SQLite is included in Python, so you won't need to install anything
+else to support your database. When starting your first real project, however,
+you may want to use a more scalable database like PostgreSQL, to avoid
+database-switching headaches down the road.
+
+If you wish to use another database, see :ref:`details to customize and get
+your database running <database-installation>`.
 
 While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to
 your time zone.
diff --git a/docs/topics/install.txt b/docs/topics/install.txt
index e93a6e0d54a5..5200b6b80b95 100644
--- a/docs/topics/install.txt
+++ b/docs/topics/install.txt
@@ -76,8 +76,8 @@ In addition to the officially supported databases, there are :ref:`backends
 provided by 3rd parties <third-party-notes>` that allow you to use other
 databases with Django.
 
-In addition to a database backend, you'll need to make sure your Python
-database bindings are installed.
+To use another database other than SQLite, you'll need to make sure that the
+appropriate Python database bindings are installed:
 
 * If you're using PostgreSQL, you'll need the `psycopg`_ or `psycopg2`_
   package. Refer to the :ref:`PostgreSQL notes <postgresql-notes>` for further
@@ -97,6 +97,33 @@ database bindings are installed.
 * If you're using an unofficial 3rd party backend, please consult the
   documentation provided for any additional requirements.
 
+And ensure that the following keys in the ``'default'`` item of the
+:setting:`DATABASES` dictionary match your database connection settings:
+
+* :setting:`ENGINE <DATABASE-ENGINE>` -- Either
+  ``'django.db.backends.sqlite3'``,
+  ``'django.db.backends.postgresql'``,
+  ``'django.db.backends.mysql'``, or
+  ``'django.db.backends.oracle'``. Other backends are :ref:`also available
+  <third-party-notes>`.
+
+* :setting:`NAME` -- The name of your database. If you’re using SQLite, the
+  database will be a file on your computer. In that case, ``NAME`` should be
+  the full absolute path, including the filename of that file. You don’t need
+  to create anything beforehand; the database file will be created
+  automatically when needed. The default value, ``BASE_DIR / 'db.sqlite3'``,
+  will store the file in your project directory.
+
+.. admonition:: For databases other than SQLite
+
+    If you are not using SQLite as your database, additional settings such as
+    :setting:`USER`, :setting:`PASSWORD`, and :setting:`HOST` must be added.
+    For more details, see the reference documentation for :setting:`DATABASES`.
+
+    Also, make sure that you've created the database by this point. Do that
+    with ""``CREATE DATABASE database_name;``"" within your database's
+    interactive prompt.
+
 If you plan to use Django's ``manage.py migrate`` command to automatically
 create database tables for your models (after first installing Django and
 creating a project), you'll need to ensure that Django has permission to create
","# Trac ticket number
N/A

# Branch description
I removed some unnecessary text about setting up a different database than the default SQLite to prevent overwhelming new Django users. This information can be found in more relevant parts of the documentation when the user is ready to experiment with different databases.
"
django/django,18503,"diff --git a/docs/topics/auth/default.txt b/docs/topics/auth/default.txt
index a81de8f2cc42..3ea21fac9141 100644
--- a/docs/topics/auth/default.txt
+++ b/docs/topics/auth/default.txt
@@ -1708,6 +1708,18 @@ provides several built-in forms located in :mod:`django.contrib.auth.forms`:
                             code=""no_b_users"",
                         )
 
+.. class:: BaseUserCreationForm
+
+    A :class:`~django.forms.ModelForm` for creating a new user. This is the
+    recommended base class if you need to customize the user creation form.
+
+    It has three fields: ``username`` (from the user model), ``password1``,
+    and ``password2``. It verifies that ``password1`` and ``password2`` match,
+    validates the password using
+    :func:`~django.contrib.auth.password_validation.validate_password`, and
+    sets the user's password using
+    :meth:`~django.contrib.auth.models.User.set_password()`.
+
 .. class:: PasswordChangeForm
 
     A form for allowing a user to change their password.
@@ -1747,18 +1759,6 @@ provides several built-in forms located in :mod:`django.contrib.auth.forms`:
     A form used in the admin interface to change a user's information and
     permissions.
 
-.. class:: BaseUserCreationForm
-
-    A :class:`~django.forms.ModelForm` for creating a new user. This is the
-    recommended base class if you need to customize the user creation form.
-
-    It has three fields: ``username`` (from the user model), ``password1``,
-    and ``password2``. It verifies that ``password1`` and ``password2`` match,
-    validates the password using
-    :func:`~django.contrib.auth.password_validation.validate_password`, and
-    sets the user's password using
-    :meth:`~django.contrib.auth.models.User.set_password()`.
-
 .. class:: UserCreationForm
 
     Inherits from :class:`BaseUserCreationForm`. To help prevent confusion with
","#### Branch description
This is a follow up from [this review comment](https://github.com/django/django/pull/18484#discussion_r1719888193)  from @sarahboyce.

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
"
django/django,18870,"diff --git a/django/contrib/auth/password_validation.py b/django/contrib/auth/password_validation.py
index d24e69e0ced5..5b660492e023 100644
--- a/django/contrib/auth/password_validation.py
+++ b/django/contrib/auth/password_validation.py
@@ -104,6 +104,9 @@ class MinimumLengthValidator:
     def __init__(self, min_length=8):
         self.min_length = min_length
 
+    def __call__(self, *args, **kwargs):
+        return self.validate(*args, kwargs)
+
     def validate(self, password, user=None):
         if len(password) < self.min_length:
             raise ValidationError(self.get_error_message(), code=""password_too_short"")
@@ -175,6 +178,9 @@ def __init__(self, user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7):
             raise ValueError(""max_similarity must be at least 0.1"")
         self.max_similarity = max_similarity
 
+    def __call__(self, *args, **kwargs):
+        return self.validate(*args, **kwargs)
+
     def validate(self, password, user=None):
         if not user:
             return
@@ -241,6 +247,9 @@ def __init__(self, password_list_path=DEFAULT_PASSWORD_LIST_PATH):
             with open(password_list_path) as f:
                 self.passwords = {x.strip() for x in f}
 
+    def __call__(self, *args, **kwargs):
+        return self.validate(*args, **kwargs)
+
     def validate(self, password, user=None):
         if password.lower().strip() in self.passwords:
             raise ValidationError(
@@ -260,6 +269,9 @@ class NumericPasswordValidator:
     Validate that the password is not entirely numeric.
     """"""
 
+    def __call__(self, *args, **kwargs):
+        return self.validate(*args, **kwargs)
+
     def validate(self, password, user=None):
         if password.isdigit():
             raise ValidationError(
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 7af0b955f672..799fb4db851d 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -91,6 +91,10 @@ Minor features
   now have a new method ``get_error_message()``, which can be overridden in
   subclasses to customize the error messages.
 
+* The :ref:`password validator classes <included-password-validators>`
+  now have a new method ``__call__()``, calling the password validator class
+  object will perform ``validate()`` method.
+
 :mod:`django.contrib.contenttypes`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py
index d7e49689512d..14d999ccf443 100644
--- a/tests/auth_tests/test_validators.py
+++ b/tests/auth_tests/test_validators.py
@@ -158,6 +158,19 @@ def get_error_message(self):
         with self.assertRaisesMessage(ValidationError, expected_error % 3) as cm:
             CustomMinimumLengthValidator(min_length=3).validate(""12"")
 
+    def test_callable_validate(self):
+        expected_error = (
+            ""This password is too short. It must contain at least %d characters.""
+        )
+
+        validator = MinimumLengthValidator()
+        self.assertIsNone(validator(""12345678""))
+
+        with self.assertRaises(ValidationError) as cm:
+            validator(""1234567"")
+        self.assertEqual(cm.exception.messages, [expected_error % 8])
+        self.assertEqual(cm.exception.error_list[0].code, ""password_too_short"")
+
 
 class UserAttributeSimilarityValidatorTest(TestCase):
     def test_validate(self):
@@ -263,6 +276,24 @@ def get_error_message(self):
         with self.assertRaisesMessage(ValidationError, expected_error):
             CustomUserAttributeSimilarityValidator().validate(""testclient"", user=user)
 
+    def test_callable_validate(self):
+        user = User.objects.create_user(
+            username=""testclient"",
+            password=""password"",
+            email=""testclient@example.com"",
+            first_name=""Test"",
+            last_name=""Client"",
+        )
+        expected_error = ""The password is too similar to the %s.""
+
+        validator = UserAttributeSimilarityValidator()
+        self.assertIsNone(validator(""testclient""))
+
+        with self.assertRaises(ValidationError) as cm:
+            validator(""testclient"", user=user)
+        self.assertEqual(cm.exception.messages, [expected_error % ""username""])
+        self.assertEqual(cm.exception.error_list[0].code, ""password_too_similar"")
+
 
 class CommonPasswordValidatorTest(SimpleTestCase):
     def test_validate(self):
@@ -307,6 +338,15 @@ def get_error_message(self):
         with self.assertRaisesMessage(ValidationError, expected_error):
             CustomCommonPasswordValidator().validate(""godzilla"")
 
+    def test_callable_validate(self):
+        expected_error = ""This password is too common.""
+        validator = CommonPasswordValidator()
+        self.assertIsNone(validator(""a-safe-password""))
+
+        with self.assertRaises(ValidationError) as cm:
+            validator(""godzilla"")
+        self.assertEqual(cm.exception.messages, [expected_error])
+
 
 class NumericPasswordValidatorTest(SimpleTestCase):
     def test_validate(self):
@@ -334,6 +374,16 @@ def get_error_message(self):
         with self.assertRaisesMessage(ValidationError, expected_error):
             CustomNumericPasswordValidator().validate(""42424242"")
 
+    def test_callable_validate(self):
+        expected_error = ""This password is entirely numeric.""
+        validator = NumericPasswordValidator()
+        self.assertIsNone(validator(""a-safe-password""))
+
+        with self.assertRaises(ValidationError) as cm:
+            validator(""42424242"")
+        self.assertEqual(cm.exception.messages, [expected_error])
+        self.assertEqual(cm.exception.error_list[0].code, ""password_entirely_numeric"")
+
 
 class UsernameValidatorsTests(SimpleTestCase):
     def test_unicode_validator(self):
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35693

#### Branch description
[Continue @iamkorniichuk's PR](https://github.com/django/django/pull/18481)
Implemented a `__call__`magic method to enable password validators to perform validate through `__call__`.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
numpy/numpy,29118,"diff --git a/tools/wheels/LICENSE_linux.txt b/tools/wheels/LICENSE_linux.txt
index 9e2d9053b8a7..db488c6cff47 100644
--- a/tools/wheels/LICENSE_linux.txt
+++ b/tools/wheels/LICENSE_linux.txt
@@ -44,7 +44,7 @@ Name: LAPACK
 Files: numpy.libs/libscipy_openblas*.so
 Description: bundled in OpenBLAS
 Availability: https://github.com/OpenMathLib/OpenBLAS/
-License: BSD-3-Clause-Attribution
+License: BSD-3-Clause-Open-MPI
   Copyright (c) 1992-2013 The University of Tennessee and The University
                           of Tennessee Research Foundation.  All rights
                           reserved.
@@ -99,7 +99,7 @@ Name: GCC runtime library
 Files: numpy.libs/libgfortran*.so
 Description: dynamically linked to files compiled with gcc
 Availability: https://gcc.gnu.org/git/?p=gcc.git;a=tree;f=libgfortran
-License: GPL-3.0-with-GCC-exception
+License: GPL-3.0-or-later WITH GCC-exception-3.1
   Copyright (C) 2002-2017 Free Software Foundation, Inc.
 
   Libgfortran is free software; you can redistribute it and/or modify
diff --git a/tools/wheels/LICENSE_osx.txt b/tools/wheels/LICENSE_osx.txt
index 7ef2e381874e..5cea18441b35 100644
--- a/tools/wheels/LICENSE_osx.txt
+++ b/tools/wheels/LICENSE_osx.txt
@@ -44,7 +44,7 @@ Name: LAPACK
 Files: numpy/.dylibs/libscipy_openblas*.so
 Description: bundled in OpenBLAS
 Availability: https://github.com/OpenMathLib/OpenBLAS/
-License: BSD-3-Clause-Attribution
+License: BSD-3-Clause-Open-MPI
   Copyright (c) 1992-2013 The University of Tennessee and The University
                           of Tennessee Research Foundation.  All rights
                           reserved.
@@ -99,7 +99,7 @@ Name: GCC runtime library
 Files: numpy/.dylibs/libgfortran*, numpy/.dylibs/libgcc*
 Description: dynamically linked to files compiled with gcc
 Availability: https://gcc.gnu.org/git/?p=gcc.git;a=tree;f=libgfortran
-License: GPL-3.0-with-GCC-exception
+License: GPL-3.0-or-later WITH GCC-exception-3.1
   Copyright (C) 2002-2017 Free Software Foundation, Inc.
 
   Libgfortran is free software; you can redistribute it and/or modify
diff --git a/tools/wheels/LICENSE_win32.txt b/tools/wheels/LICENSE_win32.txt
index c8277e7710a2..aed96845583b 100644
--- a/tools/wheels/LICENSE_win32.txt
+++ b/tools/wheels/LICENSE_win32.txt
@@ -44,7 +44,7 @@ Name: LAPACK
 Files: numpy.libs\libscipy_openblas*.dll
 Description: bundled in OpenBLAS
 Availability: https://github.com/OpenMathLib/OpenBLAS/
-License: BSD-3-Clause-Attribution
+License: BSD-3-Clause-Open-MPI
   Copyright (c) 1992-2013 The University of Tennessee and The University
                           of Tennessee Research Foundation.  All rights
                           reserved.
@@ -99,7 +99,7 @@ Name: GCC runtime library
 Files: numpy.libs\libscipy_openblas*.dll
 Description: statically linked to files compiled with gcc
 Availability: https://gcc.gnu.org/git/?p=gcc.git;a=tree;f=libgfortran
-License: GPL-3.0-with-GCC-exception
+License: GPL-3.0-or-later WITH GCC-exception-3.1
   Copyright (C) 2002-2017 Free Software Foundation, Inc.
 
   Libgfortran is free software; you can redistribute it and/or modify
","Backport of #29111.

See https://github.com/scipy/scipy/issues/23061 for details.

[skip ci]

<!--         ----------------------------------------------------------------
                MAKE SURE YOUR PR GETS THE ATTENTION IT DESERVES!
                ----------------------------------------------------------------

*  FORMAT IT RIGHT:
      https://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message

*  IF IT'S A NEW FEATURE OR API CHANGE, TEST THE WATERS:
      https://www.numpy.org/devdocs/dev/development_workflow.html#get-the-mailing-list-s-opinion

*  HIT ALL THE GUIDELINES:
      https://numpy.org/devdocs/dev/index.html#guidelines

*  WHAT TO DO IF WE HAVEN'T GOTTEN BACK TO YOU:
      https://www.numpy.org/devdocs/dev/development_workflow.html#getting-your-pr-reviewed
-->
"
numpy/numpy,29097,"diff --git a/numpy/typing/tests/data/mypy.ini b/numpy/typing/tests/data/mypy.ini
index bca203260efa..4aa465ae087b 100644
--- a/numpy/typing/tests/data/mypy.ini
+++ b/numpy/typing/tests/data/mypy.ini
@@ -1,9 +1,8 @@
 [mypy]
+strict = True
 enable_error_code = deprecated, ignore-without-code, truthy-bool
-strict_bytes = True
-warn_unused_ignores = True
-implicit_reexport = False
 disallow_any_unimported = True
-disallow_any_generics = True
+allow_redefinition_new = True
+local_partial_types = True
 show_absolute_path = True
 pretty = True
diff --git a/numpy/typing/tests/data/pass/ma.py b/numpy/typing/tests/data/pass/ma.py
index e7915a583210..b9be2b2e4384 100644
--- a/numpy/typing/tests/data/pass/ma.py
+++ b/numpy/typing/tests/data/pass/ma.py
@@ -7,6 +7,8 @@
 _ScalarT = TypeVar(""_ScalarT"", bound=np.generic)
 MaskedArray: TypeAlias = np.ma.MaskedArray[_Shape, np.dtype[_ScalarT]]
 
+# mypy: disable-error-code=no-untyped-call
+
 MAR_b: MaskedArray[np.bool] = np.ma.MaskedArray([True])
 MAR_u: MaskedArray[np.uint32] = np.ma.MaskedArray([1], dtype=np.uint32)
 MAR_i: MaskedArray[np.int64] = np.ma.MaskedArray([1])
diff --git a/numpy/typing/tests/data/reveal/nbit_base_example.pyi b/numpy/typing/tests/data/reveal/nbit_base_example.pyi
index 33229660b6f8..66470b95bf15 100644
--- a/numpy/typing/tests/data/reveal/nbit_base_example.pyi
+++ b/numpy/typing/tests/data/reveal/nbit_base_example.pyi
@@ -7,8 +7,7 @@ from numpy._typing import _32Bit, _64Bit
 T1 = TypeVar(""T1"", bound=npt.NBitBase)  # type: ignore[deprecated]  # pyright: ignore[reportDeprecated]
 T2 = TypeVar(""T2"", bound=npt.NBitBase)  # type: ignore[deprecated]  # pyright: ignore[reportDeprecated]
 
-def add(a: np.floating[T1], b: np.integer[T2]) -> np.floating[T1 | T2]:
-    return a + b
+def add(a: np.floating[T1], b: np.integer[T2]) -> np.floating[T1 | T2]: ...
 
 i8: np.int64
 i4: np.int32
","""Strict mode"" is a combo-package-deal of mypy flags. In `mypy --help` it explains it as:

> Strict mode; enables the following flags: --warn-unused-configs, --disallow-any-generics, --disallow-subclassing-any, --disallow-untyped-calls, --disallow-untyped-defs, --disallow-incomplete-defs, --check-untyped-defs, --disallow-untyped-decorators, --warn-redundant-casts, --warn-unused-ignores, --warn-return-any, --no-implicit-reexport, --strict-equality, --strict-bytes, --extra-checks

This also enables `local_partial_types`, which will be enabled by default in a future mypy release. See the [docs](https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-local-partial-types) for the details.

And last, but most certainly not least, is `allow_redefinition_new`. In short, it is a fix for #27957. See the [docs](https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-allow-redefinition-new) for details.

"
django/django,19541,"diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py
index 480fac67847..a9025bddccd 100644
--- a/tests/queries/test_bulk_update.py
+++ b/tests/queries/test_bulk_update.py
@@ -3,7 +3,7 @@
 
 from django.core.exceptions import FieldDoesNotExist
 from django.db import connection
-from django.db.models import F
+from django.db.models import F, IntegerField, Value
 from django.db.models.functions import Coalesce, Lower
 from django.db.utils import IntegrityError
 from django.test import TestCase, override_settings, skipUnlessDBFeature
@@ -305,7 +305,11 @@ def test_json_field_sql_null(self):
         obj = JSONFieldNullable.objects.create(json_field={})
         test_cases = [
             (""direct_none_assignment"", None),
-            (""expression_none_assignment"", Coalesce(None, None)),
+            (""value_none_assignment"", Value(None)),
+            (
+                ""expression_none_assignment"",
+                Coalesce(None, None, output_field=IntegerField()),
+            ),
         ]
         for label, value in test_cases:
             with self.subTest(case=label):
","Follow up to c1fa3fdd040718356e5a3b9a0fe699d73f47a940.

Logs:
```
Traceback (most recent call last):
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/tests/queries/test_bulk_update.py"", line 313, in test_json_field_sql_null
    JSONFieldNullable.objects.bulk_update([obj], fields=[""json_field""])
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/manager.py"", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/query.py"", line 953, in bulk_update
    rows_updated += queryset.filter(pk__in=pks).update(**update_kwargs)
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/query.py"", line 1292, in update
    rows = query.get_compiler(self.db).execute_sql(ROW_COUNT)
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/sql/compiler.py"", line 2102, in execute_sql
    row_count = super().execute_sql(result_type)
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/sql/compiler.py"", line 1610, in execute_sql
    sql, params = self.as_sql()
                  ~~~~~~~~~~~^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/sql/compiler.py"", line 2074, in as_sql
    sql, params = self.compile(val)
                  ~~~~~~~~~~~~^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/sql/compiler.py"", line 577, in compile
    sql, params = node.as_sql(self, self.connection)
                  ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/expressions.py"", line 1710, in as_sql
    case_sql, case_params = compiler.compile(case)
                            ~~~~~~~~~~~~~~~~^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/sql/compiler.py"", line 577, in compile
    sql, params = node.as_sql(self, self.connection)
                  ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/expressions.py"", line 1633, in as_sql
    result_sql, result_params = compiler.compile(self.result)
                                ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/sql/compiler.py"", line 575, in compile
    sql, params = vendor_impl(self, self.connection)
                  ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/functions/comparison.py"", line 91, in as_oracle
    if self.output_field.get_internal_type() == ""TextField"":
       ^^^^^^^^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/utils/functional.py"", line 47, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
                                         ~~~~~~~~~^^^^^^^^^^
  File ""/home/jenkins/workspace/django-oracle/database/oracle19/label/oracle/python/python3.13/django/db/models/expressions.py"", line 329, in output_field
    raise OutputFieldIsNoneError(
        ""Cannot resolve expression type, unknown output_field""
    )
django.db.models.expressions.OutputFieldIsNoneError: Cannot resolve expression type, unknown output_field
```"
django/django,18819,"diff --git a/docs/topics/performance.txt b/docs/topics/performance.txt
index cedd824e300f..4e23d1b6bc21 100644
--- a/docs/topics/performance.txt
+++ b/docs/topics/performance.txt
@@ -137,7 +137,7 @@ one that it is comfortable to code for.
 
     Firstly, in a real-life case you need to consider what is happening before
     and after your count to work out what's an optimal way of doing it *in that
-    particular context*. The database optimization documents describes :ref:`a
+    particular context*. The database optimization document describes :ref:`a
     case where counting in the template would be better
     <overuse_of_count_and_exists>`.
 
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

N/A

#### Branch description
When reading the docs, I noticed a confusing one-character typo/grammatical error in [the topic page on optimizing performance](https://docs.djangoproject.com/en/5.1/topics/performance/). This patch fixes that error.
(@felixxm Thank you for the suggested change to #18812 -- here's a new patch!)

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18888,"diff --git a/django/core/management/commands/makemessages.py b/django/core/management/commands/makemessages.py
index 076667d41a8c..23ad424c5c31 100644
--- a/django/core/management/commands/makemessages.py
+++ b/django/core/management/commands/makemessages.py
@@ -40,7 +40,7 @@ def check_programs(*programs):
 
 
 def is_valid_locale(locale):
-    return re.match(r""^[a-z]+$"", locale) or re.match(r""^[a-z]+_[A-Z].*$"", locale)
+    return re.match(r""^[a-z]+$"", locale) or re.match(r""^[a-z]+_[A-Z0-9].*$"", locale)
 
 
 @total_ordering
diff --git a/tests/i18n/test_extraction.py b/tests/i18n/test_extraction.py
index 7aa600c4c1e2..e4a6260c336a 100644
--- a/tests/i18n/test_extraction.py
+++ b/tests/i18n/test_extraction.py
@@ -179,6 +179,15 @@ def test_valid_locale_with_country(self):
         self.assertIn(""processing locale en_GB"", out.getvalue())
         self.assertIs(Path(""locale/en_GB/LC_MESSAGES/django.po"").exists(), True)
 
+    def test_valid_locale_with_numeric_region_code(self):
+        out = StringIO()
+        management.call_command(
+            ""makemessages"", locale=[""ar_002""], stdout=out, verbosity=1
+        )
+        self.assertNotIn(""invalid locale ar_002"", out.getvalue())
+        self.assertIn(""processing locale ar_002"", out.getvalue())
+        self.assertIs(Path(""locale/ar_002/LC_MESSAGES/django.po"").exists(), True)
+
     def test_valid_locale_tachelhit_latin_morocco(self):
         out = StringIO()
         management.call_command(
","Expand `is_valid_locale` regex to include numeric region codes in `makemessages`

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35973

#### Branch description
Improve `makemessages` locale handling to correctly process locales like `es_419` to ensure comprehensive localization support. It's essential to accommodate various locale formats, including those with numeric region codes. The UN M49 standard provides a standardized numerical coding system for geographic regions, which is often used in language codes. By extending the `makemessages` command to recognize these codes, we can enhance its ability to generate accurate translation files for a wider range of locales.

Reference: https://unstats.un.org/unsd/methodology/m49/

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19390,"diff --git a/django/db/models/base.py b/django/db/models/base.py
index 51aadd935b77..90511ff4adf3 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -590,6 +590,9 @@ def __init__(self, *args, **kwargs):
         super().__init__()
         post_init.send(sender=cls, instance=self)
 
+    def __class_getitem__(cls, *args, **kwargs):
+        return cls
+
     @classmethod
     def from_db(cls, db, field_names, values):
         if len(values) != len(cls._meta.concrete_fields):
diff --git a/tests/model_meta/tests.py b/tests/model_meta/tests.py
index 93883b5cf1c3..553343ba808d 100644
--- a/tests/model_meta/tests.py
+++ b/tests/model_meta/tests.py
@@ -1,6 +1,7 @@
 from django.apps import apps
 from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
 from django.core.exceptions import FieldDoesNotExist
+from django.db import models
 from django.db.models import CharField, Field, ForeignObjectRel, ManyToManyField
 from django.db.models.options import EMPTY_RELATION_TREE, IMMUTABLE_WARNING
 from django.test import SimpleTestCase, override_settings
@@ -386,3 +387,8 @@ def test_abstract_model_not_instantiated(self):
         msg = ""Abstract models cannot be instantiated.""
         with self.assertRaisesMessage(TypeError, msg):
             AbstractPerson()
+
+
+class ClassMethodsTests(SimpleTestCase):
+    def test_model_class_getitem(self):
+        self.assertIs(models.Model[""Foo""], models.Model)
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-31223

#### Branch description

Allow using `models.Model[""Foo""]` for typecheckers.
Inspired by https://github.com/django/django/pull/15571 and https://github.com/django/django/pull/12405

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
numpy/numpy,28669,"diff --git a/doc/release/upcoming_changes/28669.new_feature.rst b/doc/release/upcoming_changes/28669.new_feature.rst
new file mode 100644
index 000000000000..2953a5123ccc
--- /dev/null
+++ b/doc/release/upcoming_changes/28669.new_feature.rst
@@ -0,0 +1,3 @@
+* The type parameter of ``np.dtype`` now defaults to ``typing.Any``.
+  This way, static type-checkers will infer ``dtype: np.dtype`` as
+  ``dtype: np.dtype[Any]``, without reporting an error.
diff --git a/numpy/__init__.pyi b/numpy/__init__.pyi
index f4ae9eed00c2..b2e95a5feccb 100644
--- a/numpy/__init__.pyi
+++ b/numpy/__init__.pyi
@@ -816,7 +816,7 @@ _2DShapeT_co = TypeVar(""_2DShapeT_co"", bound=_2D, covariant=True)
 _1NShapeT = TypeVar(""_1NShapeT"", bound=tuple[L[1], Unpack[tuple[L[1], ...]]])  # (1,) | (1, 1) | (1, 1, 1) | ...
 
 _SCT = TypeVar(""_SCT"", bound=generic)
-_SCT_co = TypeVar(""_SCT_co"", bound=generic, covariant=True)
+_SCT_co = TypeVar(""_SCT_co"", bound=generic, default=Any, covariant=True)
 _NumberT = TypeVar(""_NumberT"", bound=number[Any])
 _RealNumberT = TypeVar(""_RealNumberT"", bound=floating | integer)
 _FloatingT_co = TypeVar(""_FloatingT_co"", bound=floating[Any], default=floating[Any], covariant=True)
","<!--         ----------------------------------------------------------------
                MAKE SURE YOUR PR GETS THE ATTENTION IT DESERVES!
                ----------------------------------------------------------------

*  FORMAT IT RIGHT:
      https://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message

*  IF IT'S A NEW FEATURE OR API CHANGE, TEST THE WATERS:
      https://www.numpy.org/devdocs/dev/development_workflow.html#get-the-mailing-list-s-opinion

*  HIT ALL THE GUIDELINES:
      https://numpy.org/devdocs/dev/index.html#guidelines

*  WHAT TO DO IF WE HAVEN'T GOTTEN BACK TO YOU:
      https://www.numpy.org/devdocs/dev/development_workflow.html#getting-your-pr-reviewed
-->
"
django/django,19538,"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 93d5629ebe8c..1b241230df92 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -346,6 +346,21 @@ def reduce(self, operation, app_label):
                         },
                     ),
                 ]
+            elif isinstance(operation, AlterConstraint):
+                options_constraints = [
+                    constraint
+                    for constraint in self.options.get(""constraints"", [])
+                    if constraint.name != operation.name
+                ] + [operation.constraint]
+                return [
+                    replace(
+                        self,
+                        options={
+                            **self.options,
+                            ""constraints"": options_constraints,
+                        },
+                    ),
+                ]
             elif isinstance(operation, RemoveConstraint):
                 options_constraints = [
                     constraint
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index a871e67a4577..195a74072a56 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -1434,6 +1434,54 @@ def test_create_model_add_constraint(self):
             ],
         )
 
+    def test_create_model_alter_constraint(self):
+        original_constraint = models.CheckConstraint(
+            condition=models.Q(weight__gt=0), name=""pony_weight_gt_0""
+        )
+        altered_constraint = models.CheckConstraint(
+            condition=models.Q(weight__gt=0),
+            name=""pony_weight_gt_0"",
+            violation_error_message=""incorrect weight"",
+        )
+        self.assertOptimizesTo(
+            [
+                migrations.CreateModel(
+                    name=""Pony"",
+                    fields=[
+                        (""weight"", models.IntegerField()),
+                    ],
+                    options={
+                        ""constraints"": [
+                            original_constraint,
+                            models.UniqueConstraint(
+                                ""weight"", name=""pony_weight_unique""
+                            ),
+                        ],
+                    },
+                ),
+                migrations.AlterConstraint(
+                    ""Pony"", ""pony_weight_gt_0"", altered_constraint
+                ),
+            ],
+            [
+                migrations.CreateModel(
+                    name=""Pony"",
+                    fields=[
+                        (""weight"", models.IntegerField()),
+                    ],
+                    options={
+                        ""constraints"": [
+                            models.UniqueConstraint(
+                                ""weight"",
+                                name=""pony_weight_unique"",
+                            ),
+                            altered_constraint,
+                        ]
+                    },
+                ),
+            ],
+        )
+
     def test_create_model_remove_constraint(self):
         self.assertOptimizesTo(
             [
","ticket-35038 added optimizations to reduce `AlterConstraint` between `AddConstraint`, `AlterConstraint`, and `RemoveConstraint`, but we missed `CreateModel`."
django/django,19083,"diff --git a/docs/internals/release-process.txt b/docs/internals/release-process.txt
index a845faf33070..ec5bdd3c7a52 100644
--- a/docs/internals/release-process.txt
+++ b/docs/internals/release-process.txt
@@ -184,54 +184,68 @@ Release process
 Django uses a time-based release schedule, with feature releases every eight
 months or so.
 
-After each feature release, the release manager will announce a timeline for
-the next feature release.
+After each feature release, the release manager will publish a timeline for the
+next feature release. The timeline for an upcoming feature release can be found
+in the corresponding wiki roadmap page, e.g.
+https://code.djangoproject.com/wiki/Version6.0Roadmap.
 
-Release cycle
--------------
+Feature release schedule and stages
+-----------------------------------
 
-Each release cycle consists of three parts:
+Active development / Pre-feature freeze
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Phase one: feature proposal
-~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Work begins on the feature release ``A.B`` after the feature freeze of the
+previous release, i.e. when the ``stable/A.B-1.x`` branch is forked.
 
-The first phase of the release process will include figuring out what major
-features to include in the next version. This should include a good deal of
-preliminary work on those features -- working code trumps grand design.
+You can find the current branch under active development in the
+`Django release process
+<https://code.djangoproject.com/#Djangoreleaseprocess>`_ on Trac.
 
-Major features for an upcoming release will be added to the wiki roadmap page,
-e.g. https://code.djangoproject.com/wiki/Version1.11Roadmap.
+Feature freeze / Alpha release
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Phase two: development
-~~~~~~~~~~~~~~~~~~~~~~
+All major and minor features, including deprecations and breaking changes, must
+be merged by the feature freeze. Any features not done by this point will be
+deferred to the next feature release.
 
-The second part of the release schedule is the ""heads-down"" working period.
-Using the roadmap produced at the end of phase one, we'll all work very hard to
-get everything on it done.
+At this point, the ``stable/A.B.x`` branch will be forked from ``main``.
 
-At the end of phase two, any unfinished features will be postponed until the
-next release.
+Non-release blocking bug fix freeze / Beta release
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Phase two will culminate with an alpha release. At this point, the
-``stable/A.B.x`` branch will be forked from ``main``.
+After the alpha, all bug fixes merged in ``main`` are also backported to
+``stable/A.B.x``. Refactors are backported at the discretion of the merger.
+Mergers will be more and more conservative with backports, to avoid introducing
+regressions.
 
-Phase three: bugfixes
-~~~~~~~~~~~~~~~~~~~~~
+In parallel to this phase, ``main`` can continue to receive new features, to be
+released in the ``A.B+1`` cycle.
 
-The last part of a release cycle is spent fixing bugs -- no new features will
-be accepted during this time. We'll try to release a beta release one month
-after the alpha and a release candidate one month after the beta.
+Translation string freeze / Release candidate release
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+If there is still a consistent stream of release blockers coming in at the
+planned release candidate date, a beta 2 will be released to encourage further
+testing and the release candidate date will be pushed out ~1 month.
 
 The release candidate marks the string freeze, and it happens at least two
-weeks before the final release. After this point, new translatable strings
-must not be added.
+weeks before the final release. Translators can then submit updated
+translations for inclusion in the final release. After this point, new
+translatable strings must not be added.
+
+After the release candidate, only release blockers and documentation fixes are
+backported.
+
+Final release
+~~~~~~~~~~~~~
 
-During this phase, mergers will be more and more conservative with backports,
-to avoid introducing regressions. After the release candidate, only release
-blockers and documentation fixes should be backported.
+Ideally, the final release will ship two weeks after the last release
+candidate.
 
-In parallel to this phase, ``main`` can receive new features, to be released
-in the ``A.B+1`` cycle.
+If there are major bugs still being found 2 weeks after the release candidate,
+there will be a decision on how to proceed (likely another release candidate
+would be issued and the final release date will be pushed out).
 
 Bug-fix releases
 ----------------
","Initially this only removed the reference that upcoming major features are published on our wiki roadmap, as this has not happened for years:
```
Major features for an upcoming release will be added to the wiki roadmap page,
e.g. https://code.djangoproject.com/wiki/Version1.11Roadmap.
```

However, following feedback from Tim, this has since been updated to better reflect the current feature release process"
django/django,19069,"diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index aa67f28a79d0..7c8c015f450c 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -319,7 +319,7 @@ def last_executed_query(self, cursor, sql, params):
         # Unlike Psycopg's `query` and MySQLdb`'s `_executed`, oracledb's
         # `statement` doesn't contain the query parameters. Substitute
         # parameters manually.
-        if params:
+        if statement and params:
             if isinstance(params, (tuple, list)):
                 params = {
                     f"":arg{i}"": param for i, param in enumerate(dict.fromkeys(params))
diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index 0349e47272aa..4ba961bfc1f5 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -73,8 +73,14 @@ def test_last_executed_query_without_previous_query(self):
         last_executed_query should not raise an exception even if no previous
         query has been run.
         """"""
+        suffix = connection.features.bare_select_suffix
         with connection.cursor() as cursor:
+            if connection.vendor == ""oracle"":
+                cursor.statement = None
+            # No previous query has been run.
             connection.ops.last_executed_query(cursor, """", ())
+            # Previous query crashed.
+            connection.ops.last_executed_query(cursor, ""SELECT %s"" + suffix, (1,))
 
     def test_debug_sql(self):
         qs = Reporter.objects.filter(first_name=""test"")
","#### Trac ticket number
ticket-36111

#### Branch description
Before, `--debug-sql` crashed on Oracle if a query was prepared (with params) but failed at execution, and if no other queries had executed, i.e. if `cursor.statement` (Oracle-only attribute) was `None`.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19377,"diff --git a/docs/conf.py b/docs/conf.py
index 579e13d21edc..be79b9133c19 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -194,7 +194,7 @@ def django_release():
 intersphinx_cache_limit = 90  # days
 
 # The 'versionadded' and 'versionchanged' directives are overridden.
-suppress_warnings = [""app.add_directive""]
+suppress_warnings = [""app.add_directive"", ""epub.duplicated_toc_entry""]
 
 # -- Options for HTML output ---------------------------------------------------
 
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36320

#### Branch description
This PR adds sphinx configuration to ignore the warning that crashes the building of the ePub docs on readthedocs.org.

To test it you can run `make epub` from the `docs` directory.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19003,"diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 9db755bb8919..6fec3b91721f 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -420,3 +420,17 @@ def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):
             rhs_expr = Cast(rhs_expr, lhs_field)
 
         return lhs_expr, rhs_expr
+
+    def combine_expression(self, connector, sub_expressions):
+        if connector == ""/"":
+            return """"""
+                CAST(
+                    CAST(%s AS NUMERIC(20, 10)) /
+                    CAST(%s AS NUMERIC(20, 10))
+                AS NUMERIC(20, 10))
+            """""" % (
+                sub_expressions[0],
+                sub_expressions[1],
+            )
+
+        return super().combine_expression(connector, sub_expressions)
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 667e9f93c605..d503b294a808 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -712,6 +712,18 @@ def __repr__(self):
     def __str__(self):
         return ""{} {} {}"".format(self.lhs, self.connector, self.rhs)
 
+    def _is_integer_field(self, expr):
+        try:
+            return isinstance(expr.output_field, fields.IntegerField)
+        except AttributeError:
+            return False
+
+    def _is_duration_field(self, expr):
+        try:
+            return isinstance(expr.output_field, fields.DurationField)
+        except AttributeError:
+            return False
+
     def get_source_expressions(self):
         return [self.lhs, self.rhs]
 
@@ -746,7 +758,33 @@ def as_sql(self, compiler, connection):
         expression_params.extend(params)
         # order of precedence
         expression_wrapper = ""(%s)""
-        sql = connection.ops.combine_expression(self.connector, expressions)
+        if self.connector == ""/"":
+            is_duration = any(self._is_duration_field(e) for e in (self.lhs, self.rhs))
+            is_decimal = any(
+                isinstance(
+                    getattr(e, ""output_field"", None),
+                    (fields.DecimalField, fields.FloatField),
+                )
+                for e in (self.lhs, self.rhs)
+            )
+            is_integer = all(self._is_integer_field(e) for e in (self.lhs, self.rhs))
+            if is_duration:
+                sql = ""%s / %s"" % (expressions[0], expressions[1])
+            elif is_decimal and connection.vendor == ""sqlite"":
+                sql = ""CAST(%s AS REAL) / CAST(%s AS REAL)"" % (
+                    expressions[0],
+                    expressions[1],
+                )
+            elif is_decimal:
+                sql = connection.ops.combine_expression(self.connector, expressions)
+            elif is_integer:
+                sql = connection.ops.combine_expression(self.connector, expressions)
+            else:
+                sql = ""%s / %s"" % (expressions[0], expressions[1])
+
+        else:
+            sql = connection.ops.combine_expression(self.connector, expressions)
+
         return expression_wrapper % sql, expression_params
 
     def resolve_expression(
diff --git a/django/utils/html.py b/django/utils/html.py
index 0d107a0da9fe..49bfef0cf624 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -8,7 +8,8 @@
 from html.parser import HTMLParser
 from urllib.parse import parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit
 
-from django.core.exceptions import SuspiciousOperation
+from django.core.exceptions import SuspiciousOperation, ValidationError
+from django.core.validators import validate_email
 from django.utils.deprecation import RemovedInDjango60Warning
 from django.utils.encoding import punycode
 from django.utils.functional import Promise, cached_property, keep_lazy, keep_lazy_text
@@ -476,6 +477,10 @@ def is_email_simple(value):
         # Dot must be in p2 (e.g. example.com)
         if ""."" not in p2 or p2.startswith("".""):
             return False
+        try:
+            validate_email(value)
+        except ValidationError:
+            return False
         return True
 
 
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index af4cf01fcaad..f749d37e7153 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -1524,6 +1524,59 @@ def test_decimal_expression(self):
         n.refresh_from_db()
         self.assertEqual(n.decimal_value, Decimal(""0.1""))
 
+    def test_decimal_division_precision(self):
+        """"""Test that division with Decimal preserves numeric type and precision""""""
+        obj = Number.objects.create(integer=2)
+        qs = Number.objects.annotate(
+            ratio=ExpressionWrapper(
+                F(""integer"") / Value(3.0),
+                output_field=DecimalField(max_digits=10, decimal_places=4),
+            )
+        ).filter(pk=obj.pk)
+        self.assertAlmostEqual(
+            float(qs.get().ratio),
+            float(Decimal(""2"") / Decimal(""3"")),
+            places=4,
+            msg=""Division should preserve decimal precision"",
+        )
+
+    def test_decimal_division_types(self):
+        """"""Test division avec précision décimale""""""
+        Number.objects.all().delete()
+        for num, den, expected in [
+            (2, Decimal(""3""), ""0.6667""),
+        ]:
+            with self.subTest(num=num, den=den):
+                # print(""\n=== Test Division Décimale ==="")
+                # print(f""Numérateur: {num} ({type(num)})"")
+                # print(f""Dénominateur: {den} ({type(den)})"")
+
+                Number.objects.create(integer=num)
+
+                # Vérifier le type de champ
+                # print(f""\nType champ integer:
+                # {Number._meta.get_field('integer').__class__}"")
+
+                qs = Number.objects.annotate(
+                    ratio=ExpressionWrapper(
+                        F(""integer"") / Value(den, output_field=DecimalField()),
+                        output_field=DecimalField(max_digits=10, decimal_places=4),
+                    )
+                )
+
+                # print(f""\nRequête SQL: {qs.query}"")
+                result = qs.get()
+                # print(f""Résultat brut: {result.ratio}"")
+                # print(f""Type résultat: {type(result.ratio)}"")
+                # print(""============================\n"")
+
+                self.assertAlmostEqual(
+                    float(result.ratio),
+                    float(expected),
+                    places=4,
+                    msg=f""Divide {num} by {den} should give result: {expected}"",
+                )
+
 
 class ExpressionOperatorTests(TestCase):
     @classmethod
diff --git a/tests/test_sqlite.py b/tests/test_sqlite.py
deleted file mode 100644
index f3ccf2c02177..000000000000
--- a/tests/test_sqlite.py
+++ /dev/null
@@ -1,33 +0,0 @@
-# This is an example test settings file for use with the Django test suite.
-#
-# The 'sqlite3' backend requires only the ENGINE setting (an in-
-# memory database will be used). All other backends will require a
-# NAME and potentially authentication information. See the
-# following section in the docs for more information:
-#
-# https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/
-#
-# The different databases that Django supports behave differently in certain
-# situations, so it is recommended to run the test suite against as many
-# database backends as possible.  You may want to create a separate settings
-# file for each of the backends you test against.
-
-DATABASES = {
-    ""default"": {
-        ""ENGINE"": ""django.db.backends.sqlite3"",
-    },
-    ""other"": {
-        ""ENGINE"": ""django.db.backends.sqlite3"",
-    },
-}
-
-SECRET_KEY = ""django_tests_secret_key""
-
-# Use a fast hasher to speed up tests.
-PASSWORD_HASHERS = [
-    ""django.contrib.auth.hashers.MD5PasswordHasher"",
-]
-
-DEFAULT_AUTO_FIELD = ""django.db.models.AutoField""
-
-USE_TZ = False
diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py
index 0beaf98bff2b..341e211c968a 100644
--- a/tests/utils_tests/test_html.py
+++ b/tests/utils_tests/test_html.py
@@ -379,15 +379,9 @@ def test_urlize(self):
             (
                 # RFC 6068 requires a mailto URI to percent-encode a number of
                 # characters that can appear in <addr-spec>.
-                ""yes;this=is&a%valid!email@example.com"",
-                '<a href=""mailto:yes%3Bthis%3Dis%26a%25valid%21email@example.com""'
-                "">yes;this=is&a%valid!email@example.com</a>"",
-            ),
-            (
-                # Urlizer shouldn't urlize the ""?org"" part of this. But since
-                # it does, RFC 6068 requires percent encoding the ""?"".
-                ""test@example.com?org"",
-                '<a href=""mailto:test@example.com%3Forg"">test@example.com?org</a>',
+                ""yes+this=is&a%valid!email@example.com"",
+                '<a href=""mailto:yes%2Bthis%3Dis%26a%25valid%21email@example.com""'
+                "">yes+this=is&a%valid!email@example.com</a>"",
             ),
         )
         for value, output in tests:
@@ -407,6 +401,8 @@ def test_urlize_unchanged_inputs(self):
             ""foo@.example.com"",
             ""foo@localhost"",
             ""foo@localhost."",
+            ""test@example?;+!.com"",
+            ""email me@example.com,then I'll respond"",
             # trim_punctuation catastrophic tests
             ""("" * 100_000 + "":"" + "")"" * 100_000,
             ""("" * 100_000 + ""&:"" + "")"" * 100_000,
","36030 Trac ticket number

[ticket-36030](https://code.djangoproject.com/ticket/36030)

Fix the division operation with Decimal object which returns wrong result at least with Postgre and sqlite3

Checklist
- [x] This PR targets the main branch.
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes"
django/django,16207,"diff --git a/django/contrib/sessions/backends/signed_cookies.py b/django/contrib/sessions/backends/signed_cookies.py
index dc41c6f12b0d..9a5dd67567b9 100644
--- a/django/contrib/sessions/backends/signed_cookies.py
+++ b/django/contrib/sessions/backends/signed_cookies.py
@@ -13,9 +13,9 @@ def load(self):
             return signing.loads(
                 self.session_key,
                 serializer=self.serializer,
-                # This doesn't handle non-default expiry dates, see #19201
                 max_age=self.get_session_cookie_age(),
                 salt=""django.contrib.sessions.backends.signed_cookies"",
+                expiration_key=""_session_expiry"",
             )
         except Exception:
             # BadSignature, ValueError, or unpickling exceptions. If any of
diff --git a/django/core/signing.py b/django/core/signing.py
index b402d87b8704..ab3dfaf006f8 100644
--- a/django/core/signing.py
+++ b/django/core/signing.py
@@ -159,13 +159,16 @@ def loads(
     serializer=JSONSerializer,
     max_age=None,
     fallback_keys=None,
+    expiration_key=None,
 ):
     """"""
     Reverse of dumps(), raise BadSignature if signature fails.
 
     The serializer is expected to accept a bytestring.
     """"""
-    return TimestampSigner(key, salt=salt, fallback_keys=fallback_keys).unsign_object(
+    return TimestampSigner(
+        key, salt=salt, fallback_keys=fallback_keys, expiration_key=expiration_key
+    ).unsign_object(
         s,
         serializer=serializer,
         max_age=max_age,
@@ -255,6 +258,11 @@ def unsign_object(self, signed_obj, serializer=JSONSerializer, **kwargs):
 
 
 class TimestampSigner(Signer):
+    def __init__(self, *args, **kwargs):
+        self.expiration_key = kwargs.pop(""expiration_key"", None)
+        self.payload_timestamp = None
+        super().__init__(*args, **kwargs)
+
     def timestamp(self):
         return b62_encode(int(time.time()))
 
@@ -269,12 +277,26 @@ def unsign(self, value, max_age=None):
         """"""
         result = super().unsign(value)
         value, timestamp = result.rsplit(self.sep, 1)
-        timestamp = b62_decode(timestamp)
-        if max_age is not None:
-            if isinstance(max_age, datetime.timedelta):
-                max_age = max_age.total_seconds()
-            # Check timestamp is not older than max_age
-            age = time.time() - timestamp
-            if age > max_age:
-                raise SignatureExpired(""Signature age %s > %s seconds"" % (age, max_age))
+        self.payload_timestamp = b62_decode(timestamp)
+        self._verify_max_age(max_age)
         return value
+
+    def unsign_object(self, signed_obj, max_age=None, **kwargs):
+        if self.expiration_key is None:
+            return super().unsign_object(signed_obj, max_age=max_age, **kwargs)
+
+        # If using expiration key use it's value when present
+        value = super().unsign_object(signed_obj, **kwargs, max_age=None)
+        max_age = value.get(self.expiration_key, max_age)
+        self._verify_max_age(max_age)
+        return value
+
+    def _verify_max_age(self, max_age=None):
+        if max_age is None:
+            return
+        if isinstance(max_age, datetime.timedelta):
+            max_age = max_age.total_seconds()
+        # Check timestamp is not older than max_age
+        age = time.time() - self.payload_timestamp
+        if age > max_age:
+            raise SignatureExpired(""Signature age %s > %s seconds"" % (age, max_age))
diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py
index 96f8dbcd5b29..05ad735c9f52 100644
--- a/tests/sessions_tests/tests.py
+++ b/tests/sessions_tests/tests.py
@@ -886,11 +886,6 @@ def test_cycle(self):
         """"""
         pass
 
-    @unittest.expectedFailure
-    def test_actual_expiry(self):
-        # The cookie backend doesn't handle non-default expiry dates, see #19201
-        super().test_actual_expiry()
-
     def test_unpickling_exception(self):
         # signed_cookies backend should handle unpickle exceptions gracefully
         # by creating a new session
","https://code.djangoproject.com/ticket/27775

Until now signed cookies didn't validate custom expiry times stored in `_session_expiry`. The proposed solution introduces `expiration_key` to `TimestampSinger` and in it's presence defers the age validation to happen after payload serialization.

There was old proposal on tackling this problem - https://github.com/django/django/pull/7885 - and while it was less lines of code I've decided to go with the described approach to avoid calling `signing.loads` twice."
django/django,18806,"diff --git a/docs/howto/static-files/deployment.txt b/docs/howto/static-files/deployment.txt
index d6d1158249d4..19b7c9df826a 100644
--- a/docs/howto/static-files/deployment.txt
+++ b/docs/howto/static-files/deployment.txt
@@ -15,7 +15,7 @@ Serving static files in production
 The basic outline of putting static files into production consists of two
 steps: run the :djadmin:`collectstatic` command when static files change, then
 arrange for the collected static files directory (:setting:`STATIC_ROOT`) to be
-moved to the static file server and served. Depending the ``staticfiles``
+moved to the static file server and served. Depending on the ``staticfiles``
 :setting:`STORAGES` alias, files may need to be moved to a new location
 manually or the :func:`post_process
 <django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` method of
",Added a missing word.
django/django,18764,"diff --git a/django/core/files/images.py b/django/core/files/images.py
index 7c1532ac8fdc..1081773b1813 100644
--- a/django/core/files/images.py
+++ b/django/core/files/images.py
@@ -78,6 +78,10 @@ def get_image_dimensions(file_or_path, close=False):
                 # e.g. ""RuntimeError: could not create decoder object"" for
                 # WebP files. A different chunk_size may work.
                 pass
+            except ValueError:
+                # e.g.: ValueError('Invalid dimensions') because PIL
+                # needs more data from a TIFF file.
+                pass
             if p.image:
                 return p.image.size
             chunk_size *= 2
","Django's django.core.files.images.get_image_dimensions() feeds PIL with chunks to get the image size. Pillow v11 adds ""raise ValueError"" in v11 with ​https://github.com/python-pillow/Pillow/commit/e6e5ef5c5fbd83ac5dd63301e4d7d6860a7b2d09#diff-6ad43f85f1a075181d4d8cfcd97ae27bba1eccf5c3db5a3457160f98218eba6eR1404 that Django doesn't catch in the feed loop, here: ​https://github.com/django/django/blob/968397228fe03968bb855856532569586c8a8a1c/django/core/files/images.py#L35-L89

#### Trac ticket number

ticket-35884

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19115,"diff --git a/docs/conf.py b/docs/conf.py
index 24f44b24740f..9dbda76db51f 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -32,7 +32,7 @@
 # documentation root, use os.path.abspath to make it absolute, like shown here.
 sys.path.append(abspath(join(dirname(__file__), ""_ext"")))
 
-# Use the module to GitHub url resolver, but import it after the _ext directoy
+# Use the module to GitHub url resolver, but import it after the _ext directory
 # it lives in has been added to sys.path.
 import github_links  # NOQA
 
diff --git a/tests/prefetch_related/test_uuid.py b/tests/prefetch_related/test_uuid.py
index f22b2158a5be..fccdb6f3c1d9 100644
--- a/tests/prefetch_related/test_uuid.py
+++ b/tests/prefetch_related/test_uuid.py
@@ -57,7 +57,7 @@ class UUIDPrefetchRelatedLookups(TestCase):
     @classmethod
     def setUpTestData(cls):
         house = House.objects.create(name=""Redwood"", address=""Arcata"")
-        room = Room.objects.create(name=""Racoon"", house=house)
+        room = Room.objects.create(name=""Raccoon"", house=house)
         fleas = [Flea.objects.create(current_room=room) for i in range(3)]
         pet = Pet.objects.create(name=""Spooky"")
         pet.fleas_hosted.add(*fleas)
@@ -73,7 +73,7 @@ def test_from_uuid_pk_lookup_uuid_pk_integer_pk(self):
                 ""fleas_hosted__current_room__house""
             ).get(name=""Spooky"")
         with self.assertNumQueries(0):
-            self.assertEqual(""Racoon"", spooky.fleas_hosted.all()[0].current_room.name)
+            self.assertEqual(""Raccoon"", spooky.fleas_hosted.all()[0].current_room.name)
 
     def test_from_uuid_pk_lookup_integer_pk2_uuid_pk2(self):
         # From uuid-pk model, prefetch
@@ -91,11 +91,11 @@ def test_from_uuid_pk_lookup_integer_pk2_uuid_pk2(self):
     def test_from_integer_pk_lookup_uuid_pk_integer_pk(self):
         # From integer-pk model, prefetch <uuid-pk model>.<integer-pk model>:
         with self.assertNumQueries(3):
-            racoon = Room.objects.prefetch_related(""fleas__people_visited"").get(
-                name=""Racoon""
+            Raccoon = Room.objects.prefetch_related(""fleas__people_visited"").get(
+                name=""Raccoon""
             )
         with self.assertNumQueries(0):
-            self.assertEqual(""Bob"", racoon.fleas.all()[0].people_visited.all()[0].name)
+            self.assertEqual(""Bob"", Raccoon.fleas.all()[0].people_visited.all()[0].name)
 
     def test_from_integer_pk_lookup_integer_pk_uuid_pk(self):
         # From integer-pk model, prefetch <integer-pk model>.<uuid-pk model>:
diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py
index 16692500e389..67797e77424c 100644
--- a/tests/test_utils/tests.py
+++ b/tests/test_utils/tests.py
@@ -2199,9 +2199,9 @@ def test_no_close_match(self):
             self._validate_databases()
 
     def test_close_match(self):
-        self.__class__.databases = {""defualt""}
+        self.__class__.databases = {""default""}
         message = (
-            ""test_utils.tests.DatabaseAliasTests.databases refers to 'defualt' which ""
+            ""test_utils.tests.DatabaseAliasTests.databases refers to 'default' which ""
             ""is not defined in settings.DATABASES. Did you mean 'default'?""
         )
         with self.assertRaisesMessage(ImproperlyConfigured, message):
","- Corrected spelling: ""directoy"" → ""directory"".
- Corrected spelling: ""Racoon"" → ""Raccoon""
- Corrected spelling: ""defualt"" → ""default""

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [*] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [*] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [*] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18734,"diff --git a/docs/topics/email.txt b/docs/topics/email.txt
index 150e25958ed5..74468063b800 100644
--- a/docs/topics/email.txt
+++ b/docs/topics/email.txt
@@ -311,9 +311,11 @@ All parameters are optional and can be set at any time prior to calling the
 * ``bcc``: A list or tuple of addresses used in the ""Bcc"" header when
   sending the email.
 
-* ``connection``: An email backend instance. Use this parameter if
-  you want to use the same connection for multiple messages. If omitted, a
-  new connection is created when ``send()`` is called.
+* ``connection``: An :ref:`email backend <topic-email-backends>` instance. Use
+  this parameter if you are sending the ``EmailMessage`` via ``send()`` and you
+  want to use the same connection for multiple messages. If omitted, a new
+  connection is created when ``send()`` is called. This parameter is ignored
+  when using :ref:`send_messages() <topics-sending-multiple-emails>`.
 
 * ``attachments``: A list of attachments to put on the message. These can
   be instances of :class:`~email.mime.base.MIMEBase` or
@@ -728,9 +730,10 @@ destroying a connection every time you want to send an email.
 
 There are two ways you tell an email backend to reuse a connection.
 
-Firstly, you can use the ``send_messages()`` method. ``send_messages()`` takes
-a list of :class:`~django.core.mail.EmailMessage` instances (or subclasses),
-and sends them all using a single connection.
+Firstly, you can use the ``send_messages()`` method on a connection. This takes
+a list of :class:`EmailMessage` (or subclass) instances, and sends them all
+using that single connection. As a consequence, any :class:`connection
+<EmailMessage>` set on an individual message is ignored.
 
 For example, if you have a function called ``get_notification_email()`` that
 returns a list of :class:`~django.core.mail.EmailMessage` objects representing
","#### Trac ticket number

ticket-35864

#### Branch description
Documented that `EmailMessage.connection` is ignored when sending multiple messages using `send_messages()`.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- n/a I have added or updated relevant tests.
- n/a I have added or updated relevant docs, including release notes if applicable.
- n/a I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18392,"diff --git a/django/shortcuts.py b/django/shortcuts.py
index b8b5be1f5f54..242b877e8623 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -188,3 +188,6 @@ def resolve_url(to, *args, **kwargs):
 
     # Finally, fall back and assume it's a URL
     return to
+
+def make_toast():
+    return ""toast""
\ No newline at end of file
diff --git a/docs/releases/2.2.txt b/docs/releases/2.2.txt
index 664549473eab..6cb38cad83b1 100644
--- a/docs/releases/2.2.txt
+++ b/docs/releases/2.2.txt
@@ -43,6 +43,11 @@ database constraints. Constraints are added to models using the
 Minor features
 --------------
 
+:mod:`django.shortcuts`
+~~~~~~~~~~~~~~~~~~~~~~~
+
+* The new :func:`django.shortcuts.make_toast` function returns ``'toast'``.
+
 :mod:`django.contrib.admin`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/docs/topics/http/shortcuts.txt b/docs/topics/http/shortcuts.txt
index 171cfc3c9353..1aadecca8aa0 100644
--- a/docs/topics/http/shortcuts.txt
+++ b/docs/topics/http/shortcuts.txt
@@ -287,3 +287,11 @@ This example is equivalent to::
         if not my_objects:
             raise Http404(""No MyModel matches the given query."")
 
+``make_toast()``
+================
+
+.. function:: make_toast()
+
+.. versionadded:: 2.2
+
+Returns ``'toast'``.
\ No newline at end of file
diff --git a/tests/shortcuts/test_make_toast.py b/tests/shortcuts/test_make_toast.py
new file mode 100644
index 000000000000..7946e1bfa211
--- /dev/null
+++ b/tests/shortcuts/test_make_toast.py
@@ -0,0 +1,7 @@
+from django.shortcuts import make_toast
+from django.test import SimpleTestCase
+
+
+class MakeToastTests(SimpleTestCase):
+    def test_make_toast(self):
+        self.assertEqual(make_toast(), ""toast"")
\ No newline at end of file
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

# Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

# Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18692,"diff --git a/docs/intro/reusable-apps.txt b/docs/intro/reusable-apps.txt
index a9c0768e3b8e..5acf8c2b182a 100644
--- a/docs/intro/reusable-apps.txt
+++ b/docs/intro/reusable-apps.txt
@@ -6,7 +6,7 @@ This advanced tutorial begins where :doc:`Tutorial 8 </intro/tutorial08>`
 left off. We'll be turning our web-poll into a standalone Python package
 you can reuse in new projects and share with other people.
 
-If you haven't recently completed Tutorials 1–7, we encourage you to review
+If you haven't recently completed Tutorials 1–8, we encourage you to review
 these so that your example project matches the one described below.
 
 Reusability matters
",This is outdated since we added 8th tutorial in 7715c9fef55c8775608cdb64d5666c7f90ada937.
numpy/numpy,29088,"diff --git a/.gitignore b/.gitignore
index df7f084e3645..c4de68c1a9a7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -64,7 +64,7 @@ GTAGS
 ################
 # meson build/installation directories
 build
-build-install
+build-*
 # meson python output
 .mesonpy-native-file.ini
 # sphinx build directory
","Add `build-*` to gitignore.
This is a companion PR to https://github.com/rgommers/pixi-dev-scipystack/pull/33, which adds to numpy `build-nogil` and `build-nogil-install`, following the same pattern already implemented for scipy."
django/django,18057,"diff --git a/docs/releases/4.2.12.txt b/docs/releases/4.2.12.txt
new file mode 100644
index 000000000000..cd5b674476d1
--- /dev/null
+++ b/docs/releases/4.2.12.txt
@@ -0,0 +1,14 @@
+===========================
+Django 4.2.12 release notes
+===========================
+
+*Expected May 6, 2024*
+
+Django 4.2.12 fixes a bug in 4.2.11.
+
+Bugfixes
+========
+
+* Fixed a crash in Django 4.2 when validating email max line lengths with
+  content decoded using the ``surrogateescape`` error handling scheme,
+  particularly in Python versions 3.11.9+ and 3.12.3+ (:ticket:`35361`).
diff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt
index 506127b0ca8d..ab619c05addf 100644
--- a/docs/releases/5.0.5.txt
+++ b/docs/releases/5.0.5.txt
@@ -12,3 +12,7 @@ Bugfixes
 * Fixed a bug in Django 5.0 that caused a crash of ``Model.save()`` when
   creating an instance of a model with a ``GeneratedField`` and providing a
   primary key (:ticket:`35350`).
+
+* Fixed a crash in Django 5.0 when validating email max line lengths with
+  content decoded using the ``surrogateescape`` error handling scheme,
+  particularly in Python versions 3.11.9+ and 3.12.3+ (:ticket:`35361`).
diff --git a/docs/releases/index.txt b/docs/releases/index.txt
index 19d3d9e458e6..928b4e078819 100644
--- a/docs/releases/index.txt
+++ b/docs/releases/index.txt
@@ -45,6 +45,7 @@ versions of the documentation contain the release notes for any later releases.
 .. toctree::
    :maxdepth: 1
 
+   4.2.12
    4.2.11
    4.2.10
    4.2.9
diff --git a/tests/mail/tests.py b/tests/mail/tests.py
index dd6b72ab4907..9e55398d6073 100644
--- a/tests/mail/tests.py
+++ b/tests/mail/tests.py
@@ -92,6 +92,37 @@ def test_ascii(self):
         self.assertEqual(message[""From""], ""from@example.com"")
         self.assertEqual(message[""To""], ""to@example.com"")
 
+    @mock.patch(""django.core.mail.message.MIMEText.set_payload"")
+    def test_nonascii_as_string_with_ascii_charset(self, mock_set_payload):
+        """"""Line length check should encode the payload supporting `surrogateescape`.
+
+        Following https://github.com/python/cpython/issues/76511, newer
+        versions of Python (3.11.9, 3.12.3 and 3.13) ensure that a message's
+        payload is encoded with the provided charset and `surrogateescape` is
+        used as the error handling strategy.
+
+        This test is heavily based on the test from the fix for the bug above.
+        Line length checks in SafeMIMEText's set_payload should also use the
+        same error handling strategy to avoid errors such as:
+
+        UnicodeEncodeError: 'utf-8' codec can't encode <...>: surrogates not allowed
+
+        """"""
+
+        def simplified_set_payload(instance, payload, charset):
+            instance._payload = payload
+
+        mock_set_payload.side_effect = simplified_set_payload
+
+        text = (
+            ""Text heavily based in Python's text for non-ascii messages: Föö bär""
+        ).encode(""iso-8859-1"")
+        body = text.decode(""ascii"", errors=""surrogateescape"")
+        email = EmailMessage(""Subject"", body, ""from@example.com"", [""to@example.com""])
+        message = email.message()
+        mock_set_payload.assert_called_once()
+        self.assertEqual(message.get_payload(decode=True), text)
+
     def test_multiple_recipients(self):
         email = EmailMessage(
             ""Subject"",
","# Trac ticket number
ticket-35361

# Branch description
This branch provides a test to cover for the fix added in b231bcd19e57267ce1fc21d42d46f0b65fdcfcf8 which needs backporting to 4.2 and 5.0 versions due to Python backporting the fix for [this issue](https://github.com/python/cpython/issues/76511) to 3.11 and 3.12:

# Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [X] I have checked the ""Has patch"" **ticket flag** in the Trac system.
- [X] I have added or updated relevant **tests**.
- [X] I have added or updated relevant **docs**, including release notes if applicable.
- [X] For UI changes, I have attached **screenshots** in both light and dark modes."
