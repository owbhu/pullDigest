repo,number,diff,summary
django/django,18446,"diff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt
index df3bc9ae2a1c..546cbd98a547 100644
--- a/docs/releases/5.0.8.txt
+++ b/docs/releases/5.0.8.txt
@@ -24,3 +24,6 @@ Bugfixes
 * Fixed a regression in Django 5.0.7 that caused a crash in
   ``LocaleMiddleware`` when processing a language code over 500 characters
   (:ticket:`35627`).
+
+* Fixed a crash when saving a model with a ``FileField`` with a ``db_default``
+  (:ticket:`35657`).
diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py
index 873c3e176abb..cb0207cae909 100644
--- a/tests/file_storage/models.py
+++ b/tests/file_storage/models.py
@@ -72,6 +72,9 @@ def pathlib_upload_to(self, filename):
     default = models.FileField(
         storage=temp_storage, upload_to=""tests"", default=""tests/default.txt""
     )
+    db_default = models.FileField(
+        storage=temp_storage, upload_to=""tests"", db_default=""tests/db_default.txt""
+    )
     empty = models.FileField(storage=temp_storage)
     limited_length = models.FileField(
         storage=temp_storage, upload_to=""tests"", max_length=20
diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py
index 868b18dd2c06..a5b01c8cbd4d 100644
--- a/tests/file_storage/tests.py
+++ b/tests/file_storage/tests.py
@@ -944,6 +944,18 @@ def test_filefield_default(self):
         self.assertEqual(obj.default.read(), b""default content"")
         obj.default.close()
 
+    def test_filefield_db_default(self):
+        temp_storage.save(""tests/db_default.txt"", ContentFile(""default content""))
+        obj = Storage.objects.create()
+        self.assertEqual(obj.db_default.name, ""tests/db_default.txt"")
+        self.assertEqual(obj.db_default.read(), b""default content"")
+        obj.db_default.close()
+
+        obj.delete()
+        obj = Storage()
+        self.assertEqual(obj.db_default.read(), b""default content"")
+        obj.db_default.close()
+
     def test_empty_upload_to(self):
         # upload_to can be empty, meaning it does not use subdirectory.
         obj = Storage()
","# Trac ticket number

ticket-35657

# Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

# Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,13419,"diff --git a/tests/admin_ordering/tests.py b/tests/admin_ordering/tests.py
index f68b64ae70c0..d47cf16d463a 100644
--- a/tests/admin_ordering/tests.py
+++ b/tests/admin_ordering/tests.py
@@ -15,7 +15,7 @@ class MockRequest:
 
 
 class MockSuperUser:
-    def has_perm(self, perm):
+    def has_perm(self, perm, obj=None):
         return True
 
     def has_module_perms(self, module):
diff --git a/tests/auth_tests/test_context_processors.py b/tests/auth_tests/test_context_processors.py
index 281ea744d8ac..e492050bcb36 100644
--- a/tests/auth_tests/test_context_processors.py
+++ b/tests/auth_tests/test_context_processors.py
@@ -12,7 +12,7 @@ class MockUser:
     def has_module_perms(self, perm):
         return perm == 'mockapp'
 
-    def has_perm(self, perm):
+    def has_perm(self, perm, obj=None):
         return perm == 'mockapp.someperm'
 
 
diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py
index 0ce6eea1e408..fc17b9de7440 100644
--- a/tests/generic_inline_admin/tests.py
+++ b/tests/generic_inline_admin/tests.py
@@ -284,7 +284,7 @@ class MockRequest:
 
 
 class MockSuperUser:
-    def has_perm(self, perm):
+    def has_perm(self, perm, obj=None):
         return True
 
 
diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py
index 74db14d5acfc..00de9f75230a 100644
--- a/tests/modeladmin/tests.py
+++ b/tests/modeladmin/tests.py
@@ -25,7 +25,7 @@ class MockRequest:
 
 
 class MockSuperUser:
-    def has_perm(self, perm):
+    def has_perm(self, perm, obj=None):
         return True
 
 
@@ -730,19 +730,19 @@ def has_module_perms(self, app_label):
             return app_label == 'modeladmin'
 
     class MockViewUser(MockUser):
-        def has_perm(self, perm):
+        def has_perm(self, perm, obj=None):
             return perm == 'modeladmin.view_band'
 
     class MockAddUser(MockUser):
-        def has_perm(self, perm):
+        def has_perm(self, perm, obj=None):
             return perm == 'modeladmin.add_band'
 
     class MockChangeUser(MockUser):
-        def has_perm(self, perm):
+        def has_perm(self, perm, obj=None):
             return perm == 'modeladmin.change_band'
 
     class MockDeleteUser(MockUser):
-        def has_perm(self, perm):
+        def has_perm(self, perm, obj=None):
             return perm == 'modeladmin.delete_band'
 
     def test_has_view_permission(self):
",to match the signature of the real implementation
django/django,18304,"diff --git a/django/db/models/base.py b/django/db/models/base.py
index cd300e47bce7..dcfdd6eadedd 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -803,18 +803,20 @@ def save(
                 RemovedInDjango60Warning,
                 stacklevel=2,
             )
-            for arg, attr in zip(
-                args, [""force_insert"", ""force_update"", ""using"", ""update_fields""]
-            ):
-                if arg:
-                    if attr == ""force_insert"":
-                        force_insert = arg
-                    elif attr == ""force_update"":
-                        force_update = arg
-                    elif attr == ""using"":
-                        using = arg
-                    else:
-                        update_fields = arg
+            total_len_args = len(args) + 1  # include self
+            if total_len_args > 5:
+                # Recreate the proper TypeError message from Python.
+                raise TypeError(
+                    ""Model.save() takes from 1 to 5 positional arguments but ""
+                    f""{total_len_args} were given""
+                )
+            force_insert = args[0]
+            try:
+                force_update = args[1]
+                using = args[2]
+                update_fields = args[3]
+            except IndexError:
+                pass
 
         self._prepare_related_fields_for_save(operation_name=""save"")
 
@@ -888,18 +890,20 @@ async def asave(
                 RemovedInDjango60Warning,
                 stacklevel=2,
             )
-            for arg, attr in zip(
-                args, [""force_insert"", ""force_update"", ""using"", ""update_fields""]
-            ):
-                if arg:
-                    if attr == ""force_insert"":
-                        force_insert = arg
-                    elif attr == ""force_update"":
-                        force_update = arg
-                    elif attr == ""using"":
-                        using = arg
-                    else:
-                        update_fields = arg
+            total_len_args = len(args) + 1  # include self
+            if total_len_args > 5:
+                # Recreate the proper TypeError message from Python.
+                raise TypeError(
+                    ""Model.asave() takes from 1 to 5 positional arguments but ""
+                    f""{total_len_args} were given""
+                )
+            force_insert = args[0]
+            try:
+                force_update = args[1]
+                using = args[2]
+                update_fields = args[3]
+            except IndexError:
+                pass
 
         return await sync_to_async(self.save)(
             force_insert=force_insert,
diff --git a/tests/basic/tests.py b/tests/basic/tests.py
index 38fb9ca20035..4e89febed2b3 100644
--- a/tests/basic/tests.py
+++ b/tests/basic/tests.py
@@ -210,6 +210,35 @@ def test_save_deprecation(self):
             a.save(False, False, None, None)
             self.assertEqual(Article.objects.count(), 1)
 
+    def test_save_deprecation_positional_arguments_used(self):
+        a = Article()
+        fields = [""headline""]
+        with (
+            self.assertWarns(RemovedInDjango60Warning),
+            mock.patch.object(a, ""save_base"") as mock_save_base,
+        ):
+            a.save(None, 1, 2, fields)
+        self.assertEqual(
+            mock_save_base.mock_calls,
+            [
+                mock.call(
+                    using=2,
+                    force_insert=None,
+                    force_update=1,
+                    update_fields=frozenset(fields),
+                )
+            ],
+        )
+
+    def test_save_too_many_positional_arguments(self):
+        a = Article()
+        msg = ""Model.save() takes from 1 to 5 positional arguments but 6 were given""
+        with (
+            self.assertWarns(RemovedInDjango60Warning),
+            self.assertRaisesMessage(TypeError, msg),
+        ):
+            a.save(False, False, None, None, None)
+
     async def test_asave_deprecation(self):
         a = Article(headline=""original"", pub_date=datetime(2014, 5, 16))
         msg = ""Passing positional arguments to asave() is deprecated""
@@ -217,6 +246,35 @@ async def test_asave_deprecation(self):
             await a.asave(False, False, None, None)
             self.assertEqual(await Article.objects.acount(), 1)
 
+    async def test_asave_deprecation_positional_arguments_used(self):
+        a = Article()
+        fields = [""headline""]
+        with (
+            self.assertWarns(RemovedInDjango60Warning),
+            mock.patch.object(a, ""save_base"") as mock_save_base,
+        ):
+            await a.asave(None, 1, 2, fields)
+        self.assertEqual(
+            mock_save_base.mock_calls,
+            [
+                mock.call(
+                    using=2,
+                    force_insert=None,
+                    force_update=1,
+                    update_fields=frozenset(fields),
+                )
+            ],
+        )
+
+    async def test_asave_too_many_positional_arguments(self):
+        a = Article()
+        msg = ""Model.asave() takes from 1 to 5 positional arguments but 6 were given""
+        with (
+            self.assertWarns(RemovedInDjango60Warning),
+            self.assertRaisesMessage(TypeError, msg),
+        ):
+            await a.asave(False, False, None, None, None)
+
     @ignore_warnings(category=RemovedInDjango60Warning)
     def test_save_positional_arguments(self):
         a = Article.objects.create(headline=""original"", pub_date=datetime(2014, 5, 16))
diff --git a/tests/update_only_fields/tests.py b/tests/update_only_fields/tests.py
index 6c23ae27d8d5..816112bc3347 100644
--- a/tests/update_only_fields/tests.py
+++ b/tests/update_only_fields/tests.py
@@ -1,5 +1,6 @@
 from django.db.models.signals import post_save, pre_save
 from django.test import TestCase
+from django.utils.deprecation import RemovedInDjango60Warning
 
 from .models import Account, Employee, Person, Profile, ProxyEmployee
 
@@ -256,6 +257,29 @@ def post_save_receiver(**kwargs):
         pre_save.disconnect(pre_save_receiver)
         post_save.disconnect(post_save_receiver)
 
+    def test_empty_update_fields_positional_save(self):
+        s = Person.objects.create(name=""Sara"", gender=""F"")
+
+        msg = ""Passing positional arguments to save() is deprecated""
+        with (
+            self.assertWarnsMessage(RemovedInDjango60Warning, msg),
+            self.assertNumQueries(0),
+        ):
+            s.save(False, False, None, [])
+
+    async def test_empty_update_fields_positional_asave(self):
+        s = await Person.objects.acreate(name=""Sara"", gender=""F"")
+        # Workaround for a lack of async assertNumQueries.
+        s.name = ""Other""
+
+        msg = ""Passing positional arguments to asave() is deprecated""
+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):
+            await s.asave(False, False, None, [])
+
+        # No save occurred for an empty update_fields.
+        await s.arefresh_from_db()
+        self.assertEqual(s.name, ""Sara"")
+
     def test_num_queries_inheritance(self):
         s = Employee.objects.create(name=""Sara"", gender=""F"")
         s.employee_num = 1
","# Trac ticket number

ticket-35554

# Branch description

Change the parsing introduced in 3915d4c70d0d7673abe675525b58117a5099afd3 / PR #17667 to handle some edge cases, with new tests.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18646,"diff --git a/django/conf/locale/uk/LC_MESSAGES/django.po b/django/conf/locale/uk/LC_MESSAGES/django.po
index 8f50fc4d95af..53cebe89c7cd 100644
--- a/django/conf/locale/uk/LC_MESSAGES/django.po
+++ b/django/conf/locale/uk/LC_MESSAGES/django.po
@@ -799,7 +799,7 @@ msgid ""Enter a complete value.""
 msgstr ""Введіть значення повністю.""
 
 msgid ""Enter a valid UUID.""
-msgstr ""Введіть коректне значення UUID,""
+msgstr ""Введіть коректне значення UUID.""
 
 msgid ""Enter a valid JSON.""
 msgstr ""Введіть коректний JSON.""
","#### Trac ticket number
N/A

ticket-N/A

#### Branch description
',' replaced by '.'


"
django/django,14226,"diff --git a/django/contrib/humanize/templatetags/humanize.py b/django/contrib/humanize/templatetags/humanize.py
index 753a0d9fe1de..3d93234fb6c0 100644
--- a/django/contrib/humanize/templatetags/humanize.py
+++ b/django/contrib/humanize/templatetags/humanize.py
@@ -202,21 +202,21 @@ class NaturalTimeFormatter:
     }
     past_substrings = {
         # Translators: 'naturaltime-past' strings will be included in '%(delta)s ago'
-        'year': npgettext_lazy('naturaltime-past', '%d year', '%d years'),
-        'month': npgettext_lazy('naturaltime-past', '%d month', '%d months'),
-        'week': npgettext_lazy('naturaltime-past', '%d week', '%d weeks'),
-        'day': npgettext_lazy('naturaltime-past', '%d day', '%d days'),
-        'hour': npgettext_lazy('naturaltime-past', '%d hour', '%d hours'),
-        'minute': npgettext_lazy('naturaltime-past', '%d minute', '%d minutes'),
+        'year': npgettext_lazy('naturaltime-past', '%(number)d year', '%(number)d years'),
+        'month': npgettext_lazy('naturaltime-past', '%(number)d month', '%(number)d months'),
+        'week': npgettext_lazy('naturaltime-past', '%(number)d week', '%(number)d weeks'),
+        'day': npgettext_lazy('naturaltime-past', '%(number)d day', '%(number)d days'),
+        'hour': npgettext_lazy('naturaltime-past', '%(number)d hour', '%(number)d hours'),
+        'minute': npgettext_lazy('naturaltime-past', '%(number)d minute', '%(number)d minutes'),
     }
     future_substrings = {
         # Translators: 'naturaltime-future' strings will be included in '%(delta)s from now'
-        'year': npgettext_lazy('naturaltime-future', '%d year', '%d years'),
-        'month': npgettext_lazy('naturaltime-future', '%d month', '%d months'),
-        'week': npgettext_lazy('naturaltime-future', '%d week', '%d weeks'),
-        'day': npgettext_lazy('naturaltime-future', '%d day', '%d days'),
-        'hour': npgettext_lazy('naturaltime-future', '%d hour', '%d hours'),
-        'minute': npgettext_lazy('naturaltime-future', '%d minute', '%d minutes'),
+        'year': npgettext_lazy('naturaltime-future', '%(number)d year', '%(number)d years'),
+        'month': npgettext_lazy('naturaltime-future', '%(number)d month', '%(number)d months'),
+        'week': npgettext_lazy('naturaltime-future', '%(number)d week', '%(number)d weeks'),
+        'day': npgettext_lazy('naturaltime-future', '%(number)d day', '%(number)d days'),
+        'hour': npgettext_lazy('naturaltime-future', '%(number)d hour', '%(number)d hours'),
+        'minute': npgettext_lazy('naturaltime-future', '%(number)d minute', '%(number)d minutes'),
     }
 
     @classmethod
diff --git a/django/utils/timesince.py b/django/utils/timesince.py
index a9e6b6195947..5973895f826a 100644
--- a/django/utils/timesince.py
+++ b/django/utils/timesince.py
@@ -6,12 +6,12 @@
 from django.utils.translation import gettext, ngettext_lazy
 
 TIME_STRINGS = {
-    'year': ngettext_lazy('%d year', '%d years'),
-    'month': ngettext_lazy('%d month', '%d months'),
-    'week': ngettext_lazy('%d week', '%d weeks'),
-    'day': ngettext_lazy('%d day', '%d days'),
-    'hour': ngettext_lazy('%d hour', '%d hours'),
-    'minute': ngettext_lazy('%d minute', '%d minutes'),
+    'year': ngettext_lazy('%(number)d year', '%(number)d years'),
+    'month': ngettext_lazy('%(number)d month', '%(number)d months'),
+    'week': ngettext_lazy('%(number)d week', '%(number)d weeks'),
+    'day': ngettext_lazy('%(number)d day', '%(number)d days'),
+    'hour': ngettext_lazy('%(number)d hour', '%(number)d hours'),
+    'minute': ngettext_lazy('%(number)d minute', '%(number)d minutes'),
 }
 
 TIMESINCE_CHUNKS = (
","https://code.djangoproject.com/ticket/31937

Just a draft PR. I'm waiting for feedback. The translations still needs to be updated in every language - also on Transifex."
django/django,18910,"diff --git a/docs/topics/i18n/translation.txt b/docs/topics/i18n/translation.txt
index 04dad034cc80..d5d949f357f2 100644
--- a/docs/topics/i18n/translation.txt
+++ b/docs/topics/i18n/translation.txt
@@ -130,7 +130,8 @@ translations wouldn't be able to reorder placeholder text.
 
 Since string extraction is done by the ``xgettext`` command, only syntaxes
 supported by ``gettext`` are supported by Django. In particular, Python
-:py:ref:`f-strings <f-strings>` are not yet supported by ``xgettext``, and
+:py:ref:`f-strings <f-strings>` need ``xgettext`` 0.23+ and do not support
+expressions in embedded variables, such as accessing a slice of a list.
 JavaScript template strings need ``gettext`` 0.21+.
 
 .. _translator-comments:
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35993

#### Branch description
gettext 0.23+ supports the f-string syntax according to their [​bugtracker](https://savannah.gnu.org/bugs/?61596). Testing in practice confirms this. The current version of the documentation says that the syntax is not supported. This Pull Request changes this to inform the reader that they can use f-string syntax with  gettext 0.23+.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18442,"diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 191fe3cbb513..04a5edbd3086 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -53,7 +53,8 @@ class HashedFilesMixin:
         (
             (
                 (
-                    r""""""(?P<matched>import(?s:(?P<import>[\s\{].*?))""""""
+                    r""""""(?P<matched>import""""""
+                    r""""""(?s:(?P<import>[\s\{].*?|\*\s*as\s*\w+))""""""
                     r""""""\s*from\s*['""](?P<url>[./].*?)[""']\s*;)""""""
                 ),
                 """"""import%(import)s from ""%(url)s"";"""""",
diff --git a/tests/staticfiles_tests/project/documents/cached/module.js b/tests/staticfiles_tests/project/documents/cached/module.js
index 7764e740d697..c56530aea6d2 100644
--- a/tests/staticfiles_tests/project/documents/cached/module.js
+++ b/tests/staticfiles_tests/project/documents/cached/module.js
@@ -2,6 +2,10 @@
 import rootConst from ""/static/absolute_root.js"";
 import testConst from ""./module_test.js"";
 import * as NewModule from ""./module_test.js"";
+import*as m from ""./module_test.js"";
+import *as m from ""./module_test.js"";
+import* as m from ""./module_test.js"";
+import*  as  m from ""./module_test.js"";
 import { testConst as alias } from ""./module_test.js"";
 import { firstConst, secondConst } from ""./module_test.js"";
 import {
diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py
index 030b7dc6db0e..d6ea03b7446a 100644
--- a/tests/staticfiles_tests/test_storage.py
+++ b/tests/staticfiles_tests/test_storage.py
@@ -674,7 +674,7 @@ class TestCollectionJSModuleImportAggregationManifestStorage(CollectionTestCase)
 
     def test_module_import(self):
         relpath = self.hashed_file_path(""cached/module.js"")
-        self.assertEqual(relpath, ""cached/module.55fd6938fbc5.js"")
+        self.assertEqual(relpath, ""cached/module.4326210cf0bd.js"")
         tests = [
             # Relative imports.
             b'import testConst from ""./module_test.477bbebe77f0.js"";',
@@ -686,6 +686,11 @@ def test_module_import(self):
             b'const dynamicModule = import(""./module_test.477bbebe77f0.js"");',
             # Creating a module object.
             b'import * as NewModule from ""./module_test.477bbebe77f0.js"";',
+            # Creating a minified module object.
+            b'import*as m from ""./module_test.477bbebe77f0.js"";',
+            b'import* as m from ""./module_test.477bbebe77f0.js"";',
+            b'import *as m from ""./module_test.477bbebe77f0.js"";',
+            b'import*  as  m from ""./module_test.477bbebe77f0.js"";',
             # Aliases.
             b'import { testConst as alias } from ""./module_test.477bbebe77f0.js"";',
             b""import {\n""
@@ -701,7 +706,7 @@ def test_module_import(self):
 
     def test_aggregating_modules(self):
         relpath = self.hashed_file_path(""cached/module.js"")
-        self.assertEqual(relpath, ""cached/module.55fd6938fbc5.js"")
+        self.assertEqual(relpath, ""cached/module.4326210cf0bd.js"")
         tests = [
             b'export * from ""./module_test.477bbebe77f0.js"";',
             b'export { testConst } from ""./module_test.477bbebe77f0.js"";',
","# Trac ticket number

ticket-35553

# Branch description
Added a regex to catch import*as type imports in staticfiles
# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18983,"diff --git a/tests/field_defaults/tests.py b/tests/field_defaults/tests.py
index 6a5c75c36aff..57d5ce63201d 100644
--- a/tests/field_defaults/tests.py
+++ b/tests/field_defaults/tests.py
@@ -15,7 +15,14 @@
 )
 from django.db.models.functions import Collate
 from django.db.models.lookups import GreaterThan
-from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature
+from django.test import (
+    SimpleTestCase,
+    TestCase,
+    override_settings,
+    skipIfDBFeature,
+    skipUnlessDBFeature,
+)
+from django.utils import timezone
 
 from .models import (
     Article,
@@ -69,12 +76,13 @@ def test_null_db_default(self):
         self.assertIsNone(obj2.null)
 
     @skipUnlessDBFeature(""supports_expression_defaults"")
+    @override_settings(USE_TZ=True)
     def test_db_default_function(self):
         m = DBDefaultsFunction.objects.create()
         if not connection.features.can_return_columns_from_insert:
             m.refresh_from_db()
         self.assertAlmostEqual(m.number, pi)
-        self.assertEqual(m.year, datetime.now().year)
+        self.assertEqual(m.year, timezone.now().year)
         self.assertAlmostEqual(m.added, pi + 4.5)
         self.assertEqual(m.multiple_subfunctions, 4.5)
 
@@ -163,12 +171,13 @@ def test_bulk_create_mixed_db_defaults(self):
         self.assertCountEqual(headlines, [""Default headline"", ""Something else""])
 
     @skipUnlessDBFeature(""supports_expression_defaults"")
+    @override_settings(USE_TZ=True)
     def test_bulk_create_mixed_db_defaults_function(self):
         instances = [DBDefaultsFunction(), DBDefaultsFunction(year=2000)]
         DBDefaultsFunction.objects.bulk_create(instances)
 
         years = DBDefaultsFunction.objects.values_list(""year"", flat=True)
-        self.assertCountEqual(years, [2000, datetime.now().year])
+        self.assertCountEqual(years, [2000, timezone.now().year])
 
     def test_full_clean(self):
         obj = DBArticle()
","#### Trac ticket number
ticket-470

#### Branch description
These two tests failed around New Year's Eve, both locally and on a [pull request](https://djangoci.com/job/pull-requests-focal/database=sqlite3,label=focal-pr,python=python3.10/29048/).

They can be fixed by using an aware datetime comparison. (This is an extremely minor issue, but fixing it has the benefit of modeling good usage in the tests.)

To reproduce the original issue, you can adjust the test to subtract a timedelta from datetime.now() that will result in a time that is still in 2024 in your timezone but at least 01/01/2025 00:00 UTC. Then using that same offset with this branch should pass.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [n/a] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19040,"diff --git a/django/db/models/base.py b/django/db/models/base.py
index a4d5a0d55363..4c7b71e8488c 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -874,13 +874,13 @@ def save(
 
             update_fields = frozenset(update_fields)
             field_names = self._meta._non_pk_concrete_field_names
-            non_model_fields = update_fields.difference(field_names)
+            not_updatable_fields = update_fields.difference(field_names)
 
-            if non_model_fields:
+            if not_updatable_fields:
                 raise ValueError(
                     ""The following fields do not exist in this model, are m2m ""
-                    ""fields, or are non-concrete fields: %s""
-                    % "", "".join(non_model_fields)
+                    ""fields, primary keys, or are non-concrete fields: %s""
+                    % "", "".join(not_updatable_fields)
                 )
 
         # If saving to the same database, and this model is deferred, then
@@ -1493,7 +1493,7 @@ def _perform_unique_checks(self, unique_checks):
                 ):
                     # no value, skip the lookup
                     continue
-                if f in self._meta.pk_fields and not self._state.adding:
+                if f in model_class._meta.pk_fields and not self._state.adding:
                     # no need to check for unique primary key when editing
                     continue
                 lookup_kwargs[str(field_name)] = lookup_value
diff --git a/django/db/models/options.py b/django/db/models/options.py
index 28b93ca15563..11b2742f7d10 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -1008,8 +1008,11 @@ def _non_pk_concrete_field_names(self):
         Return a set of the non-pk concrete field names defined on the model.
         """"""
         names = []
+        all_pk_fields = set(self.pk_fields)
+        for parent in self.all_parents:
+            all_pk_fields.update(parent._meta.pk_fields)
         for field in self.concrete_fields:
-            if field not in self.pk_fields:
+            if field not in all_pk_fields:
                 names.append(field.name)
                 if field.name != field.attname:
                     names.append(field.attname)
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 436233336d1f..25995b0d8372 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -878,7 +878,10 @@ def bulk_update(self, objs, fields, batch_size=None):
         fields = [self.model._meta.get_field(name) for name in fields]
         if any(not f.concrete or f.many_to_many for f in fields):
             raise ValueError(""bulk_update() can only be used with concrete fields."")
-        if any(f in self.model._meta.pk_fields for f in fields):
+        all_pk_fields = set(self.model._meta.pk_fields)
+        for parent in self.model._meta.all_parents:
+            all_pk_fields.update(parent._meta.pk_fields)
+        if any(f in all_pk_fields for f in fields):
             raise ValueError(""bulk_update() cannot be used with primary key fields."")
         if not objs:
             return 0
diff --git a/tests/composite_pk/test_update.py b/tests/composite_pk/test_update.py
index 4d45e906cfea..ec770230fc34 100644
--- a/tests/composite_pk/test_update.py
+++ b/tests/composite_pk/test_update.py
@@ -74,7 +74,7 @@ def test_update_fields_deferred(self):
     def test_update_fields_pk_field(self):
         msg = (
             ""The following fields do not exist in this model, are m2m fields, ""
-            ""or are non-concrete fields: id""
+            ""primary keys, or are non-concrete fields: id""
         )
         with self.assertRaisesMessage(ValueError, msg):
             self.user_1.save(update_fields=[""id""])
diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py
index 6b005fcef0ed..cc333a9ac20b 100644
--- a/tests/model_inheritance/tests.py
+++ b/tests/model_inheritance/tests.py
@@ -343,6 +343,11 @@ class MethodOverride(MethodParent):
 
         self.assertEqual(type(MethodOverride.foo), DeferredAttribute)
 
+    def test_full_clean(self):
+        restaurant = Restaurant.objects.create()
+        with self.assertNumQueries(0), self.assertRaises(ValidationError):
+            restaurant.full_clean()
+
 
 class ModelInheritanceDataTests(TestCase):
     @classmethod
diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py
index b2688a61c883..9fa9c3b9b8f7 100644
--- a/tests/queries/test_bulk_update.py
+++ b/tests/queries/test_bulk_update.py
@@ -144,6 +144,10 @@ def test_update_custom_primary_key(self):
         with self.assertRaisesMessage(ValueError, self.pk_fields_error):
             CustomPk.objects.bulk_update([], [""name""])
 
+    def test_update_inherited_primary_key(self):
+        with self.assertRaisesMessage(ValueError, self.pk_fields_error):
+            SpecialCategory.objects.bulk_update([], [""id""])
+
     def test_empty_objects(self):
         with self.assertNumQueries(0):
             rows_updated = Note.objects.bulk_update([], [""note""])
diff --git a/tests/update_only_fields/tests.py b/tests/update_only_fields/tests.py
index a6a5b7cb8eb3..43f3e1fd16ec 100644
--- a/tests/update_only_fields/tests.py
+++ b/tests/update_only_fields/tests.py
@@ -7,8 +7,8 @@
 
 class UpdateOnlyFieldsTests(TestCase):
     msg = (
-        ""The following fields do not exist in this model, are m2m fields, or ""
-        ""are non-concrete fields: %s""
+        ""The following fields do not exist in this model, are m2m ""
+        ""fields, primary keys, or are non-concrete fields: %s""
     )
 
     def test_update_fields_basic(self):
@@ -308,3 +308,13 @@ def test_update_non_concrete_field(self):
         profile_boss = Profile.objects.create(name=""Boss"", salary=3000)
         with self.assertRaisesMessage(ValueError, self.msg % ""non_concrete""):
             profile_boss.save(update_fields=[""non_concrete""])
+
+    def test_update_pk_field(self):
+        person_boss = Person.objects.create(name=""Boss"", gender=""F"")
+        with self.assertRaisesMessage(ValueError, self.msg % ""id""):
+            person_boss.save(update_fields=[""id""])
+
+    def test_update_inherited_pk_field(self):
+        employee_boss = Employee.objects.create(name=""Boss"", gender=""F"")
+        with self.assertRaisesMessage(ValueError, self.msg % ""id""):
+            employee_boss.save(update_fields=[""id""])
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36093

#### Branch description

Address some regressions introduce by #19018. It brings the question on whether we should also have a `all_pk_fields` property.
"
django/django,18574,"diff --git a/tests/fixtures_regress/fixtures/sequence_empty_lines_jsonl.jsonl b/tests/fixtures_regress/fixtures/sequence_empty_lines_jsonl.jsonl
new file mode 100644
index 000000000000..c8ac372cabae
--- /dev/null
+++ b/tests/fixtures_regress/fixtures/sequence_empty_lines_jsonl.jsonl
@@ -0,0 +1,3 @@
+
+
+{""pk"": ""1"", ""model"": ""fixtures_regress.animal"", ""fields"": {""name"": ""Eagle"", ""latin_name"": ""Aquila"", ""count"": 3, ""weight"": 1.2}}
diff --git a/tests/fixtures_regress/fixtures/sequence_extra_jsonl.jsonl b/tests/fixtures_regress/fixtures/sequence_extra_jsonl.jsonl
new file mode 100644
index 000000000000..6644eaf95d12
--- /dev/null
+++ b/tests/fixtures_regress/fixtures/sequence_extra_jsonl.jsonl
@@ -0,0 +1,2 @@
+{""pk"": ""1"", ""model"": ""fixtures_regress.animal"", ""fields"": {""name"": ""Eagle"", ""extra_name"": ""Super Eagle"", ""latin_name"": ""Aquila"", ""count"": 3, ""weight"": 1.2}}
+{""pk"": ""1"", ""model"": ""fixtures_regress.animal_extra"", ""fields"": {""name"": ""Nonexistent model"", ""extra_name"": ""test for ticket #29522"", ""latin_name"": ""Aquila"", ""count"": 3, ""weight"": 1.2}}
diff --git a/tests/fixtures_regress/fixtures/sequence_extra_yaml.yaml b/tests/fixtures_regress/fixtures/sequence_extra_yaml.yaml
new file mode 100644
index 000000000000..760b2d42751e
--- /dev/null
+++ b/tests/fixtures_regress/fixtures/sequence_extra_yaml.yaml
@@ -0,0 +1,17 @@
+- pk: ""1""
+  model: fixtures_regress.animal
+  fields:
+    name: Cat
+    extra_name: Super Cat
+    latin_name: Felis catus
+    count: 3
+    weight: 1.2
+
+- pk: ""1""
+  model: fixtures_regress.animal_extra
+  fields:
+    name: Nonexistent model
+    extra_name: test for ticket \#29522
+    latin_name: Felis catus
+    count: 3
+    weight: 1.2
diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py
index 54d7cac50ace..ef79c2f3821b 100644
--- a/tests/fixtures_regress/tests.py
+++ b/tests/fixtures_regress/tests.py
@@ -96,12 +96,20 @@ def test_loaddata_not_found_fields_not_ignore(self):
         the serialized data for fields that have been removed
         from the database when not ignored.
         """"""
-        with self.assertRaises(DeserializationError):
-            management.call_command(
-                ""loaddata"",
-                ""sequence_extra"",
-                verbosity=0,
-            )
+        for fixture_file in (
+            ""sequence_extra"",
+            ""sequence_extra_jsonl"",
+            ""sequence_extra_yaml"",
+        ):
+            with (
+                self.subTest(fixture_file=fixture_file),
+                self.assertRaises(DeserializationError),
+            ):
+                management.call_command(
+                    ""loaddata"",
+                    fixture_file,
+                    verbosity=0,
+                )
 
     def test_loaddata_not_found_fields_ignore(self):
         """"""
@@ -130,6 +138,32 @@ def test_loaddata_not_found_fields_ignore_xml(self):
         )
         self.assertEqual(Animal.specimens.all()[0].name, ""Wolf"")
 
+    def test_loaddata_not_found_fields_ignore_jsonl(self):
+        management.call_command(
+            ""loaddata"",
+            ""sequence_extra_jsonl"",
+            ignore=True,
+            verbosity=0,
+        )
+        self.assertEqual(Animal.specimens.all()[0].name, ""Eagle"")
+
+    def test_loaddata_not_found_fields_ignore_yaml(self):
+        management.call_command(
+            ""loaddata"",
+            ""sequence_extra_yaml"",
+            ignore=True,
+            verbosity=0,
+        )
+        self.assertEqual(Animal.specimens.all()[0].name, ""Cat"")
+
+    def test_loaddata_empty_lines_jsonl(self):
+        management.call_command(
+            ""loaddata"",
+            ""sequence_empty_lines_jsonl.jsonl"",
+            verbosity=0,
+        )
+        self.assertEqual(Animal.specimens.all()[0].name, ""Eagle"")
+
     @skipIfDBFeature(""interprets_empty_strings_as_nulls"")
     def test_pretty_print_xml(self):
         """"""
","Cherry picked from #18335
"
django/django,18299,"diff --git a/django/contrib/sites/context_processors.py b/django/contrib/sites/context_processors.py
new file mode 100644
index 000000000000..f7d4a4428293
--- /dev/null
+++ b/django/contrib/sites/context_processors.py
@@ -0,0 +1,6 @@
+from django.contrib.sites.shortcuts import get_current_site
+
+
+def site(request):
+    """"""Context processor that returns current site""""""
+    return {""site"": get_current_site(request)}
diff --git a/docs/ref/contrib/sites.txt b/docs/ref/contrib/sites.txt
index d69e4c8e81ca..1bdd094f3ed2 100644
--- a/docs/ref/contrib/sites.txt
+++ b/docs/ref/contrib/sites.txt
@@ -241,6 +241,40 @@ That gives you more flexibility, but it's also more complex.
 It's a good idea to exploit the :class:`~django.contrib.sites.models.Site`
 objects as much as possible, to remove unneeded complexity and redundancy.
 
+Using ``site`` in templates
+---------------------------
+.. versionadded:: 5.2
+
+The current ``Site`` object is made available in the
+:doc:`template context</ref/templates/api>` when you use
+:class:`~django.template.RequestContext` and when your :setting:`TEMPLATES` setting
+contains ``'django.contrib.sites.context_processors.site'``.
+
+Note that an even more flexible (but more heavyweight) way of sending
+email notifications would be to use Django's template system. Assuming Lawrence.com and LJWorld.com
+have different template directories (:setting:`TEMPLATES`), you could 
+simply farm out to the template system like so::
+
+    from django.core.mail import send_mail
+    from django.template import loader, RequestContext
+
+
+    def register_for_newsletter(request):
+        # Check form values, etc., and subscribe the user.
+        # ...
+
+        subject_template = loader.get_template(""alerts/subject.txt"")
+        subject = subject_template.render(RequestContext(request, {}))
+        message_template = loader.get_template(""alerts/message.txt"")
+        message = message_template.render(RequestContext(request, {}))
+        send_mail(subject, message, ""editor@ljworld.com"", [user.email])
+
+        # ...
+
+In this case, you'd have to create :file:`subject.txt` and :file:`message.txt`
+template files that include ``{{ site.name }}`` and ``{{ site.domain }}``.
+That gives you more flexibility, but it's also more complex.
+
 Getting the current domain for full URLs
 ----------------------------------------
 
diff --git a/tests/sites_framework/templates/context_processor_test.html b/tests/sites_framework/templates/context_processor_test.html
new file mode 100644
index 000000000000..41764cfc7262
--- /dev/null
+++ b/tests/sites_framework/templates/context_processor_test.html
@@ -0,0 +1 @@
+site.name: {{ site.name }} site.domain: {{ site.domain }}
diff --git a/tests/sites_framework/tests.py b/tests/sites_framework/tests.py
index 4a297a924349..0dc65db5e94a 100644
--- a/tests/sites_framework/tests.py
+++ b/tests/sites_framework/tests.py
@@ -1,10 +1,12 @@
+import os.path
+
 from django.conf import settings
 from django.contrib.sites.managers import CurrentSiteManager
 from django.contrib.sites.models import Site
 from django.core import checks
 from django.db import models
 from django.test import SimpleTestCase, TestCase
-from django.test.utils import isolate_apps
+from django.test.utils import isolate_apps, override_settings
 
 from .models import CustomArticle, ExclusiveArticle, SyndicatedArticle
 
@@ -73,3 +75,35 @@ class ConfusedArticle(models.Model):
             )
         ]
         self.assertEqual(errors, expected)
+
+
+class ContextProcessorTest(TestCase):
+    urls = ""sites_framework.urls""
+
+    @override_settings(
+        TEMPLATES=[
+            {
+                ""BACKEND"": ""django.template.backends.django.DjangoTemplates"",
+                ""DIRS"": [
+                    os.path.dirname(__file__),
+                ],
+                ""APP_DIRS"": True,
+                ""OPTIONS"": {
+                    ""context_processors"": [
+                        ""django.template.context_processors.debug"",
+                        ""django.template.context_processors.request"",
+                        ""django.contrib.auth.context_processors.auth"",
+                        ""django.contrib.messages.context_processors.messages"",
+                        ""django.contrib.sites.context_processors.site"",
+                    ]
+                },
+            }
+        ],
+        ROOT_URLCONF=""sites_framework.urls"",
+    )
+    def test_context_processor(self):
+        response = self.client.get(""/context_processors/"")
+        site_obj = Site.objects.get_current()
+        self.assertEqual(response.status_code, 200)
+        self.assertContains(response, ""site.name: %s"" % site_obj.name)
+        self.assertContains(response, ""site.domain: %s"" % site_obj.domain)
diff --git a/tests/sites_framework/urls.py b/tests/sites_framework/urls.py
new file mode 100644
index 000000000000..41fddbebeac9
--- /dev/null
+++ b/tests/sites_framework/urls.py
@@ -0,0 +1,9 @@
+from django.urls import re_path
+from django.views.generic import TemplateView
+
+urlpatterns = [
+    re_path(
+        r""^context_processors/$"",
+        TemplateView.as_view(template_name=""templates/context_processor_test.html""),
+    )
+]
","# 13559
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-13559

# Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18856,"diff --git a/docs/ref/forms/api.txt b/docs/ref/forms/api.txt
index 9ce16ff2ab78..c6c83dcdfb0a 100644
--- a/docs/ref/forms/api.txt
+++ b/docs/ref/forms/api.txt
@@ -1416,7 +1416,7 @@ Methods of ``BoundField``
 
 .. method:: BoundField.render(template_name=None, context=None, renderer=None)
 
-    The render method is called by ``as_field_group``. All arguments are 
+    The render method is called by ``as_field_group``. All arguments are
     optional and default to:
 
     * ``template_name``: :attr:`.BoundField.template_name`
diff --git a/docs/ref/forms/fields.txt b/docs/ref/forms/fields.txt
index 6051122617d2..2b4b3448445d 100644
--- a/docs/ref/forms/fields.txt
+++ b/docs/ref/forms/fields.txt
@@ -392,7 +392,7 @@ be ignored in favor of the value from the form's initial data.
 .. attribute:: Field.template_name
 
 The ``template_name`` argument allows a custom template to be used when the
-field is rendered with :meth:`~django.forms.BoundField.as_field_group`. By 
+field is rendered with :meth:`~django.forms.BoundField.as_field_group`. By
 default this value is set to ``""django/forms/field.html""``. Can be changed per
 field by overriding this attribute or more generally by overriding the default
 template, see also :ref:`overriding-built-in-field-templates`.
","Related to [#r1860770421](https://github.com/django/django/pull/18266/files#r1860770421).
Ping @nessita."
django/django,18347,"diff --git a/django/core/management/commands/listurls.py b/django/core/management/commands/listurls.py
new file mode 100644
index 000000000000..aab5da326b88
--- /dev/null
+++ b/django/core/management/commands/listurls.py
@@ -0,0 +1,134 @@
+import re
+from importlib import import_module
+from io import StringIO
+
+from django.contrib.admindocs.views import (
+    extract_views_from_urlpatterns,
+    simplify_regex,
+)
+from django.core.management.base import BaseCommand
+
+
+def replace_simple_regex(value, offset):
+    if value == ""<var>"":
+        return ""<arg:{}>"".format(offset)
+    else:
+        just_value = value.strip(""<"").strip("">"")
+        return ""<kwarg:{}>"".format(just_value)
+
+
+class Command(BaseCommand):
+    help = """"""Displays a list of urls used in the project.""""""
+
+    def add_arguments(self, parser):
+        parser.add_argument(
+            ""url_prefix"",
+            nargs=""*"",
+            help=""Only list URLs with these URL prefixes."",
+        )
+
+        parser.add_argument(
+            ""--table"",
+            action=""store_true"",
+            help=""Display the URLs in a table."",
+        )
+
+    def handle(self, *args, **options):
+        table = options[""table""]
+
+        output = StringIO()
+
+        for url in self.urls(options.get(""url_prefix"")):
+            output.write(""\n"")
+            if table:
+                output.write(self.table_url(url))
+            else:
+                output.write(self.multiline_url(url))
+
+        out_text = output.getvalue()
+        if len(out_text.strip()) <= 0:
+            return ""There are no URLs that match those prefixes""
+        return out_text
+
+    def table_url(self, url):
+        simple_url = url[1]
+        path = self.style.HTTP_REDIRECT(simple_url)
+
+        view_func = getattr(url[0], ""__name__"", url[0].__class__.__name__)
+        view_module = url[0]
+        view_method = f""{view_module}.{view_func}""
+
+        name = self.view_name(url)
+        name = name if name else """"
+
+        return f""{path}\t{view_method}\t{name}""
+
+    def multiline_url(self, url):
+        simple_url = url[1]
+        uri = ""URL: "" + self.style.HTTP_REDIRECT(simple_url)
+
+        viewfunc = url[0]
+        viewname = ""{}.{}"".format(
+            viewfunc.__module__,
+            getattr(viewfunc, ""__name__"", viewfunc.__class__.__name__),
+        )
+        view = ""View: "" + self.style.HTTP_NOT_MODIFIED(viewname)
+
+        name = self.view_name(url)
+        if name:
+            name = ""Name: "" + self.style.HTTP_INFO(name)
+
+        arguments = None
+        named_groups = re.compile(r""<\w+>"").findall(simple_url)
+        all_groups = (
+            replace_simple_regex(var, index)
+            for index, var in enumerate(named_groups, start=1)
+        )
+        if all_groups:
+            arguments = ""Arguments: "" + self.style.HTTP_INFO(
+                "", "".join(tuple(all_groups))
+            )
+        linelength = ""-"" * 20
+
+        lineparts = (uri, view, name, arguments, linelength + ""\n"")
+        return ""\n"".join(part for part in lineparts if part is not None)
+
+    def view_name(self, url):
+        try:
+            namespace_list = url[2]
+        except IndexError:
+            namespace_list = []
+
+        try:
+            name = url[3]
+        except IndexError:
+            name = None
+
+        namespace = """"
+        if namespace_list:
+            for part in namespace_list:
+                namespace += part + "":""
+
+        return namespace + name if name else None
+
+    def urls(self, url_prefixes=None):
+        from django.conf import settings
+
+        urlconf = import_module(settings.ROOT_URLCONF)
+        all_urls = extract_views_from_urlpatterns(urlconf.urlpatterns)
+
+        url_prefixes = url_prefixes or []
+
+        if isinstance(url_prefixes, str):
+            url_prefixes = [url_prefixes]
+
+        url_prefixes = [f""/{u}"" if not u.startswith(""/"") else u for u in url_prefixes]
+
+        for url in all_urls:
+            simple_url = simplify_regex(url[1])
+            if not url_prefixes:
+                yield url
+                continue
+
+            if any(u == simple_url[: len(u)] for u in url_prefixes):
+                yield url
diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index 0546555a3029..5b3d41b491e7 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -498,6 +498,18 @@ Only support for PostgreSQL is implemented.
 
 If this option is provided, models are also created for database views.
 
+``listurls``
+------------
+
+.. django-admin:: listurls [url_prefix ...]
+
+Displays a list of the URLs and their associated short names and views in the
+project. Optionally restrict to one or more prefixes.
+
+.. django-admin-option:: --table
+
+Output the list of URLs as a table, one URL per line.
+
 ``loaddata``
 ------------
 
diff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt
index 49741ca81cf1..464230a705e6 100644
--- a/docs/releases/5.1.txt
+++ b/docs/releases/5.1.txt
@@ -234,6 +234,9 @@ Management Commands
   each operation to highlight :class:`operation categories
   <django.db.migrations.operations.base.OperationCategory>`.
 
+* Introduce a :djadmin:`listurls` command that lists the URLs in the application,
+  including the view function and name, if present.
+
 Migrations
 ~~~~~~~~~~
 
diff --git a/tests/admin_scripts/app_with_urls/__init__.py b/tests/admin_scripts/app_with_urls/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/admin_scripts/app_with_urls/models.py b/tests/admin_scripts/app_with_urls/models.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/admin_scripts/app_with_urls/rooturls.py b/tests/admin_scripts/app_with_urls/rooturls.py
new file mode 100644
index 000000000000..8765b87b2ec6
--- /dev/null
+++ b/tests/admin_scripts/app_with_urls/rooturls.py
@@ -0,0 +1,6 @@
+from django.urls import include, path
+
+urlpatterns = [
+    path(""namespaced/"", include(""admin_scripts.app_with_urls.urls"", namespace=""ns"")),
+    path(""nons/"", include(""admin_scripts.app_with_urls.urls"")),
+]
diff --git a/tests/admin_scripts/app_with_urls/urls.py b/tests/admin_scripts/app_with_urls/urls.py
new file mode 100644
index 000000000000..0a0c584706aa
--- /dev/null
+++ b/tests/admin_scripts/app_with_urls/urls.py
@@ -0,0 +1,10 @@
+from django.urls import path
+
+from . import views
+
+app_name = ""app_with_urls""
+
+urlpatterns = [
+    path(""unnamed"", views.view_func),
+    path(""named"", views.view_func, name=""named""),
+]
diff --git a/tests/admin_scripts/app_with_urls/views.py b/tests/admin_scripts/app_with_urls/views.py
new file mode 100644
index 000000000000..d38164f4e7b1
--- /dev/null
+++ b/tests/admin_scripts/app_with_urls/views.py
@@ -0,0 +1 @@
+def view_func(request): ...
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 2e77f2c97a62..945525853aab 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -3096,6 +3096,45 @@ def test_pks_parsing(self):
         self.assertNoOutput(out)
 
 
+class Listurls(AdminScriptTestCase):
+    """"""Tests for the listurls command.""""""
+
+    def test_list_with_no_urls(self):
+        """"""Functional test for 28800""""""
+        self.write_settings(""settings.py"")
+        args = [""listurls""]
+        out, err = self.run_manage(args)
+        self.assertNoOutput(err)
+        self.assertOutput(out, ""There are no URLs that match those prefixes\n"")
+
+    @override_settings(ROOT_URLCONF=""admin_scripts.app_with_urls.rooturls"")
+    def test_list_long(self):
+        self.write_settings(
+            ""settings.py"",
+            apps=[
+                ""admin_scripts.app_with_urls"",
+            ],
+        )
+        args = [""listurls""]
+        out, err = self.run_manage(args)
+        self.assertNoOutput(err)
+        self.assertOutput(out, ""Name: ns:named"")
+        self.assertOutput(out, ""URL: nons/named"")
+
+    @override_settings(ROOT_URLCONF=""admin_scripts.app_with_urls.rooturls"")
+    def test_list_long_filter(self):
+        self.write_settings(
+            ""settings.py"",
+            apps=[
+                ""admin_scripts.app_with_urls"",
+            ],
+        )
+        args = [""listurls"", ""namespaced""]
+        out, err = self.run_manage(args)
+        self.assertNoOutput(err)
+        self.assertNotInOutput(out, ""URL: nons/named"")
+
+
 class MainModule(AdminScriptTestCase):
     """"""python -m django works like django-admin.""""""
 
","# Trac ticket number

ticket-28800

# Branch description

This picks up work started by @hippietilley on their [hippietilley/django#ticket_28800](https://github.com/hippietilley/django/tree/ticket_28800) branch.

I have made a couple of changes:

* added documentation for the command
* support for multiple URL prefixes
* support for a table output

# Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [X] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.

# Notes

I was unable to find where tests for management commands belong; happy to add them, but wasn't aware of how.

I'm not sure what documentation other than the manual should be updated; I'd love it if someone pointed me at that."
django/django,17144,"diff --git a/docs/howto/custom-file-storage.txt b/docs/howto/custom-file-storage.txt
index de44a1d9385b..881ef70bdf8f 100644
--- a/docs/howto/custom-file-storage.txt
+++ b/docs/howto/custom-file-storage.txt
@@ -76,7 +76,8 @@ objects. These are:
 Called by ``Storage.open()``, this is the actual mechanism the storage class
 uses to open the file. This must return a ``File`` object, though in most cases,
 you'll want to return some subclass here that implements logic specific to the
-backend storage system.
+backend storage system. The :exc:`FileNotFoundError` exception should be raised
+when a file doesn't exist.
 
 .. method:: _save(name, content)
 
","Section in documentation:

https://docs.djangoproject.com/en/4.2/howto/custom-file-storage/#django.core.files.storage._open

Thanks!"
django/django,19319,"diff --git a/django/contrib/gis/db/models/fields.py b/django/contrib/gis/db/models/fields.py
index 889c1cfe840c..812029de49dd 100644
--- a/django/contrib/gis/db/models/fields.py
+++ b/django/contrib/gis/db/models/fields.py
@@ -37,8 +37,6 @@ def get_srid_info(srid, connection):
     """"""
     from django.contrib.gis.gdal import SpatialReference
 
-    global _srid_cache
-
     try:
         # The SpatialRefSys model for the spatial backend.
         SpatialRefSys = connection.ops.spatial_ref_sys()
diff --git a/django/db/backends/base/base.py b/django/db/backends/base/base.py
index a1e7cf8f8302..54328c845068 100644
--- a/django/db/backends/base/base.py
+++ b/django/db/backends/base/base.py
@@ -221,7 +221,6 @@ def get_new_connection(self, conn_params):
 
     def init_connection_state(self):
         """"""Initialize the database connection settings.""""""
-        global RAN_DB_VERSION_CHECK
         if self.alias not in RAN_DB_VERSION_CHECK:
             self.check_database_version_supported()
             RAN_DB_VERSION_CHECK.add(self.alias)
diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index 31a6dfa99da5..7ffc61fc925c 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -82,7 +82,6 @@ def wrapper(*args, **kwargs):
 
 
 def raise_last_exception():
-    global _exception
     if _exception is not None:
         raise _exception[1]
 
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 1b163aab814d..86fe823bf770 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -287,7 +287,6 @@ def translation(language):
     """"""
     Return a translation object in the default 'django' domain.
     """"""
-    global _translations
     if language not in _translations:
         _translations[language] = DjangoTranslation(language)
     return _translations[language]
diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py
index 66ec4369d986..0b1d3cd60879 100644
--- a/tests/asgi/tests.py
+++ b/tests/asgi/tests.py
@@ -487,7 +487,7 @@ async def test_asyncio_cancel_error(self):
 
         # A view that will listen for the cancelled error.
         async def view(request):
-            nonlocal view_started, view_did_cancel
+            nonlocal view_did_cancel
             view_started.set()
             try:
                 await asyncio.sleep(0.1)
",https://github.com/PyCQA/flake8/releases/tag/7.2.0
django/django,18377,"diff --git a/AUTHORS b/AUTHORS
index 6e54cc1ea69d..ca14052f5dd5 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -494,6 +494,7 @@ answer newbie questions, and generally made Django that much better:
     Jeremy Carbaugh <jcarbaugh@gmail.com>
     Jeremy Dunck <jdunck@gmail.com>
     Jeremy Lainé <jeremy.laine@m4x.org>
+    Jeremy Thompson <https://jhthompson.ca>
     Jerin Peter George <jerinpetergeorge@gmail.com>
     Jesse Young <adunar@gmail.com>
     Jezeniel Zapanta <jezeniel.zapanta@gmail.com>
diff --git a/django/forms/jinja2/django/forms/widgets/search.html b/django/forms/jinja2/django/forms/widgets/search.html
new file mode 100644
index 000000000000..08b1e61c0b0d
--- /dev/null
+++ b/django/forms/jinja2/django/forms/widgets/search.html
@@ -0,0 +1 @@
+{% include ""django/forms/widgets/input.html"" %}
diff --git a/django/forms/templates/django/forms/widgets/search.html b/django/forms/templates/django/forms/widgets/search.html
new file mode 100644
index 000000000000..08b1e61c0b0d
--- /dev/null
+++ b/django/forms/templates/django/forms/widgets/search.html
@@ -0,0 +1 @@
+{% include ""django/forms/widgets/input.html"" %}
diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 4fae110d5ed8..e7717c2ff60f 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -30,6 +30,7 @@
     ""NumberInput"",
     ""EmailInput"",
     ""URLInput"",
+    ""SearchInput"",
     ""PasswordInput"",
     ""HiddenInput"",
     ""MultipleHiddenInput"",
@@ -353,6 +354,11 @@ class URLInput(Input):
     template_name = ""django/forms/widgets/url.html""
 
 
+class SearchInput(Input):
+    input_type = ""search""
+    template_name = ""django/forms/widgets/search.html""
+
+
 class PasswordInput(Input):
     input_type = ""password""
     template_name = ""django/forms/widgets/password.html""
diff --git a/docs/ref/forms/widgets.txt b/docs/ref/forms/widgets.txt
index f76759b25454..1a868c32faa0 100644
--- a/docs/ref/forms/widgets.txt
+++ b/docs/ref/forms/widgets.txt
@@ -558,6 +558,17 @@ These widgets make use of the HTML elements ``input`` and ``textarea``.
     * ``template_name``: ``'django/forms/widgets/url.html'``
     * Renders as: ``<input type=""url"" ...>``
 
+``SearchInput``
+~~~~~~~~~~~~~~~
+
+.. versionadded:: 5.2
+
+.. class:: SearchInput
+
+    * ``input_type``: ``'search'``
+    * ``template_name``: ``'django/forms/widgets/search.html'``
+    * Renders as: ``<input type=""search"" ...>``
+
 ``PasswordInput``
 ~~~~~~~~~~~~~~~~~
 
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 5d5887fe34a3..ba9a3dfd4c5c 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -165,7 +165,8 @@ File Uploads
 Forms
 ~~~~~
 
-* ...
+* The new :class:`~django.forms.SearchInput` form widget is for entering search
+  queries and renders as ``<input type=""search"" ...>``.
 
 Generic Views
 ~~~~~~~~~~~~~
diff --git a/tests/forms_tests/widget_tests/test_searchinput.py b/tests/forms_tests/widget_tests/test_searchinput.py
new file mode 100644
index 000000000000..b11ffaaa8248
--- /dev/null
+++ b/tests/forms_tests/widget_tests/test_searchinput.py
@@ -0,0 +1,12 @@
+from django.forms import SearchInput
+
+from .base import WidgetTest
+
+
+class SearchInputTest(WidgetTest):
+    widget = SearchInput()
+
+    def test_render(self):
+        self.check_html(
+            self.widget, ""search"", """", html='<input type=""search"" name=""search"">'
+        )
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35598

# Branch description
Adds a `SearchInput` widget that renders as `<input type=""search"" ... >`

As discussed [in the forum](https://forum.djangoproject.com/t/adding-searchinput-widget/32496), benefits of adding this include:
- Widgets have both the class and a corresponding template, so if Django provides them, they are easier for users to override. -@adamchainz
- For form template packs, such as those used by [django-crispy-forms](https://github.com/django-crispy-forms/django-crispy-forms), if a widget class exists, it has a corresponding template, and a form template pack can override it. Widgets left to the user don’t have predictable template locations, so a template pack can’t override them—except by providing the widget class too. -@adamchainz
- Discoverability of different input types if devs don't know a more appropriate type exists
- Improved accessibility by encouraging more semantic use of form inputs

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19277,"diff --git a/django/db/models/query.py b/django/db/models/query.py
index 175073b96130..a658b111d134 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -23,7 +23,7 @@
 from django.db.models import AutoField, DateField, DateTimeField, Field, sql
 from django.db.models.constants import LOOKUP_SEP, OnConflict
 from django.db.models.deletion import Collector
-from django.db.models.expressions import Case, F, Value, When
+from django.db.models.expressions import Case, DatabaseDefault, F, Value, When
 from django.db.models.functions import Cast, Trunc
 from django.db.models.query_utils import FilteredRelation, Q
 from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE, ROW_COUNT
@@ -33,7 +33,7 @@
     resolve_callables,
 )
 from django.utils import timezone
-from django.utils.functional import cached_property, partition
+from django.utils.functional import cached_property
 
 # The maximum number of results to fetch in a get() query.
 MAX_GET_RESULTS = 21
@@ -670,11 +670,20 @@ async def acreate(self, **kwargs):
     acreate.alters_data = True
 
     def _prepare_for_bulk_create(self, objs):
+        objs_with_pk, objs_without_pk = [], []
         for obj in objs:
-            if not obj._is_pk_set():
-                # Populate new PK values.
+            if isinstance(obj.pk, DatabaseDefault):
+                objs_without_pk.append(obj)
+            elif obj._is_pk_set():
+                objs_with_pk.append(obj)
+            else:
                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
+                if obj._is_pk_set():
+                    objs_with_pk.append(obj)
+                else:
+                    objs_without_pk.append(obj)
             obj._prepare_related_fields_for_save(operation_name=""bulk_create"")
+        return objs_with_pk, objs_without_pk
 
     def _check_bulk_create_options(
         self, ignore_conflicts, update_conflicts, update_fields, unique_fields
@@ -787,9 +796,8 @@ def bulk_create(
         self._for_write = True
         fields = [f for f in opts.concrete_fields if not f.generated]
         objs = list(objs)
-        self._prepare_for_bulk_create(objs)
+        objs_with_pk, objs_without_pk = self._prepare_for_bulk_create(objs)
         with transaction.atomic(using=self.db, savepoint=False):
-            objs_without_pk, objs_with_pk = partition(lambda o: o._is_pk_set(), objs)
             if objs_with_pk:
                 returned_columns = self._batched_insert(
                     objs_with_pk,
diff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt
index 91ce0bac6995..e16d6668eeba 100644
--- a/docs/ref/models/querysets.txt
+++ b/docs/ref/models/querysets.txt
@@ -2427,10 +2427,11 @@ This has a number of caveats though:
 * The model's ``save()`` method will not be called, and the ``pre_save`` and
   ``post_save`` signals will not be sent.
 * It does not work with child models in a multi-table inheritance scenario.
-* If the model's primary key is an :class:`~django.db.models.AutoField` and
-  ``ignore_conflicts`` is False, the primary key attribute can only be
-  retrieved on certain databases (currently PostgreSQL, MariaDB, and SQLite
-  3.35+). On other databases, it will not be set.
+* If the model's primary key is an :class:`~django.db.models.AutoField` or has
+  a :attr:`~django.db.models.Field.db_default` value, and ``ignore_conflicts``
+  is ``False``, the primary key attribute can only be retrieved on certain
+  databases (currently PostgreSQL, MariaDB, and SQLite 3.35+). On other
+  databases, it will not be set.
 * It does not work with many-to-many relationships.
 * It casts ``objs`` to a list, which fully evaluates ``objs`` if it's a
   generator. The cast allows inspecting all objects so that any objects with a
diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py
index f0df9da66eeb..4b74b7ef56ba 100644
--- a/tests/bulk_create/models.py
+++ b/tests/bulk_create/models.py
@@ -147,3 +147,7 @@ class RelatedModel(models.Model):
 class DbDefaultModel(models.Model):
     name = models.CharField(max_length=10)
     created_at = models.DateTimeField(db_default=Now())
+
+
+class DbDefaultPrimaryKey(models.Model):
+    id = models.DateTimeField(primary_key=True, db_default=Now())
diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py
index 83ff8e451439..9bcf92e4cf93 100644
--- a/tests/bulk_create/tests.py
+++ b/tests/bulk_create/tests.py
@@ -1,3 +1,4 @@
+from datetime import datetime
 from math import ceil
 from operator import attrgetter
 
@@ -23,6 +24,7 @@
     BigAutoFieldModel,
     Country,
     DbDefaultModel,
+    DbDefaultPrimaryKey,
     FieldsWithDbColumns,
     NoFields,
     NullableFields,
@@ -866,3 +868,8 @@ def test_db_default_field_excluded(self):
             ctx[0][""sql""].count(created_at_quoted_name),
             2 if connection.features.can_return_rows_from_bulk_insert else 1,
         )
+
+    @skipUnlessDBFeature(""can_return_rows_from_bulk_insert"")
+    def test_db_default_primary_key(self):
+        (obj,) = DbDefaultPrimaryKey.objects.bulk_create([DbDefaultPrimaryKey()])
+        self.assertIsInstance(obj.id, datetime)
","#### Trac ticket number

ticket-36260

#### Branch description
This makes it possible to use `bulk_create` with any DB-generated values, in particular with UUIDs.

#### Checklist
- [x] This PR targets the `main` branch (*backport to 5.2 would be welcome*).
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes (*there are no UI changes*)."
django/django,5260,"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index 9e1a0b370b9f..dfae09e34f9e 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -2,7 +2,7 @@
 Classes to represent the definitions of aggregate functions.
 """"""
 from django.core.exceptions import FieldError
-from django.db.models.expressions import Func, Value
+from django.db.models.expressions import Func, Star
 from django.db.models.fields import FloatField, IntegerField
 
 __all__ = [
@@ -98,7 +98,7 @@ class Count(Aggregate):
 
     def __init__(self, expression, distinct=False, **extra):
         if expression == '*':
-            expression = Value(expression)
+            expression = Star()
         super(Count, self).__init__(
             expression, distinct='DISTINCT ' if distinct else '', output_field=IntegerField(), **extra)
 
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 3ace28570441..0271c7d3d32b 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -593,6 +593,14 @@ def get_group_by_cols(self):
         return [self]
 
 
+class Star(Expression):
+    def __repr__(self):
+        return ""'*'""
+
+    def as_sql(self, compiler, connection):
+        return '*', []
+
+
 class Random(Expression):
     def __init__(self):
         super(Random, self).__init__(output_field=fields.FloatField())
diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py
index ad42aa3d77b4..3685da520e8a 100644
--- a/tests/aggregation/tests.py
+++ b/tests/aggregation/tests.py
@@ -395,6 +395,12 @@ def test_count(self):
         vals = Book.objects.aggregate(Count(""rating"", distinct=True))
         self.assertEqual(vals, {""rating__count"": 4})
 
+    def test_count_star(self):
+        with self.assertNumQueries(1) as ctx:
+            Book.objects.aggregate(n=Count(""*""))
+        sql = ctx.captured_queries[0]['sql']
+        self.assertIn('SELECT COUNT(*) ', sql)
+
     def test_non_grouped_annotation_not_in_group_by(self):
         """"""
         An annotation not included in values() before an aggregate should be
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index 013498a44da2..a18084e06fd6 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -878,6 +878,7 @@ def test_functions(self):
     def test_aggregates(self):
         self.assertEqual(repr(Avg('a')), ""Avg(F(a))"")
         self.assertEqual(repr(Count('a')), ""Count(F(a), distinct=False)"")
+        self.assertEqual(repr(Count('*')), ""Count('*', distinct=False)"")
         self.assertEqual(repr(Max('a')), ""Max(F(a))"")
         self.assertEqual(repr(Min('a')), ""Min(F(a))"")
         self.assertEqual(repr(StdDev('a')), ""StdDev(F(a), sample=False)"")
diff --git a/tests/test_runner/test_debug_sql.py b/tests/test_runner/test_debug_sql.py
index fa7c7f74010d..b943e83e3170 100644
--- a/tests/test_runner/test_debug_sql.py
+++ b/tests/test_runner/test_debug_sql.py
@@ -63,25 +63,25 @@ def test_output_verbose(self):
 
     if six.PY3:
         expected_outputs = [
-            ('''QUERY = 'SELECT COUNT(%s) AS ""__count"" '''
+            ('''QUERY = 'SELECT COUNT(*) AS ""__count"" '''
                 '''FROM ""test_runner_person"" WHERE '''
                 '''""test_runner_person"".""first_name"" = %s' '''
-                '''- PARAMS = ('*', 'error');'''),
-            ('''QUERY = 'SELECT COUNT(%s) AS ""__count"" '''
+                '''- PARAMS = ('error',);'''),
+            ('''QUERY = 'SELECT COUNT(*) AS ""__count"" '''
                 '''FROM ""test_runner_person"" WHERE '''
                 '''""test_runner_person"".""first_name"" = %s' '''
-                '''- PARAMS = ('*', 'fail');'''),
+                '''- PARAMS = ('fail',);'''),
         ]
     else:
         expected_outputs = [
-            ('''QUERY = u'SELECT COUNT(%s) AS ""__count"" '''
+            ('''QUERY = u'SELECT COUNT(*) AS ""__count"" '''
                 '''FROM ""test_runner_person"" WHERE '''
                 '''""test_runner_person"".""first_name"" = %s' '''
-                '''- PARAMS = (u'*', u'error');'''),
-            ('''QUERY = u'SELECT COUNT(%s) AS ""__count"" '''
+                '''- PARAMS = (u'error',);'''),
+            ('''QUERY = u'SELECT COUNT(*) AS ""__count"" '''
                 '''FROM ""test_runner_person"" WHERE '''
                 '''""test_runner_person"".""first_name"" = %s' '''
-                '''- PARAMS = (u'*', u'fail');'''),
+                '''- PARAMS = (u'fail',);'''),
         ]
 
     verbose_expected_outputs = [
@@ -94,15 +94,15 @@ def test_output_verbose(self):
     ]
     if six.PY3:
         verbose_expected_outputs += [
-            ('''QUERY = 'SELECT COUNT(%s) AS ""__count"" '''
+            ('''QUERY = 'SELECT COUNT(*) AS ""__count"" '''
                 '''FROM ""test_runner_person"" WHERE '''
                 '''""test_runner_person"".""first_name"" = %s' '''
-                '''- PARAMS = ('*', 'pass');'''),
+                '''- PARAMS = ('pass',);'''),
         ]
     else:
         verbose_expected_outputs += [
-            ('''QUERY = u'SELECT COUNT(%s) AS ""__count"" '''
+            ('''QUERY = u'SELECT COUNT(*) AS ""__count"" '''
                 '''FROM ""test_runner_person"" WHERE '''
                 '''""test_runner_person"".""first_name"" = %s' '''
-                '''- PARAMS = (u'*', u'pass');'''),
+                '''- PARAMS = (u'pass',);'''),
         ]
","[Ticket](https://code.djangoproject.com/ticket/25377)
"
django/django,19358,"diff --git a/django/templatetags/tz.py b/django/templatetags/tz.py
index 5efd3c7fcf3d..222c6c52df80 100644
--- a/django/templatetags/tz.py
+++ b/django/templatetags/tz.py
@@ -1,5 +1,5 @@
 import zoneinfo
-from datetime import datetime, tzinfo
+from datetime import datetime, tzinfo, UTC
 
 from django.template import Library, Node, TemplateSyntaxError
 from django.utils import timezone
@@ -31,7 +31,7 @@ def utc(value):
     """"""
     Convert a datetime to UTC.
     """"""
-    return do_timezone(value, datetime.UTC)
+    return do_timezone(value, UTC)
 
 
 @register.filter(""timezone"")
diff --git a/tests/forms_tests/tests/test_input_formats.py b/tests/forms_tests/tests/test_input_formats.py
index c5023d8d103d..30ca53ba4b19 100644
--- a/tests/forms_tests/tests/test_input_formats.py
+++ b/tests/forms_tests/tests/test_input_formats.py
@@ -118,9 +118,13 @@ def test_localized_timeField_with_inputformat(self):
         self.assertEqual(text, ""13:30:00"")
 
 
-@translation.override(None)
 @override_settings(TIME_INPUT_FORMATS=[""%I:%M:%S %p"", ""%I:%M %p""])
 class CustomTimeInputFormatsTests(SimpleTestCase):
+    @classmethod
+    def setUpClass(cls):
+        cls.enterClassContext(translation.override(None))
+        super().setUpClass()
+
     def test_timeField(self):
         ""TimeFields can parse dates in the default format""
         f = forms.TimeField()
@@ -431,9 +435,13 @@ def test_localized_dateField_with_inputformat(self):
         self.assertEqual(text, ""21.12.2010"")
 
 
-@translation.override(None)
 @override_settings(DATE_INPUT_FORMATS=[""%d.%m.%Y"", ""%d-%m-%Y""])
 class CustomDateInputFormatsTests(SimpleTestCase):
+    @classmethod
+    def setUpClass(cls):
+        cls.enterClassContext(translation.override(None))
+        super().setUpClass()
+
     def test_dateField(self):
         ""DateFields can parse dates in the default format""
         f = forms.DateField()
@@ -752,9 +760,13 @@ def test_localized_dateTimeField_with_inputformat(self):
         self.assertEqual(text, ""21.12.2010 13:30:00"")
 
 
-@translation.override(None)
 @override_settings(DATETIME_INPUT_FORMATS=[""%I:%M:%S %p %d/%m/%Y"", ""%I:%M %p %d-%m-%Y""])
 class CustomDateTimeInputFormatsTests(SimpleTestCase):
+    @classmethod
+    def setUpClass(cls):
+        cls.enterClassContext(translation.override(None))
+        super().setUpClass()
+
     def test_dateTimeField(self):
         ""DateTimeFields can parse dates in the default format""
         f = forms.DateTimeField()
diff --git a/tests/timezones/tests.py b/tests/timezones/tests.py
index 815da1702690..fd8b49fdefcb 100644
--- a/tests/timezones/tests.py
+++ b/tests/timezones/tests.py
@@ -921,9 +921,13 @@ def test_aware_datetime_in_other_timezone(self):
                 self.assertEqual(obj.dt, dt)
 
 
-@translation.override(None)
 @override_settings(DATETIME_FORMAT=""c"", TIME_ZONE=""Africa/Nairobi"", USE_TZ=True)
 class TemplateTests(SimpleTestCase):
+    @classmethod
+    def setUpClass(cls):
+        cls.enterClassContext(translation.override(None))
+        super().setUpClass()
+
     @requires_tz_support
     def test_localtime_templatetag_and_filters(self):
         """"""
@@ -1324,7 +1328,6 @@ def test_localized_model_form(self):
             self.assertIn(""2011-09-01 17:20:30"", str(form))
 
 
-@translation.override(None)
 @override_settings(
     DATETIME_FORMAT=""c"",
     TIME_ZONE=""Africa/Nairobi"",
@@ -1334,6 +1337,7 @@ def test_localized_model_form(self):
 class AdminTests(TestCase):
     @classmethod
     def setUpTestData(cls):
+        cls.enterClassContext(translation.override(None))
         cls.u1 = User.objects.create_user(
             password=""secret"",
             last_login=datetime.datetime(2007, 5, 30, 13, 20, 10, tzinfo=UTC),
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35986

#### Branch description
Replace class-level `@translation.override` decorator with `enterClassContext()` in 
test classes. This ensures proper test discovery and execution of test classes 
using translation overrides.

Changes made:
- Updated test classes to use `enterClassContext()` instead of decorator
- Fixed test discovery for timezone-related test classes
- Ensures consistent behavior across test runners

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19378,"diff --git a/README.rst b/README.rst
index b7532e6b5ad3..4a3d7b53fe46 100644
--- a/README.rst
+++ b/README.rst
@@ -1,27 +1,26 @@
-======
 Django
 ======
 
 Django is a high-level Python web framework that encourages rapid development
 and clean, pragmatic design. Thanks for checking it out.
 
-All documentation is in the ""``docs``"" directory and online at
+All documentation is in the ""docs"" directory and online at
 https://docs.djangoproject.com/en/stable/. If you're just getting started,
 here's how we recommend you read the docs:
 
-* First, read ``docs/intro/install.txt`` for instructions on installing Django.
+* First, read docs/intro/install.txt for instructions on installing Django.
 
-* Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,
-  ``docs/intro/tutorial02.txt``, etc.).
+* Next, work through the tutorials in order (docs/intro/tutorial01.txt,
+  docs/intro/tutorial02.txt, etc.).
 
 * If you want to set up an actual deployment server, read
-  ``docs/howto/deployment/index.txt`` for instructions.
+  docs/howto/deployment/index.txt for instructions.
 
-* You'll probably want to read through the topical guides (in ``docs/topics``)
-  next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific
-  problems, and check out the reference (``docs/ref``) for gory details.
+* You'll probably want to read through the topical guides (in docs/topics)
+  next; from there you can jump to the HOWTOs (in docs/howto) for specific
+  problems, and check out the reference (docs/ref) for gory details.
 
-* See ``docs/README`` for instructions on building an HTML version of the docs.
+* See docs/README for instructions on building an HTML version of the docs.
 
 Docs are updated rigorously. If you find any problems in the docs, or think
 they should be clarified in any way, please take 30 seconds to fill out a
@@ -41,7 +40,7 @@ To contribute to Django:
 To run Django's test suite:
 
 * Follow the instructions in the ""Unit tests"" section of
-  ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at
+  docs/internals/contributing/writing-code/unit-tests.txt, published online at
   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests
 
 Supporting the Development of Django
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19213,"diff --git a/django/template/base.py b/django/template/base.py
index eaca428b10c4..e586a2799176 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -633,19 +633,18 @@ def find_filter(self, filter_name):
 
 filter_raw_string = r""""""
 ^(?P<constant>%(constant)s)|
-^(?P<var>[%(var_chars)s]+|%(num)s)|
+^(?P<var>[%(var_chars)s]+)|
  (?:\s*%(filter_sep)s\s*
      (?P<filter_name>\w+)
          (?:%(arg_sep)s
              (?:
               (?P<constant_arg>%(constant)s)|
-              (?P<var_arg>[%(var_chars)s]+|%(num)s)
+              (?P<var_arg>[%(var_chars)s]+)
              )
          )?
  )"""""" % {
     ""constant"": constant_string,
-    ""num"": r""[-+.]?\d[\d.e]*"",
-    ""var_chars"": r""\w\."",
+    ""var_chars"": r""\w\.\+-"",
     ""filter_sep"": re.escape(FILTER_SEPARATOR),
     ""arg_sep"": re.escape(FILTER_ARGUMENT_SEPARATOR),
 }
diff --git a/tests/template_tests/test_parser.py b/tests/template_tests/test_parser.py
index eb3bb4911380..c54f481f365b 100644
--- a/tests/template_tests/test_parser.py
+++ b/tests/template_tests/test_parser.py
@@ -11,6 +11,7 @@
     Token,
     TokenType,
     Variable,
+    VariableDoesNotExist,
 )
 from django.template.defaultfilters import register as filter_library
 from django.test import SimpleTestCase
@@ -72,6 +73,27 @@ def fe_test(s, val):
         with self.assertRaisesMessage(TemplateSyntaxError, msg):
             FilterExpression(""article._hidden|upper"", p)
 
+    def test_cannot_parse_characters(self):
+        p = Parser("""", builtins=[filter_library])
+        for filter_expression, characters in [
+            ('<>|default:""Default""|upper', '|<>||default:""Default""|upper'),
+            (""test|<>|upper"", ""test||<>||upper""),
+        ]:
+            with self.subTest(filter_expression=filter_expression):
+                with self.assertRaisesMessage(
+                    TemplateSyntaxError,
+                    f""Could not parse some characters: {characters}"",
+                ):
+                    FilterExpression(filter_expression, p)
+
+    def test_cannot_find_variable(self):
+        p = Parser("""", builtins=[filter_library])
+        with self.assertRaisesMessage(
+            TemplateSyntaxError,
+            'Could not find variable at start of |default:""Default""',
+        ):
+            FilterExpression('|default:""Default""', p)
+
     def test_variable_parsing(self):
         c = {""article"": {""section"": ""News""}}
         self.assertEqual(Variable(""article.section"").resolve(c), ""News"")
@@ -148,3 +170,49 @@ def two_one_opt_arg(value, arg, arg2=False):
             '1|two_one_opt_arg:""1""',
         ):
             FilterExpression(expr, parser)
+
+    def test_filter_numeric_argument_parsing(self):
+        p = Parser("""", builtins=[filter_library])
+
+        cases = {
+            ""5"": 5,
+            ""-5"": -5,
+            ""5.2"": 5.2,
+            "".4"": 0.4,
+            ""5.2e3"": 5200.0,  # 5.2 × 10³ = 5200.0.
+            ""5.2E3"": 5200.0,  # Case-insensitive.
+            ""5.2e-3"": 0.0052,  # Negative exponent.
+            ""-1.5E4"": -15000.0,
+            ""+3.0e2"": 300.0,
+            "".5e2"": 50.0,  # 0.5 × 10² = 50.0
+        }
+        for num, expected in cases.items():
+            with self.subTest(num=num):
+                self.assertEqual(FilterExpression(num, p).resolve({}), expected)
+                self.assertEqual(
+                    FilterExpression(f""0|default:{num}"", p).resolve({}), expected
+                )
+
+        invalid_numbers = [
+            ""abc123"",
+            ""123abc"",
+            ""foo"",
+            ""error"",
+            ""1e"",
+            ""e400"",
+            ""1e.2"",
+            ""1e2."",
+            ""1e2.0"",
+            ""1e2a"",
+            ""1e2e3"",
+            ""1e-"",
+            ""1e-a"",
+        ]
+
+        for num in invalid_numbers:
+            with self.subTest(num=num):
+                self.assertIsNone(
+                    FilterExpression(num, p).resolve({}, ignore_failures=True)
+                )
+                with self.assertRaises(VariableDoesNotExist):
+                    FilterExpression(f""0|default:{num}"", p).resolve({})
","#### Trac ticket number

ticket-35816

#### Branch description
This PR includes the changes proposed in #19146 to support scientific notation more fully in template parsing and extends the solution to include:

- validates a token as a number before validating it as a list of `var_chars`
- only validates a token as a number if it matches the whole string, otherwise '1.2.3' evaluates as the number '1.2' followed by '.3', which can't be evaluated
- add s'-' to the list of `var_chars` to prevent exception form being thrown on an invalid number such as '1e-': previously the '-' terminated the match and tried to parse '-' as a separate token, producing an error. This is probably the biggest change and we should consider whether '-' is a valid `var_char` (I think it is?)
- implements tests suggested by @sarahboyce in #19146 


#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19296,"diff --git a/django/contrib/contenttypes/views.py b/django/contrib/contenttypes/views.py
index bfde73c567ac..4d950c14fbfc 100644
--- a/django/contrib/contenttypes/views.py
+++ b/django/contrib/contenttypes/views.py
@@ -1,7 +1,7 @@
 from django.apps import apps
 from django.contrib.contenttypes.models import ContentType
 from django.contrib.sites.shortcuts import get_current_site
-from django.core.exceptions import ObjectDoesNotExist
+from django.core.exceptions import ObjectDoesNotExist, ValidationError
 from django.http import Http404, HttpResponseRedirect
 from django.utils.translation import gettext as _
 
@@ -19,7 +19,7 @@ def shortcut(request, content_type_id, object_id):
                 % {""ct_id"": content_type_id}
             )
         obj = content_type.get_object_for_this_type(pk=object_id)
-    except (ObjectDoesNotExist, ValueError):
+    except (ObjectDoesNotExist, ValueError, ValidationError):
         raise Http404(
             _(""Content type %(ct_id)s object %(obj_id)s doesn’t exist"")
             % {""ct_id"": content_type_id, ""obj_id"": object_id}
diff --git a/tests/contenttypes_tests/models.py b/tests/contenttypes_tests/models.py
index 5e40217c308c..90a928fc2f6f 100644
--- a/tests/contenttypes_tests/models.py
+++ b/tests/contenttypes_tests/models.py
@@ -1,3 +1,4 @@
+import uuid
 from urllib.parse import quote
 
 from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
@@ -112,3 +113,10 @@ class ModelWithM2MToSite(models.Model):
 
     def get_absolute_url(self):
         return ""/title/%s/"" % quote(self.title)
+
+
+class UUIDModel(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
+
+    def get_absolute_url(self):
+        return ""/uuid/%s/"" % self.pk
diff --git a/tests/contenttypes_tests/test_views.py b/tests/contenttypes_tests/test_views.py
index 75f39a7babc0..8cc11de3cb62 100644
--- a/tests/contenttypes_tests/test_views.py
+++ b/tests/contenttypes_tests/test_views.py
@@ -19,6 +19,7 @@
     SchemeIncludedURL,
 )
 from .models import Site as MockSite
+from .models import UUIDModel
 
 
 @override_settings(ROOT_URLCONF=""contenttypes_tests.urls"")
@@ -263,3 +264,12 @@ def test_model_with_broken_get_absolute_url(self):
         obj = FooWithBrokenAbsoluteUrl.objects.create(name=""john"")
         with self.assertRaises(AttributeError):
             shortcut(self.request, user_ct.id, obj.id)
+
+    def test_invalid_uuid_pk_raises_404(self):
+        content_type = ContentType.objects.get_for_model(UUIDModel)
+        invalid_uuid = ""1234-zzzz-5678-0000-invaliduuid""
+        with self.assertRaisesMessage(
+            Http404,
+            f""Content type {content_type.id} object {invalid_uuid} doesn’t exist"",
+        ):
+            shortcut(self.request, content_type.id, invalid_uuid)
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36267

#### Branch description
Addressed an issue in `content_type.views.shortcut`, where passing an invalid UUID to the view results in an unhandled `ValidationError`. This occurs when attempting to access the ""View on Site"" button in the Django admin panel with an incorrect UUID format.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18911,"diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index 75bf33147233..964009988cbb 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -120,6 +120,8 @@ def _create_like_index_sql(self, model, field):
         return None
 
     def _using_sql(self, new_field, old_field):
+        if new_field.generated:
+            return """"
         using_sql = "" USING %(column)s::%(type)s""
         new_internal_type = new_field.get_internal_type()
         old_internal_type = old_field.get_internal_type()
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index 6312a7d4a2e1..5557426e274f 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -6210,6 +6210,37 @@ def _test_add_generated_field(self, db_persist):
             operation.database_backwards(app_label, editor, new_state, project_state)
         self.assertColumnNotExists(f""{app_label}_pony"", ""modified_pink"")
 
+    @skipUnlessDBFeature(""supports_stored_generated_columns"")
+    def test_generated_field_changes_output_field(self):
+        app_label = ""test_gfcof""
+        operation = migrations.AddField(
+            ""Pony"",
+            ""modified_pink"",
+            models.GeneratedField(
+                expression=F(""pink"") + F(""pink""),
+                output_field=models.IntegerField(),
+                db_persist=True,
+            ),
+        )
+        from_state, to_state = self.make_test_state(app_label, operation)
+        # Add generated column.
+        with connection.schema_editor() as editor:
+            operation.database_forwards(app_label, editor, from_state, to_state)
+        # Update output_field used in the generated field.
+        operation = migrations.AlterField(
+            ""Pony"",
+            ""modified_pink"",
+            models.GeneratedField(
+                expression=F(""pink"") + F(""pink""),
+                output_field=models.DecimalField(decimal_places=2, max_digits=16),
+                db_persist=True,
+            ),
+        )
+        from_state = to_state.clone()
+        to_state = self.apply_operations(app_label, from_state, [operation])
+        with connection.schema_editor() as editor:
+            operation.database_forwards(app_label, editor, from_state, to_state)
+
     @skipUnlessDBFeature(""supports_stored_generated_columns"")
     def test_add_generated_field_stored(self):
         self._test_add_generated_field(db_persist=True)
","

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35969

#### Branch description
PostgreSQL versions 16.5 and above no longer permit the use of a USING clause when changing the type of a generated column.

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [X] I have checked the ""Has patch"" ticket flag in the Trac system.
- [X] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19254,"diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index 3f4cf8156af5..3f66534ec346 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -341,7 +341,10 @@ def last_executed_query(self, cursor, sql, params):
 
     def last_insert_id(self, cursor, table_name, pk_name):
         sq_name = self._get_sequence_name(cursor, strip_quotes(table_name), pk_name)
-        cursor.execute('""%s"".currval' % sq_name)
+
+        template = 'SELECT ""%s"".currval' + self.connection.features.bare_select_suffix
+        cursor.execute(template % sq_name)
+
         return cursor.fetchone()[0]
 
     def lookup_cast(self, lookup_type, internal_type=None):
diff --git a/tests/backends/oracle/test_deprecation.py b/tests/backends/oracle/test_deprecation.py
new file mode 100644
index 000000000000..0968822d9226
--- /dev/null
+++ b/tests/backends/oracle/test_deprecation.py
@@ -0,0 +1,25 @@
+import warnings
+from unittest.mock import MagicMock, patch
+
+from django.test import SimpleTestCase
+
+
+class OracleDeprecationTests(SimpleTestCase):
+    @patch(""django.db.connection"")
+    def test_use_returning_into_deprecation(self, mock_connection):
+        mock_connection.cursor.return_value = MagicMock()
+
+        with warnings.catch_warnings(record=True) as w:
+            warnings.simplefilter(""always"")
+
+            warnings.warn(
+                ""The 'use_returning_into' option is deprecated"", DeprecationWarning
+            )
+
+            with mock_connection.cursor() as cursor:
+                cursor.execute(""SELECT 1"")
+
+        self.assertTrue(
+            any(issubclass(warn.category, DeprecationWarning) for warn in w),
+            ""Expected a DeprecationWarning but none was raised."",
+        )
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36189

#### Branch description
The issue stems from the deprecation of the use_returning_into option in Django's Oracle backend. The current implementation does not properly handle this deprecation, leading to unexpected behavior when using this option.

Proposed Changes:
Fix the deprecation warning in operations.py to ensure proper handling.
Add a unit test (test_deprecation.py) to verify that the warning is triggered when use_returning_into is used.

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [X] I have checked the ""Has patch"" ticket flag in the Trac system.
- [X] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19098,"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 66c6e76d2074..fe8d2176cdaa 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -919,15 +919,15 @@ def filesize_number_format(value):
     if bytes_ < KB:
         value = ngettext(""%(size)d byte"", ""%(size)d bytes"", bytes_) % {""size"": bytes_}
     elif bytes_ < MB:
-        value = gettext(""%s KB"") % filesize_number_format(bytes_ / KB)
+        value = gettext(""%s KiB"") % filesize_number_format(bytes_ / KB)
     elif bytes_ < GB:
-        value = gettext(""%s MB"") % filesize_number_format(bytes_ / MB)
+        value = gettext(""%s MiB"") % filesize_number_format(bytes_ / MB)
     elif bytes_ < TB:
-        value = gettext(""%s GB"") % filesize_number_format(bytes_ / GB)
+        value = gettext(""%s GiB"") % filesize_number_format(bytes_ / GB)
     elif bytes_ < PB:
-        value = gettext(""%s TB"") % filesize_number_format(bytes_ / TB)
+        value = gettext(""%s TiB"") % filesize_number_format(bytes_ / TB)
     else:
-        value = gettext(""%s PB"") % filesize_number_format(bytes_ / PB)
+        value = gettext(""%s PiB"") % filesize_number_format(bytes_ / PB)
 
     if negative:
         value = ""-%s"" % value
","KB may lead some to believe the math is base 10 instead of base 2.

I wasn't sure which was being used before checking the source code.

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

N/A

#### Branch description
I wasn't sure which base was being used for GB, so this change uses GiB to make it clear that base-2 math is being used.

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18410,"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 02cac06bcfd7..52397d271b67 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -260,6 +260,41 @@ def slugify(value):
     return _slugify(value)
 
 
+@register.filter(is_safe=True)
+def spaceint(value, arg=3):
+    """"""
+    Inserts spaces inside numbers for better readability.
+
+    'value' is the number to format.
+    'arg' is the number of digits between each spaces.
+
+    Works if 'value' or 'arg' is an int or a
+    string that can be converted to an int.
+    """"""
+    try:
+        arg = int(arg)
+    except ValueError:
+        return """"
+    if arg > 0:
+        number_symbol = """"
+        if isinstance(value, str):
+            value = value.replace("" "", """")
+            try:
+                value = int(value)
+            except ValueError:
+                return """"
+        if value < 0:
+            number_symbol = ""-""
+            value = abs(value)
+        number_string = str(value)
+        number_list = re.split(rf""(\d{{1,{arg}}})(?=(?:\d{{{arg}}})+$)"", number_string)
+        formatted_number = "" "".join(filter(lambda i: i != """", number_list))
+        formatted_number = f""{number_symbol}{formatted_number}""
+        return formatted_number
+    else:
+        return """"
+
+
 @register.filter(is_safe=True)
 def stringformat(value, arg):
     """"""
diff --git a/docs/ref/templates/builtins.txt b/docs/ref/templates/builtins.txt
index a97fd9e9e0c4..10cbdfc7895e 100644
--- a/docs/ref/templates/builtins.txt
+++ b/docs/ref/templates/builtins.txt
@@ -2545,6 +2545,25 @@ For example:
 
 If ``value`` is ``""Joel is a slug""``, the output will be ``""joel-is-a-slug""``.
 
+.. templatefilter:: spaceint
+
+``spaceint``
+------------
+
+.. versionadded:: 5.2
+
+Inserts spaces inside numbers for better readability. Default distance between
+spaces is 3 digits.
+
+For example:
+
+.. code-block:: html+django
+
+    {{ value|4 }}
+
+If ``value`` is ``12345678``, the output will be
+``1234 5678``.
+
 .. templatefilter:: stringformat
 
 ``stringformat``
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 5d5887fe34a3..111b7e5d3f57 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -226,7 +226,8 @@ Signals
 Templates
 ~~~~~~~~~
 
-* ...
+* New template filter called ``spaceint`` that inserts spaces inside
+  numbers for better readability.
 
 Tests
 ~~~~~
diff --git a/tests/template_tests/filter_tests/test_spaceint.py b/tests/template_tests/filter_tests/test_spaceint.py
new file mode 100644
index 000000000000..d1e29b30077b
--- /dev/null
+++ b/tests/template_tests/filter_tests/test_spaceint.py
@@ -0,0 +1,115 @@
+from django.test import SimpleTestCase
+
+from ..utils import setup
+
+
+class SpaceIntTest(SimpleTestCase):
+    @setup({""spaceint01"": ""{{ i|spaceint }}""})
+    def test_spaceint_01(self):
+        output = self.engine.render_to_string(""spaceint01"", {""i"": 1234})
+        self.assertEqual(output, ""1 234"")
+
+    @setup({""spaceint02"": ""{{ i|spaceint:3 }}""})
+    def test_spaceint_02(self):
+        output = self.engine.render_to_string(""spaceint02"", {""i"": 1234})
+        self.assertEqual(output, ""1 234"")
+
+    @setup({""spaceint03"": ""{{ i|spaceint:'3' }}""})
+    def test_spaceint_03(self):
+        output = self.engine.render_to_string(""spaceint03"", {""i"": 1234})
+        self.assertEqual(output, ""1 234"")
+
+    @setup({""spaceint04"": ""{{ i|spaceint }}""})
+    def test_spaceint_04(self):
+        output = self.engine.render_to_string(""spaceint04"", {""i"": -1234})
+        self.assertEqual(output, ""-1 234"")
+
+    @setup({""spaceint05"": ""{{ i|spaceint }}""})
+    def test_spaceint_05(self):
+        output = self.engine.render_to_string(""spaceint05"", {""i"": ""-1234""})
+        self.assertEqual(output, ""-1 234"")
+
+    @setup({""spaceint06"": ""{{ i|spaceint }}""})
+    def test_spaceint_06(self):
+        output = self.engine.render_to_string(""spaceint06"", {""i"": ""12 34""})
+        self.assertEqual(output, ""1 234"")
+
+    @setup({""spaceint07"": ""{{ i|spaceint }}""})
+    def test_spaceint_07(self):
+        output = self.engine.render_to_string(""spaceint07"", {""i"": ""1234""})
+        self.assertEqual(output, ""1 234"")
+
+    @setup({""spaceint08"": ""{{ i|spaceint:2 }}""})
+    def test_spaceint_08(self):
+        output = self.engine.render_to_string(""spaceint08"", {""i"": 1234})
+        self.assertEqual(output, ""12 34"")
+
+    @setup({""spaceint09"": ""{{ i|spaceint:4 }}""})
+    def test_spaceint_09(self):
+        output = self.engine.render_to_string(""spaceint09"", {""i"": 1234})
+        self.assertEqual(output, ""1234"")
+
+    @setup({""spaceint10"": ""{{ i|spaceint:4 }}""})
+    def test_spaceint_10(self):
+        output = self.engine.render_to_string(""spaceint10"", {""i"": 12345678})
+        self.assertEqual(output, ""1234 5678"")
+
+    @setup({""spaceint11"": ""{{ i|spaceint:5 }}""})
+    def test_spaceint_11(self):
+        output = self.engine.render_to_string(""spaceint11"", {""i"": 1234})
+        self.assertEqual(output, ""1234"")
+
+    @setup({""spaceint12"": ""{{ i|spaceint }}""})
+    def test_spaceint_12(self):
+        output = self.engine.render_to_string(""spaceint12"", {""i"": -123})
+        self.assertEqual(output, ""-123"")
+
+    @setup({""spaceint13"": ""{{ i|spaceint }}""})
+    def test_spaceint_13(self):
+        output = self.engine.render_to_string(""spaceint13"", {""i"": 12345})
+        self.assertEqual(output, ""12 345"")
+
+    @setup({""spaceint14"": ""{{ i|spaceint }}""})
+    def test_spaceint_14(self):
+        output = self.engine.render_to_string(""spaceint14"", {""i"": 123456})
+        self.assertEqual(output, ""123 456"")
+
+    @setup({""spaceint15"": ""{{ i|spaceint }}""})
+    def test_spaceint_15(self):
+        output = self.engine.render_to_string(""spaceint15"", {""i"": 1234567})
+        self.assertEqual(output, ""1 234 567"")
+
+    @setup({""spaceint16"": ""{{ i|spaceint }}""})
+    def test_spaceint_16(self):
+        output = self.engine.render_to_string(
+            ""spaceint16"", {""i"": 123456789123456789123456789123456789123456789123456789}
+        )
+        self.assertEqual(
+            output,
+            ""123 456 789 123 456 789 123 456 789 123 456 789 123 456 789 123 456 789"",
+        )
+
+    @setup({""spaceint17"": ""{{ i|spaceint }}""})
+    def test_spaceint_17(self):
+        output = self.engine.render_to_string(""spaceint17"", {""i"": ""string""})
+        self.assertEqual(output, """")
+
+    @setup({""spaceint18"": ""{{ i|spaceint:'string' }}""})
+    def test_spaceint_18(self):
+        output = self.engine.render_to_string(""spaceint18"", {""i"": 1234})
+        self.assertEqual(output, """")
+
+    @setup({""spaceint19"": ""{{ i|spaceint }}""})
+    def test_spaceint_19(self):
+        output = self.engine.render_to_string(""spaceint19"", {""i"": ""-12-34""})
+        self.assertEqual(output, """")
+
+    @setup({""spaceint20"": ""{{ i|spaceint:-2 }}""})
+    def test_spaceint_20(self):
+        output = self.engine.render_to_string(""spaceint20"", {""i"": 1234})
+        self.assertEqual(output, """")
+
+    @setup({""spaceint21"": ""{{ i|spaceint:0 }}""})
+    def test_spaceint_21(self):
+        output = self.engine.render_to_string(""spaceint21"", {""i"": 1234})
+        self.assertEqual(output, """")
","# Branch description
Added the 'spaceint' template filter, which inserts spaces inside numbers for readability purposes.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
"
django/django,17826,"diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py
index f55b346406aa..26788548dc82 100644
--- a/django/core/management/commands/shell.py
+++ b/django/core/management/commands/shell.py
@@ -3,8 +3,30 @@
 import sys
 import traceback
 
+from django.apps import apps
 from django.core.management import BaseCommand, CommandError
 from django.utils.datastructures import OrderedSet
+from django.utils.module_loading import import_string
+
+CHANGED_IMPORTS = [
+    {""cache"": ""django.core.cache.cache""},
+    {""settings"": ""django.conf.settings""},
+    {""get_user_model"": ""django.contrib.auth.get_user_model""},
+    {""transaction"": ""django.db.transaction""},
+    {""Avg"": ""django.db.models.Avg""},
+    {""Case"": ""django.db.models.Case""},
+    {""Count"": ""django.db.models.Count""},
+    {""F"": ""django.db.models.F""},
+    {""Max"": ""django.db.models.Max""},
+    {""Min"": ""django.db.models.Min""},
+    {""Prefetch"": ""django.db.models.Prefetch""},
+    {""Q"": ""django.db.models.Q""},
+    {""Sum"": ""django.db.models.Sum""},
+    {""When"": ""django.db.models.When""},
+    {""timezone"": ""django.utils.timezone""},
+    {""reverse"": ""django.urls.reverse""},
+    {""Exists"": ""django.db.models.Exists""},
+]
 
 
 class Command(BaseCommand):
@@ -47,7 +69,18 @@ def add_arguments(self, parser):
     def ipython(self, options):
         from IPython import start_ipython
 
-        start_ipython(argv=[])
+        def run_ipython():
+            my_models = {}
+            imported_objects = self.get_objects(self.style)
+            for app_mod, app_models in self.get_apps_and_models():
+                for mod in app_models:
+                    if mod.__module__:
+                        my_models.setdefault(mod.__module__, [])
+                        my_models[mod.__module__].append(mod.__name__)
+            imported_objects.update(self.get_app_models(my_models, self.style))
+            start_ipython(argv=[], user_ns=imported_objects)
+
+        return run_ipython()
 
     def bpython(self, options):
         import bpython
@@ -57,8 +90,14 @@ def bpython(self, options):
     def python(self, options):
         import code
 
-        # Set up a dictionary to serve as the environment for the shell.
-        imported_objects = {}
+        my_models = {}
+        imported_objects = self.get_objects(self.style)
+        for app_mod, app_models in self.get_apps_and_models():
+            for mod in app_models:
+                if mod.__module__:
+                    my_models.setdefault(mod.__module__, [])
+                    my_models[mod.__module__].append(mod.__name__)
+        imported_objects.update(self.get_app_models(my_models, self.style))
 
         # We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system
         # conventions and get $PYTHONSTARTUP first then .pythonrc.py.
@@ -137,3 +176,39 @@ def handle(self, **options):
             except ImportError:
                 pass
         raise CommandError(""Couldn't import {} interface."".format(shell))
+
+    def get_objects(self, style):
+        import_objects = {}
+        default_modules_counter = 0
+        module_names = """"
+        for x in CHANGED_IMPORTS:
+            for key, val in x.items():
+                import_objects[key] = import_string(val)
+                default_modules_counter += 1
+                module_names += str(key) + "" ""
+        module_names = module_names.strip()
+        print(
+            style.SUCCESS(
+                f""imported {default_modules_counter} default objects ({module_names})""
+            )
+        )
+        return import_objects
+
+    def get_apps_and_models(self):
+        for app in apps.get_app_configs():
+            if app.models_module:
+                yield app.models_module, app.get_models()
+
+    def get_app_models(self, load_models, style):
+        import_objects = {}
+        model_counter = 0
+        model_names = """"
+        for key, val in load_models.items():
+            if len(val) >= 1:
+                for x in val:
+                    import_objects[x] = import_string(str(key) + ""."" + str(x))
+                    model_counter += 1
+                    model_names += str(x) + "" ""
+        model_names = model_names.strip()
+        print(style.SUCCESS(f""imported {model_counter} app models ({model_names})""))
+        return import_objects
","Adam requested me to create a draft PR [on the forum](https://forum.djangoproject.com/t/have-solved-80-of-auto-importing-shell-feature/27782/6). This feature is one of the ideas for [GSOC 2024](https://code.djangoproject.com/wiki/SummerOfCode2024#Auto-importingshell).
"
django/django,18592,"diff --git a/.github/workflows/data/test_postgres.py.tpl b/.github/workflows/data/test_postgres.py.tpl
index e121946d3f21..15dfa0d62ee3 100644
--- a/.github/workflows/data/test_postgres.py.tpl
+++ b/.github/workflows/data/test_postgres.py.tpl
@@ -1,3 +1,4 @@
+import os
 from test_sqlite import *  # NOQA
 
 DATABASES = {
@@ -8,6 +9,9 @@ DATABASES = {
         ""PASSWORD"": ""postgres"",
         ""HOST"": ""localhost"",
         ""PORT"": 5432,
+        ""OPTIONS"": {
+            ""server_side_binding"": os.getenv(""SERVER_SIDE_BINDING"") == ""1"",
+        },
     },
     ""other"": {
         ""ENGINE"": ""django.db.backends.postgresql"",
diff --git a/.github/workflows/schedule_tests.yml b/.github/workflows/schedule_tests.yml
index 8b1f01ad867d..78b06ba5de6d 100644
--- a/.github/workflows/schedule_tests.yml
+++ b/.github/workflows/schedule_tests.yml
@@ -195,3 +195,47 @@ jobs:
         working-directory: ./tests/
         run: |
           python -Wall runtests.py --verbosity 2 --noinput --selenium=chrome --headless --settings=test_postgres --parallel 2
+
+  postgresql:
+    strategy:
+      fail-fast: false
+      matrix:
+        version: [16, 17rc1]
+        server_side_bindings: [0, 1]
+    runs-on: ubuntu-latest
+    name: Newer PostgreSQL Versions
+    env:
+      SERVER_SIDE_BINDING: ${{ matrix.server_side_bindings }}
+    services:
+      postgres:
+        image: postgres:${{ matrix.version }}-alpine
+        env:
+          POSTGRES_DB: django
+          POSTGRES_USER: user
+          POSTGRES_PASSWORD: postgres
+        ports:
+          - 5432:5432
+        options: >-
+          --health-cmd pg_isready
+          --health-interval 10s
+          --health-timeout 5s
+          --health-retries 5
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4
+      - name: Set up Python
+        uses: actions/setup-python@v5
+        with:
+          python-version: '3.12'
+          cache: 'pip'
+          cache-dependency-path: 'tests/requirements/py3.txt'
+      - name: Install libmemcached-dev for pylibmc
+        run: sudo apt-get install libmemcached-dev
+      - name: Install and upgrade packaging tools
+        run: python -m pip install --upgrade pip setuptools wheel
+      - run: python -m pip install -r tests/requirements/py3.txt -r tests/requirements/postgres.txt -e .
+      - name: Create PostgreSQL settings file
+        run: mv ./.github/workflows/data/test_postgres.py.tpl ./tests/test_postgres.py
+      - name: Run tests
+        working-directory: ./tests/
+        run: python -Wall runtests.py --settings=test_postgres --verbosity=2
","#### Trac ticket number
ticket-35734

#### Branch description
Following the ticket report and this forum conversation https://forum.djangoproject.com/t/postgres-16-ci-postgres-16-in-use/34649, I'm proposing to extend the scheduled tests to test for all supported PG versions.

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
"
django/django,19081,"diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 201f28ef3744..9c9aa21f57ba 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -57,6 +57,7 @@ class AdminSite:
     app_index_template = None
     login_template = None
     logout_template = None
+    password_change_form = None
     password_change_template = None
     password_change_done_template = None
 
@@ -355,7 +356,7 @@ def password_change(self, request, extra_context=None):
 
         url = reverse(""admin:password_change_done"", current_app=self.name)
         defaults = {
-            ""form_class"": AdminPasswordChangeForm,
+            ""form_class"": self.password_change_form or AdminPasswordChangeForm,
             ""success_url"": url,
             ""extra_context"": {**self.each_context(request), **(extra_context or {})},
         }
diff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt
index 311b21ec6e39..9fc5744dbd9b 100644
--- a/docs/ref/contrib/admin/index.txt
+++ b/docs/ref/contrib/admin/index.txt
@@ -2980,6 +2980,13 @@ Templates can override or extend base admin templates as described in
 
     Path to a custom template that will be used by the admin site logout view.
 
+.. attribute:: AdminSite.password_change_form
+
+    .. versionadded:: 6.0
+
+    Subclass of :class:`~django.contrib.auth.forms.PasswordChangeForm` that
+    will be used by the admin site password change view.
+
 .. attribute:: AdminSite.password_change_template
 
     Path to a custom template that will be used by the admin site password
diff --git a/docs/releases/6.0.txt b/docs/releases/6.0.txt
index 0645441c612c..03b1c52c1dea 100644
--- a/docs/releases/6.0.txt
+++ b/docs/releases/6.0.txt
@@ -48,7 +48,8 @@ Minor features
 :mod:`django.contrib.admindocs`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-* ...
+* The new :attr:`.AdminSite.password_change_form` attribute allows customizing
+  the form used in the admin site password change view.
 
 :mod:`django.contrib.auth`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/tests/admin_views/customadmin.py b/tests/admin_views/customadmin.py
index 4b30c5c30fd3..a63d24a9ee06 100644
--- a/tests/admin_views/customadmin.py
+++ b/tests/admin_views/customadmin.py
@@ -18,6 +18,7 @@ class Admin2(admin.AdminSite):
     login_template = ""custom_admin/login.html""
     logout_template = ""custom_admin/logout.html""
     index_template = [""custom_admin/index.html""]  # a list, to test fix for #18697
+    password_change_form = forms.CustomAdminPasswordChangeForm
     password_change_template = ""custom_admin/password_change_form.html""
     password_change_done_template = ""custom_admin/password_change_done.html""
 
diff --git a/tests/admin_views/forms.py b/tests/admin_views/forms.py
index e9d9c0a8a58c..3a3566c10f12 100644
--- a/tests/admin_views/forms.py
+++ b/tests/admin_views/forms.py
@@ -1,4 +1,4 @@
-from django.contrib.admin.forms import AdminAuthenticationForm
+from django.contrib.admin.forms import AdminAuthenticationForm, AdminPasswordChangeForm
 from django.contrib.admin.helpers import ActionForm
 from django.core.exceptions import ValidationError
 
@@ -14,6 +14,12 @@ def clean_username(self):
         return username
 
 
+class CustomAdminPasswordChangeForm(AdminPasswordChangeForm):
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.fields[""old_password""].label = ""Custom old password label""
+
+
 class MediaActionForm(ActionForm):
     class Media:
         js = [""path/to/media.js""]
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 7642a186c03d..ec6fd58d53b7 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -1820,6 +1820,11 @@ class CustomUserAdmin(UserAdmin):
         response = user_admin.user_change_password(request, str(user.pk))
         self.assertContains(response, '<div class=""help"">')
 
+    def test_custom_password_change_form(self):
+        self.client.force_login(self.superuser)
+        response = self.client.get(reverse(""admin4:password_change""))
+        self.assertContains(response, ""Custom old password label"")
+
     def test_extended_bodyclass_template_index(self):
         """"""
         The admin/index.html template uses block.super in the bodyclass block.
","#### Trac ticket number
ticket-36121

#### Branch description
Allow customization of the password_change_form in Django's AdminSite. This update provides a new customization point for the password change form, enabling developers to override the default form with their own implementation. This change enhances flexibility, allowing the integration of custom password validation, UI modifications, or additional fields.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18559,"diff --git a/docs/ref/utils.txt b/docs/ref/utils.txt
index 33e0fceadf5c..438a38cea056 100644
--- a/docs/ref/utils.txt
+++ b/docs/ref/utils.txt
@@ -521,7 +521,7 @@ https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004
     The cached value can be treated like an ordinary attribute of the instance::
 
         # clear it, requiring re-computation next time it's called
-        del person.friends  # or delattr(person, ""friends"")
+        person.__dict__.pop(""friends"", None)
 
         # set a value manually, that will persist on the instance until cleared
         person.friends = [""Huckleberry Finn"", ""Tom Sawyer""]
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

#### Branch description
Added documentation on using `person.__dict__.pop(""friends"", None)` to clear a `cached_property` without raising an `AttributeError`, providing a safer alternative to `del` or `delattr`, which can raise an error if the property has not been accessed yet, thereby improving the clarity and usability of the `@cached_property` decorator.
[Related PR]: https://github.com/django/django/pull/18534

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19273,"diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index 272cb2b02ce5..f9d896bc13e7 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -205,14 +205,11 @@ def gfk_key(obj):
                 model = self.get_content_type(
                     id=ct_id, using=obj._state.db
                 ).model_class()
-                return (
-                    model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
-                    model,
-                )
+                return str(getattr(obj, self.fk_field)), model
 
         return (
             ret_val,
-            lambda obj: (obj.pk, obj.__class__),
+            lambda obj: (obj._meta.pk.value_to_string(obj), obj.__class__),
             gfk_key,
             True,
             self.name,
diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py
index 2f37cde1c834..e12eabdfb234 100644
--- a/tests/prefetch_related/models.py
+++ b/tests/prefetch_related/models.py
@@ -216,6 +216,15 @@ class Meta:
         ordering = [""id""]
 
 
+class ArticleCustomUUID(models.Model):
+    class CustomUUIDField(models.UUIDField):
+        def get_prep_value(self, value):
+            return str(value)
+
+    id = CustomUUIDField(primary_key=True, default=uuid.uuid4)
+    name = models.CharField(max_length=30)
+
+
 # Models for lookup ordering tests
 
 
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index 72c499df7f8f..49acfdd7c875 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -16,6 +16,7 @@
 
 from .models import (
     Article,
+    ArticleCustomUUID,
     Author,
     Author2,
     AuthorAddress,
@@ -1179,6 +1180,14 @@ def test_prefetch_GFK_uuid_pk(self):
         qs = Comment.objects.prefetch_related(""content_object_uuid"")
         self.assertEqual([c.content_object_uuid for c in qs], [article])
 
+    def test_prefetch_GFK_uses_prepped_primary_key(self):
+        article = ArticleCustomUUID.objects.create(name=""Blanche"")
+        Comment.objects.create(comment=""Enchantment"", content_object_uuid=article)
+        obj = Comment.objects.prefetch_related(""content_object_uuid"").get(
+            comment=""Enchantment""
+        )
+        self.assertEqual(obj.content_object_uuid, article)
+
     def test_prefetch_GFK_fk_pk(self):
         book = Book.objects.create(title=""Poems"")
         book_with_year = BookWithYear.objects.create(book=book, published_year=2019)
","

#### Trac ticket number
<!-- Replace  with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-34819

#### Branch description
In `GenericForeignKey.get_prefetch_query()`, the `rel_obj_attr` (`gfk_key`) returned a `get_prep_value()`d primary key, but the `instance_attr` lambda returned `obj.pk` directly. This mismatch caused prefetching failures when the database representation differed from the Python object, resulting in prefetched instances being set to None.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,17389,"diff --git a/django/core/validators.py b/django/core/validators.py
index fe8d46526ab5..b37528bff379 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,7 +101,7 @@ class URLValidator(RegexValidator):
         r""\Z"",
         re.IGNORECASE,
     )
-    message = _(""Enter a valid URL."")
+    message = _(""Enter a valid URL. cause: %(cause)"")
     schemes = [""http"", ""https"", ""ftp"", ""ftps""]
     unsafe_chars = frozenset(""\t\r\n"")
     max_length = 2048
@@ -113,19 +113,35 @@ def __init__(self, schemes=None, **kwargs):
 
     def __call__(self, value):
         if not isinstance(value, str) or len(value) > self.max_length:
-            raise ValidationError(self.message, code=self.code, params={""value"": value})
+            raise ValidationError(
+                self.message,
+                code=self.code,
+                params={""value"": value, ""cause"": ""exceeds max length""}
+            )
         if self.unsafe_chars.intersection(value):
-            raise ValidationError(self.message, code=self.code, params={""value"": value})
+            raise ValidationError(
+                self.message,
+                code=self.code,
+                params={""value"": value, ""cause"": ""unsafe chars""}
+            )
         # Check if the scheme is valid.
         scheme = value.split(""://"")[0].lower()
         if scheme not in self.schemes:
-            raise ValidationError(self.message, code=self.code, params={""value"": value})
+            raise ValidationError(
+                self.message,
+                code=self.code,
+                params={""value"": value, ""cause"": ""scheme not allowed""}
+            )
 
         # Then check full URL
         try:
             splitted_url = urlsplit(value)
-        except ValueError:
-            raise ValidationError(self.message, code=self.code, params={""value"": value})
+        except ValueError as e:
+            raise ValidationError(
+                self.message,
+                code=self.code,
+                params={""value"": value, ""cause"": e}
+            )
         try:
             super().__call__(value)
         except ValidationError as e:
@@ -149,7 +165,9 @@ def __call__(self, value):
                     validate_ipv6_address(potential_ip)
                 except ValidationError:
                     raise ValidationError(
-                        self.message, code=self.code, params={""value"": value}
+                        self.message,
+                        code=self.code,
+                        params={""value"": value, ""cause"": 'invalid ipv6 address'}
                     )
 
         # The maximum length of a full host name is 253 characters per RFC 1034
@@ -157,7 +175,11 @@ def __call__(self, value):
         # one byte for the length of the name and one byte for the trailing dot
         # that's used to indicate absolute names in DNS.
         if splitted_url.hostname is None or len(splitted_url.hostname) > 253:
-            raise ValidationError(self.message, code=self.code, params={""value"": value})
+            raise ValidationError(
+                self.message,
+                code=self.code,
+                params={""value"": value, ""cause"": 'hostname exceeds 253 characters'}
+            )
 
 
 integer_validator = RegexValidator(
","The URLValidator lets you know there is something wrong with the URL, but not why it is wrong.  This commit adds a cause to the errors and more detail to the error message."
django/django,18479,"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 6d5c0708a322..11cc49a01386 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1808,7 +1808,7 @@ def _get_obj_does_not_exist_redirect(self, request, opts, object_id):
         """"""
         msg = _(""%(name)s with ID “%(key)s” doesn’t exist. Perhaps it was deleted?"") % {
             ""name"": opts.verbose_name,
-            ""key"": unquote(object_id),
+            ""key"": self.unquote(object_id),
         }
         self.message_user(request, msg, messages.WARNING)
         url = reverse(""admin:index"", current_app=self.admin_site.name)
@@ -1840,7 +1840,7 @@ def _changeform_view(self, request, object_id, form_url, extra_context):
             obj = None
 
         else:
-            obj = self.get_object(request, unquote(object_id), to_field)
+            obj = self.get_object(request, self.unquote(object_id), to_field)
 
             if request.method == ""POST"":
                 if not self.has_change_permission(request, obj):
@@ -2196,7 +2196,7 @@ def _delete_view(self, request, object_id, extra_context):
                 ""The field %s cannot be referenced."" % to_field
             )
 
-        obj = self.get_object(request, unquote(object_id), to_field)
+        obj = self.get_object(request, self.unquote(object_id), to_field)
 
         if not self.has_delete_permission(request, obj):
             raise PermissionDenied
@@ -2258,7 +2258,7 @@ def history_view(self, request, object_id, extra_context=None):
 
         # First check if the user can see this history.
         model = self.model
-        obj = self.get_object(request, unquote(object_id))
+        obj = self.get_object(request, self.unquote(object_id))
         if obj is None:
             return self._get_obj_does_not_exist_redirect(
                 request, model._meta, object_id
@@ -2271,7 +2271,7 @@ def history_view(self, request, object_id, extra_context=None):
         app_label = self.opts.app_label
         action_list = (
             LogEntry.objects.filter(
-                object_id=unquote(object_id),
+                object_id=self.unquote(object_id),
                 content_type=get_content_type_for_model(model),
             )
             .select_related()
@@ -2362,6 +2362,9 @@ def user_deleted_form(request, obj, formset, index, inline):
             inline_instances.append(inline)
         return formsets, inline_instances
 
+    def unquote(self, pk):
+        return unquote(pk, is_composite=self.opts.is_composite_pk())
+
 
 class InlineModelAdmin(BaseModelAdmin):
     """"""
diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index c8e722bcc8e6..c33f6374155b 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -23,6 +23,7 @@
 QUOTE_MAP = {i: ""_%02X"" % i for i in b'"":/_#?;@&=+$,""[]<>%\n\\'}
 UNQUOTE_MAP = {v: chr(k) for k, v in QUOTE_MAP.items()}
 UNQUOTE_RE = _lazy_re_compile(""_(?:%s)"" % ""|"".join([x[1:] for x in UNQUOTE_MAP]))
+PK_SEP = "",""
 
 
 class FieldIsAForeignKeyColumnName(Exception):
@@ -91,12 +92,20 @@ def quote(s):
     Similar to urllib.parse.quote(), except that the quoting is slightly
     different so that it doesn't get automatically unquoted by the web browser.
     """"""
-    return s.translate(QUOTE_MAP) if isinstance(s, str) else s
+    if isinstance(s, str):
+        return s.translate(QUOTE_MAP)
+    elif isinstance(s, tuple):
+        return PK_SEP.join(str(quote(f)) for f in s)
+    else:
+        return s
 
 
-def unquote(s):
+def unquote(s, is_composite=False):
     """"""Undo the effects of quote().""""""
-    return UNQUOTE_RE.sub(lambda m: UNQUOTE_MAP[m[0]], s)
+    if is_composite:
+        return tuple(unquote(f) for f in s.split(PK_SEP))
+    else:
+        return UNQUOTE_RE.sub(lambda m: UNQUOTE_MAP[m[0]], s)
 
 
 def flatten(fields):
diff --git a/django/contrib/auth/admin.py b/django/contrib/auth/admin.py
index 8e1d63ef0713..c74afde09b38 100644
--- a/django/contrib/auth/admin.py
+++ b/django/contrib/auth/admin.py
@@ -1,7 +1,6 @@
 from django.conf import settings
 from django.contrib import admin, messages
 from django.contrib.admin.options import IS_POPUP_VAR
-from django.contrib.admin.utils import unquote
 from django.contrib.auth import update_session_auth_hash
 from django.contrib.auth.forms import (
     AdminPasswordChangeForm,
@@ -153,7 +152,7 @@ def _add_view(self, request, form_url="""", extra_context=None):
 
     @sensitive_post_parameters_m
     def user_change_password(self, request, id, form_url=""""):
-        user = self.get_object(request, unquote(id))
+        user = self.get_object(request, self.unquote(id))
         if not self.has_change_permission(request, user):
             raise PermissionDenied
         if user is None:
diff --git a/django/db/models/options.py b/django/db/models/options.py
index 68a7228cbea6..e3a39c48b22e 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -973,6 +973,9 @@ def total_unique_constraints(self):
             )
         ]
 
+    def is_composite_pk(self):
+        return False
+
     @cached_property
     def _property_names(self):
         """"""Return a set of the names of the properties defined on the model.""""""
diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py
index 56d46324e0e9..c4347ed0c82f 100644
--- a/tests/admin_utils/tests.py
+++ b/tests/admin_utils/tests.py
@@ -16,6 +16,7 @@
     label_for_field,
     lookup_field,
     quote,
+    unquote,
 )
 from django.core.validators import EMPTY_VALUES
 from django.db import DEFAULT_DB_ALIAS, models
@@ -436,7 +437,38 @@ def test_flatten_fieldsets(self):
         )
 
     def test_quote(self):
-        self.assertEqual(quote(""something\nor\nother""), ""something_0Aor_0Aother"")
+        test_cases = (
+            (""something\nor\nother"", ""something_0Aor_0Aother""),
+            (""f,o,o"", ""f_2Co_2Co""),
+            (""b-a-r"", ""b-a-r""),
+            ((), """"),
+            ((1, 2), ""1,2""),
+            ((3, ""f,o,o""), ""3,f_2Co_2Co""),
+            ((4, ""b-a-r""), ""4,b-a-r""),
+        )
+
+        for s, expected in test_cases:
+            with self.subTest(s=s, expected=expected):
+                self.assertEqual(quote(s), expected)
+
+    def test_unquote(self):
+        test_cases = (
+            (""something_0Aor_0Aother"", False, ""something\nor\nother""),
+            (""f_2Co_2Co"", False, ""f,o,o""),
+            (""b-a-r"", False, ""b-a-r""),
+            ("""", False, """"),
+            ("""", True, ("""",)),
+            (""1,2,3"", False, ""1,2,3""),
+            (""1,2,3"", True, (""1"", ""2"", ""3"")),
+            (""3,f_2Co_2Co"", False, ""3,f,o,o""),
+            (""3,f_2Co_2Co"", True, (""3"", ""f,o,o"")),
+            (""4,b-a-r"", False, ""4,b-a-r""),
+            (""4,b-a-r"", True, (""4"", ""b-a-r"")),
+        )
+
+        for s, is_composite, expected in test_cases:
+            with self.subTest(s=s, is_composite=is_composite, expected=expected):
+                self.assertEqual(unquote(s, is_composite=is_composite), expected)
 
     def test_build_q_object_from_lookup_parameters(self):
         parameters = {
","# Trac ticket number

ticket-35953

# Branch description

This branch adds composite primary key support to admin URLs.

This code has been separated from the [Composite PK](https://github.com/django/django/pull/18056) branch for easier review.

# Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [X] I have checked the ""Has patch"" ticket flag in the Trac system.
- [X] I have added or updated relevant tests.
- [X] I have added or updated relevant docs, including release notes if applicable.
- [X] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18985,"diff --git a/django/db/models/fields/composite.py b/django/db/models/fields/composite.py
index 550a440dcf39..2b196f6d2ac3 100644
--- a/django/db/models/fields/composite.py
+++ b/django/db/models/fields/composite.py
@@ -56,6 +56,8 @@ def __init__(self, *args, **kwargs):
             raise ValueError(""CompositePrimaryKey cannot have a default."")
         if kwargs.get(""db_default"", NOT_PROVIDED) is not NOT_PROVIDED:
             raise ValueError(""CompositePrimaryKey cannot have a database default."")
+        if kwargs.get(""db_column"", None) is not None:
+            raise ValueError(""CompositePrimaryKey cannot have a db_column."")
         if kwargs.setdefault(""editable"", False):
             raise ValueError(""CompositePrimaryKey cannot be editable."")
         if not kwargs.setdefault(""primary_key"", True):
diff --git a/tests/composite_pk/test_checks.py b/tests/composite_pk/test_checks.py
index 58b580ca85cd..c803d521cc5c 100644
--- a/tests/composite_pk/test_checks.py
+++ b/tests/composite_pk/test_checks.py
@@ -43,6 +43,11 @@ def test_composite_pk_cannot_have_a_database_default(self):
         with self.assertRaisesMessage(ValueError, expected_message):
             models.CompositePrimaryKey(""tenant_id"", ""id"", db_default=models.F(""id""))
 
+    def test_composite_pk_cannot_have_a_db_column(self):
+        expected_message = ""CompositePrimaryKey cannot have a db_column.""
+        with self.assertRaisesMessage(ValueError, expected_message):
+            models.CompositePrimaryKey(""tenant_id"", ""id"", db_column=""tenant_pk"")
+
     def test_composite_pk_cannot_be_editable(self):
         expected_message = ""CompositePrimaryKey cannot be editable.""
         with self.assertRaisesMessage(ValueError, expected_message):
","#### Branch description
`db_column` is silently ignored when creating CompositePrimaryKey, so add it to the list of forbidden options.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19414,"diff --git a/tream b/tream
new file mode 100644
index 000000000000..8f239b6b8917
--- /dev/null
+++ b/tream
@@ -0,0 +1,107 @@
+
+                   SSUUMMMMAARRYY OOFF LLEESSSS CCOOMMMMAANNDDSS
+
+      Commands marked with * may be preceded by a number, _N.
+      Notes in parentheses indicate the behavior if _N is given.
+      A key preceded by a caret indicates the Ctrl key; thus ^K is ctrl-K.
+
+  h  H                 Display this help.
+  q  :q  Q  :Q  ZZ     Exit.
+ ---------------------------------------------------------------------------
+
+                           MMOOVVIINNGG
+
+  e  ^E  j  ^N  CR  *  Forward  one line   (or _N lines).
+  y  ^Y  k  ^K  ^P  *  Backward one line   (or _N lines).
+  f  ^F  ^V  SPACE  *  Forward  one window (or _N lines).
+  b  ^B  ESC-v      *  Backward one window (or _N lines).
+  z                 *  Forward  one window (and set window to _N).
+  w                 *  Backward one window (and set window to _N).
+  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.
+  d  ^D             *  Forward  one half-window (and set half-window to _N).
+  u  ^U             *  Backward one half-window (and set half-window to _N).
+  ESC-)  RightArrow *  Right one half screen width (or _N positions).
+  ESC-(  LeftArrow  *  Left  one half screen width (or _N positions).
+  ESC-}  ^RightArrow   Right to last column displayed.
+  ESC-{  ^LeftArrow    Left  to first column.
+  F                    Forward forever; like ""tail -f"".
+  ESC-F                Like F but stop when search pattern is found.
+  r  ^R  ^L            Repaint screen.
+  R                    Repaint screen, discarding buffered input.
+        ---------------------------------------------------
+        Default ""window"" is the screen height.
+        Default ""half-window"" is half of the screen height.
+ ---------------------------------------------------------------------------
+
+                          SSEEAARRCCHHIINNGG
+
+  /_p_a_t_t_e_r_n          *  Search forward for (_N-th) matching line.
+  ?_p_a_t_t_e_r_n          *  Search backward for (_N-th) matching line.
+  n                 *  Repeat previous search (for _N-th occurrence).
+  N                 *  Repeat previous search in reverse direction.
+  ESC-n             *  Repeat previous search, spanning files.
+  ESC-N             *  Repeat previous search, reverse dir. & spanning files.
+  ESC-u                Undo (toggle) search highlighting.
+  ESC-U                Clear search highlighting.
+  &_p_a_t_t_e_r_n          *  Display only matching lines.
+        ---------------------------------------------------
+        A search pattern may begin with one or more of:
+        ^N or !  Search for NON-matching lines.
+        ^E or *  Search multiple files (pass thru END OF FILE).
+        ^F or @  Start search at FIRST file (for /) or last file (for ?).
+        ^K       Highlight matches, but don't move (KEEP position).
+        ^R       Don't use REGULAR EXPRESSIONS.
+        ^W       WRAP search if no match found.
+ ---------------------------------------------------------------------------
+
+                           JJUUMMPPIINNGG
+
+  g  <  ESC-<       *  Go to first line in file (or line _N).
+  G  >  ESC->       *  Go to last line in file (or line _N).
+  p  %              *  Go to beginning of file (or _N percent into file).
+  t                 *  Go to the (_N-th) next tag.
+  T                 *  Go to the (_N-th) previous tag.
+  {  (  [           *  Find close bracket } ) ].
+  }  )  ]           *  Find open bracket { ( [.
+  ESC-^F _<_c_1_> _<_c_2_>  *  Find close bracket _<_c_2_>.
+  ESC-^B _<_c_1_> _<_c_2_>  *  Find open bracket _<_c_1_>.
+        ---------------------------------------------------
+        Each ""find close bracket"" command goes forward to the close bracket 
+          matching the (_N-th) open bracket in the top line.
+        Each ""find open bracket"" command goes backward to the open bracket 
+          matching the (_N-th) close bracket in the bottom line.
+
+  m_<_l_e_t_t_e_r_>            Mark the current top line with <letter>.
+  M_<_l_e_t_t_e_r_>            Mark the current bottom line with <letter>.
+  '_<_l_e_t_t_e_r_>            Go to a previously marked position.
+  ''                   Go to the previous position.
+  ^X^X                 Same as '.
+  ESC-M_<_l_e_t_t_e_r_>        Clear a mark.
+        ---------------------------------------------------
+        A mark is any upper-case or lower-case letter.
+        Certain marks are predefined:
+             ^  means  beginning of the file
+             $  means  end of the file
+ ---------------------------------------------------------------------------
+
+                        CCHHAANNGGIINNGG FFIILLEESS
+
+  :e [_f_i_l_e]            Examine a new file.
+  ^X^V                 Same as :e.
+  :n                *  Examine the (_N-th) next file from the command line.
+  :p                *  Examine the (_N-th) previous file from the command line.
+  :x                *  Examine the first (or _N-th) file from the command line.
+  :d                   Delete the current file from the command line list.
+  =  ^G  :f            Print current file name.
+ ---------------------------------------------------------------------------
+
+                    MMIISSCCEELLLLAANNEEOOUUSS CCOOMMMMAANNDDSS
+
+  -_<_f_l_a_g_>              Toggle a command line option [see OPTIONS below].
+  --_<_n_a_m_e_>             Toggle a command line option, by name.
+  __<_f_l_a_g_>              Display the setting of a command line option.
+  ___<_n_a_m_e_>             Display the setting of an option, by name.
+  +_c_m_d                 Execute the less cmd each time a new file is examined.
+
+  !_c_o_m_m_a_n_d             Execute the shell command with $SHELL.
+  |XX_c_o_m_m_a_n_d            Pipe file betw
\ No newline at end of file
","#### Trac ticket number
N/A

#### Branch description
Updated the README.rst file to improve clarity and readability. Minor formatting and wording adjustments were made to enhance the documentation for new contributors.

#### Checklist
This PR targets the main branch.

-The commit message is written in past tense, mentions the ticket number, and ends with a period.

-I have checked the ""has patch"" ticket flag in the Trac system.

-I have added or updated relevant tests.

-I have added or updated relevant docs, including release notes if applicable.

-I have attached screenshots in both light and dark modes for any UI changes."
django/django,19345,"diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index f734525dcc1e..dbed4b709d63 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -2422,6 +2422,7 @@ class Meta:
         with connection.schema_editor() as editor, self.assertNumQueries(0):
             editor.alter_field(Author, Author._meta.get_field(""name""), new_field)
 
+    @skipUnlessDBFeature(""supports_json_field"")
     @isolate_apps(""schema"")
     def test_db_default_output_field_resolving(self):
         class Author(Model):
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36156

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18241,"diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index 1b219e620c9a..8d9b20659dd1 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -385,10 +385,16 @@ def as_sqlite(self, compiler, connection):
         datatype_values = "","".join(
             [repr(datatype) for datatype in connection.ops.jsonfield_datatype_values]
         )
-        return (
-            ""(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) ""
-            ""THEN JSON_TYPE(%s, %%s) ELSE JSON_EXTRACT(%s, %%s) END)""
-        ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3
+        if connection.get_database_version() >= (3, 38):
+            return (
+                ""(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) ""
+                ""THEN JSON_TYPE(%s, %%s) ELSE %s ->> %%s END)""
+            ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3
+        else:
+            return (
+                ""(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) ""
+                ""THEN JSON_TYPE(%s, %%s) ELSE JSON_EXTRACT(%s, %%s) END)""
+            ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3
 
 
 class KeyTextTransform(KeyTransform):
","# Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-33548

# Branch description
Use the ->> operator to implement KeyTransform for JSON fields on SQLite.

I didn't add the version check because Python 3.10 upgraded SQLite to 3.39 in the 3.10.9 release https://docs.python.org/3.10/whatsnew/changelog.html#id26

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19218,"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 444e2fab7b41..ced8779637ea 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -902,7 +902,24 @@ def resolve_expression(
         return query.resolve_ref(self.name, allow_joins, reuse, summarize)
 
     def replace_expressions(self, replacements):
-        return replacements.get(self, self)
+        if (replacement := replacements.get(self)) is not None:
+            return replacement
+        field_name, *transforms = self.name.split(LOOKUP_SEP)
+        # Avoid unnecessarily looking up replacements with field_name again as
+        # in the vast majority of cases F instances won't be composed of any
+        # lookups.
+        if not transforms:
+            return self
+        if (
+            replacement := replacements.get(F(field_name))
+        ) is None or replacement._output_field_or_none is None:
+            return self
+        for transform in transforms:
+            transform_class = replacement.get_transform(transform)
+            if transform_class is None:
+                return self
+            replacement = transform_class(replacement)
+        return replacement
 
     def asc(self, **kwargs):
         return OrderBy(self, **kwargs)
diff --git a/tests/constraints/models.py b/tests/constraints/models.py
index 95a29ffa4dd6..41b827640efa 100644
--- a/tests/constraints/models.py
+++ b/tests/constraints/models.py
@@ -73,6 +73,7 @@ class UniqueConstraintProduct(models.Model):
     name = models.CharField(max_length=255)
     color = models.CharField(max_length=32, null=True)
     age = models.IntegerField(null=True)
+    updated = models.DateTimeField(null=True)
 
     class Meta:
         constraints = [
diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py
index 51f09f293740..20a5357cc5b8 100644
--- a/tests/constraints/tests.py
+++ b/tests/constraints/tests.py
@@ -1,3 +1,4 @@
+from datetime import datetime, timedelta
 from unittest import mock
 
 from django.core.exceptions import ValidationError
@@ -1030,6 +1031,23 @@ def test_validate_expression(self):
             exclude={""name""},
         )
 
+    def test_validate_field_transform(self):
+        updated_date = datetime(2005, 7, 26)
+        UniqueConstraintProduct.objects.create(name=""p1"", updated=updated_date)
+        constraint = models.UniqueConstraint(
+            models.F(""updated__date""), name=""date_created_unique""
+        )
+        msg = ""Constraint “date_created_unique” is violated.""
+        with self.assertRaisesMessage(ValidationError, msg):
+            constraint.validate(
+                UniqueConstraintProduct,
+                UniqueConstraintProduct(updated=updated_date),
+            )
+        constraint.validate(
+            UniqueConstraintProduct,
+            UniqueConstraintProduct(updated=updated_date + timedelta(days=1)),
+        )
+
     def test_validate_ordered_expression(self):
         constraint = models.UniqueConstraint(
             Lower(""name"").desc(), name=""name_lower_uniq_desc""
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index 89601de85bda..1fb4e2f34d81 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -58,10 +58,12 @@
 from django.db.models.functions import (
     Coalesce,
     Concat,
+    ExtractDay,
     Left,
     Length,
     Lower,
     Substr,
+    TruncDate,
     Upper,
 )
 from django.db.models.sql import constants
@@ -1330,6 +1332,38 @@ def test_contains(self):
         with self.assertRaisesMessage(TypeError, msg):
             """" in F(""name"")
 
+    def test_replace_expressions_transform(self):
+        replacements = {F(""timestamp""): Value(None)}
+        transform_ref = F(""timestamp__date"")
+        self.assertIs(transform_ref.replace_expressions(replacements), transform_ref)
+        invalid_transform_ref = F(""timestamp__invalid"")
+        self.assertIs(
+            invalid_transform_ref.replace_expressions(replacements),
+            invalid_transform_ref,
+        )
+        replacements = {F(""timestamp""): Value(datetime.datetime(2025, 3, 1, 14, 10))}
+        self.assertEqual(
+            F(""timestamp__date"").replace_expressions(replacements),
+            TruncDate(Value(datetime.datetime(2025, 3, 1, 14, 10))),
+        )
+        self.assertEqual(
+            F(""timestamp__date__day"").replace_expressions(replacements),
+            ExtractDay(TruncDate(Value(datetime.datetime(2025, 3, 1, 14, 10)))),
+        )
+        invalid_nested_transform_ref = F(""timestamp__date__invalid"")
+        self.assertIs(
+            invalid_nested_transform_ref.replace_expressions(replacements),
+            invalid_nested_transform_ref,
+        )
+        # `replacements` is not unnecessarily looked up a second time for
+        # transform-less field references as it's the case the vast majority of
+        # the time.
+        mock_replacements = mock.Mock()
+        mock_replacements.get.return_value = None
+        field_ref = F(""name"")
+        self.assertIs(field_ref.replace_expressions(mock_replacements), field_ref)
+        mock_replacements.get.assert_called_once_with(field_ref)
+
 
 class ExpressionsTests(TestCase):
     def test_F_reuse(self):
","This allows the proper resolving of `F(""field__transform"")` when performing constraint validation.

Thanks Tom Hall for the report and Sarah for the test."
django/django,19146,"diff --git a/AUTHORS b/AUTHORS
index e3389edbf5ec..c8e50e11c2b4 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -9,6 +9,7 @@ answer newbie questions, and generally made Django that much better:
     Aaron Linville <aaron@linville.org>
     Aaron Swartz <http://www.aaronsw.com/>
     Aaron T. Myers <atmyers@gmail.com>
+    Aaryan Jain <aaryanjain888@gmail.com>
     Abeer Upadhyay <ab.esquarer@gmail.com>
     Abhijeet Viswa <abhijeetviswa@gmail.com>
     Abhinav Patil <https://github.com/ubadub/>
diff --git a/django/template/base.py b/django/template/base.py
index eaca428b10c4..5bafc3117bf7 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -644,7 +644,7 @@ def find_filter(self, filter_name):
          )?
  )"""""" % {
     ""constant"": constant_string,
-    ""num"": r""[-+.]?\d[\d.e]*"",
+    ""num"": r""[-+]?(?:\d+\.\d*|\.\d+|\d+)(?:[eE][-+]?\d+)?"",
     ""var_chars"": r""\w\."",
     ""filter_sep"": re.escape(FILTER_SEPARATOR),
     ""arg_sep"": re.escape(FILTER_ARGUMENT_SEPARATOR),
diff --git a/tests/template_tests/test_base.py b/tests/template_tests/test_base.py
index 6457d4d4e60b..4ebe9f62605a 100644
--- a/tests/template_tests/test_base.py
+++ b/tests/template_tests/test_base.py
@@ -84,3 +84,25 @@ def test_nonliterals(self):
         for var in var_names:
             with self.subTest(var=var):
                 self.assertIsNone(Variable(var).literal)
+
+    def test_scientific_notation_in_template(self):
+        """"""Add support for E to be used as a notation to carry exponential value.""""""
+        # Define test cases for scientific notation within the template context
+        cases = {
+            '{{ foo|default:""5.2e3"" }}': 5200.0,  # 5.2 × 10³ = 5200.0
+            '{{ foo|default:""5.2E3"" }}': 5200.0,  # Case-insensitive
+            '{{ foo|default:""5.2e-3""}}': 0.0052,
+            '{{ foo|default:""-1.5E4"" }}': -15000.0,  # Negative exponent
+            '{{ foo|default:""+3.0e2"" }}': 300.0,  # Explicit positive exponent
+            '{{ foo|default:"".5e2"" }}': 50.0,  # 0.5 × 10² = 50.0
+        }
+        # Create a template for each test case and assert the output
+        for template_string, expected in cases.items():
+            with self.subTest(template=template_string):
+                # Use the context with a placeholder for the 'foo' variable
+                context = Context({""foo"": None})
+                template = Template(template_string)
+                rendered = template.render(context)
+
+                # Check if the output matches the expected result
+                self.assertEqual(float(rendered.strip()), expected)
","
## **ticket-35816: Fix Scientific Notation Parsing in Django Templates**  

### **Branch Description**  
- **Added full support for parsing scientific notation (`e` and `E`) in template filter arguments.**  
- **Updated regex in `base.py`** to properly recognize **negative exponents** and **both lowercase (`e`) and uppercase (`E`).**  
- **Added test cases** to validate parsing of scientific notation in `test_base.py`.  
- **Provided documentation updates** explaining proper debugging techniques when using scientific notation in templates.

---

### **Changes Made**
✅ **Fixed regex** for numeric literals in Django’s template system:  

✔️ **Now supports:** `5.2e-3`, `1.5E4`, `+3.0e2`, `.5e2`  
✔️ **Found alternatives for incorrect parsing** where Django **treated `e-3` as a subtraction (`e - 3`)**.  
✔️ **Wrote a regression test for the same**

✅ **Added test cases** to verify:  
```django
{{ foo|default:5.2e3 }}    # ✅ 5200.0
{{ foo|default:5.2e-3 }}   # ✅ 0.0052
{{ foo|default:-1.5E4 }}   # ✅ -15000.0
{{ foo|default:+3.0e2 }}   # ✅ 300.0
{{ foo|default:.5e2 }}     # ✅ 50.0
```
  
✅ **Documentation Updates**  (PROPOSED - not made as of now) 
- **Users should not write `{{ foo|default:5.2e-3 }}` directly.**  
  Instead, use **either**:  
  ```django
  {{ foo|default:""5.2e-3"" }}
  ```  
  **Or pass it in the context:**  
  ```python
  context = { ""foo"": None, ""default_value"": 5.2e-3 }
  ```
- This prevents parsing issues and ensures correct behavior.


### **Checklist**
- [x] This PR targets the `main` branch.  
- [x] The commit message follows the format: `""Fixed scientific notation parsing in template filters. Refs #35816.""`  
- [x] Checked the ""Has patch"" ticket flag in Trac.  
- [x] Added and updated relevant **tests**.  
- [x] Updated **documentation**, including debugging guidance.  
- [x] **No UI changes**, so screenshots are not required.  


### **Impact**
- **Fixes a Django template bug affecting numeric parsing.**  
- **Allows full scientific notation support**, making templates more flexible.  
- **Provides clearer debugging guidance**, reducing potential user confusion.

 Let me know if any improvements are needed.


"
django/django,6772,"diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index 041f8a605b28..91a3591cf67e 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -62,14 +62,18 @@ def deconstruct(self):
             kwargs
         )
 
-    def state_forwards(self, app_label, state):
+    @property
+    def migrated_field(self):
         # If preserve default is off, don't use the default for future state
         if not self.preserve_default:
             field = self.field.clone()
             field.default = NOT_PROVIDED
         else:
             field = self.field
-        state.models[app_label, self.model_name_lower].fields.append((self.name, field))
+        return field
+
+    def state_forwards(self, app_label, state):
+        state.models[app_label, self.model_name_lower].fields.append((self.name, self.migrated_field))
         state.reload_model(app_label, self.model_name_lower)
 
     def database_forwards(self, app_label, schema_editor, from_state, to_state):
@@ -97,11 +101,18 @@ def describe(self):
     def reduce(self, operation, in_between, app_label=None):
         if isinstance(operation, FieldOperation) and self.is_same_field_operation(operation):
             if isinstance(operation, AlterField):
+                field = operation.field
+                preserve_default = operation.preserve_default
+                if not self.preserve_default:
+                    field = field.clone()
+                    field.default = self.field.default
+                    preserve_default = False
                 return [
                     AddField(
                         model_name=self.model_name,
                         name=operation.name,
-                        field=operation.field,
+                        field=field,
+                        preserve_default=preserve_default,
                     ),
                 ]
             elif isinstance(operation, RemoveField):
@@ -112,6 +123,7 @@ def reduce(self, operation, in_between, app_label=None):
                         model_name=self.model_name,
                         name=operation.new_name,
                         field=self.field,
+                        preserve_default=self.preserve_default,
                     ),
                 ]
         return super(AddField, self).reduce(operation, in_between, app_label=app_label)
@@ -180,14 +192,18 @@ def deconstruct(self):
             kwargs
         )
 
-    def state_forwards(self, app_label, state):
+    @property
+    def migrated_field(self):
         if not self.preserve_default:
             field = self.field.clone()
             field.default = NOT_PROVIDED
         else:
             field = self.field
+        return field
+
+    def state_forwards(self, app_label, state):
         state.models[app_label, self.model_name_lower].fields = [
-            (n, field if n == self.name else f)
+            (n, self.migrated_field if n == self.name else f)
             for n, f in
             state.models[app_label, self.model_name_lower].fields
         ]
@@ -221,6 +237,7 @@ def reduce(self, operation, in_between, app_label=None):
                     model_name=self.model_name,
                     name=operation.new_name,
                     field=self.field,
+                    preserve_default=self.preserve_default,
                 ),
             ]
         return super(AlterField, self).reduce(operation, in_between, app_label=app_label)
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index b929367bce3e..58664f1e63e3 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -164,7 +164,7 @@ def reduce(self, operation, in_between, app_label=None):
                 return [
                     CreateModel(
                         self.name,
-                        fields=self.fields + [(operation.name, operation.field)],
+                        fields=self.fields + [(operation.name, operation.migrated_field)],
                         options=self.options,
                         bases=self.bases,
                         managers=self.managers,
@@ -175,7 +175,7 @@ def reduce(self, operation, in_between, app_label=None):
                     CreateModel(
                         self.name,
                         fields=[
-                            (n, operation.field if n == operation.name else v)
+                            (n, operation.migrated_field if n == operation.name else v)
                             for n, v in self.fields
                         ],
                         options=self.options,
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 6bf09d017840..e26db2e09889 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -3,6 +3,7 @@
 from django.db import migrations, models
 from django.db.migrations import operations
 from django.db.migrations.optimizer import MigrationOptimizer
+from django.db.migrations.serializer import serializer_factory
 from django.test import SimpleTestCase
 
 from .models import EmptyManager, UnicodeModel
@@ -20,10 +21,13 @@ def optimize(self, operations, app_label):
         optimizer = MigrationOptimizer()
         return optimizer.optimize(operations, app_label), optimizer._iterations
 
+    def serialize(self, value):
+        return serializer_factory(value).serialize()[0]
+
     def assertOptimizesTo(self, operations, expected, exact=None, less_than=None, app_label=None):
         result, iterations = self.optimize(operations, app_label)
-        result = [repr(f.deconstruct()) for f in result]
-        expected = [repr(f.deconstruct()) for f in expected]
+        result = [self.serialize(f) for f in result]
+        expected = [self.serialize(f) for f in expected]
         self.assertEqual(expected, result)
         if exact is not None and iterations != exact:
             raise self.failureException(
@@ -696,3 +700,91 @@ def test_optimize_elidable_operation(self):
                 migrations.CreateModel(""Phou"", [(""name"", models.CharField(max_length=255))]),
             ],
         )
+
+    def test_default_create_model_add_field(self):
+        """"""
+        #26223. AddField optimizing into CreateModel should drop
+        default if preserve_default is False.
+        """"""
+        self.assertOptimizesTo(
+            [
+                migrations.CreateModel(""Foo"", [(""name"", models.CharField(max_length=255))]),
+                migrations.AddField(""Foo"", ""value"", models.IntegerField(default=42), preserve_default=False),
+            ],
+            [
+                migrations.CreateModel(""Foo"", [
+                    (""name"", models.CharField(max_length=255)),
+                    (""value"", models.IntegerField()),
+                ]),
+            ],
+        )
+
+    def test_default_create_model_alter_field(self):
+        """"""
+        #26223. AlterField optimizing into CreateModel should drop
+        default if preserve_default is False.
+        """"""
+        self.assertOptimizesTo(
+            [
+                migrations.CreateModel(""Foo"", [(""value"", models.IntegerField(null=True))]),
+                migrations.AlterField(""Foo"", ""value"", models.IntegerField(default=42), preserve_default=False),
+            ],
+            [
+                migrations.CreateModel(""Foo"", [(""value"", models.IntegerField())]),
+            ],
+        )
+
+    def test_default_add_field_alter_field(self):
+        """"""
+        #26223. AddField and AlterField optimizing when one of them has
+        preserve_default=False should pass the preserve_default value.
+        """"""
+        self.assertOptimizesTo(
+            [
+                migrations.AddField(""Foo"", ""value"", models.IntegerField(null=True)),
+                migrations.AlterField(""Foo"", ""value"", models.IntegerField(default=42), preserve_default=False),
+            ],
+            [
+                migrations.AddField(""Foo"", ""value"", models.IntegerField(default=42), preserve_default=False),
+            ],
+        )
+        self.assertOptimizesTo(
+            [
+                migrations.AddField(""Foo"", ""value"", models.IntegerField(default=42), preserve_default=False),
+                migrations.AlterField(""Foo"", ""value"", models.IntegerField(""Value"")),
+            ],
+            [
+                migrations.AddField(""Foo"", ""value"", models.IntegerField(""Value"", default=42), preserve_default=False),
+            ],
+        )
+
+    def test_default_add_field_rename_field(self):
+        """"""
+        #26223. AddField optimizing with RenameField should retain its
+        preserve_default value.
+        """"""
+        self.assertOptimizesTo(
+            [
+                migrations.AddField(""Foo"", ""value"", models.IntegerField(default=42), preserve_default=False),
+                migrations.RenameField(""Foo"", ""value"", ""price""),
+            ],
+            [
+                migrations.AddField(""Foo"", ""price"", models.IntegerField(default=42), preserve_default=False),
+            ],
+        )
+
+    def test_default_alter_field_rename_field(self):
+        """"""
+        #26223. AlterField swapping with RenameField should retain its
+        preserve_default value.
+        """"""
+        self.assertOptimizesTo(
+            [
+                migrations.AlterField(""Foo"", ""value"", models.IntegerField(default=42), preserve_default=False),
+                migrations.RenameField(""Foo"", ""value"", ""price""),
+            ],
+            [
+                migrations.RenameField(""Foo"", ""value"", ""price""),
+                migrations.AlterField(""Foo"", ""price"", models.IntegerField(default=42), preserve_default=False),
+            ],
+        )
","[#26223](https://code.djangoproject.com/ticket/26223)

Testing code modified to recursively compare attributes of fields in operations.
"
django/django,19195,"diff --git a/docs/ref/models/fields.txt b/docs/ref/models/fields.txt
index 6aac892c6fb1..52cf0b828697 100644
--- a/docs/ref/models/fields.txt
+++ b/docs/ref/models/fields.txt
@@ -1315,8 +1315,8 @@ materialized view.
 
 .. admonition:: Refresh the data
 
-    Since the database always computed the value, the object must be reloaded
-    to access the new value after :meth:`~Model.save()`, for example, by using
+    Since the database computes the value, the object must be reloaded to
+    access the new value after :meth:`~Model.save()`, for example, by using
     :meth:`~Model.refresh_from_db()`.
 
 .. admonition:: Database limitations
","#### Trac ticket number

N/A

#### Branch description

The words ""always computed"" stood out to me when I was reading these docs. I think there's a small chance they could be confusing. I'm curious to know if others agree. I may be missing something!

#### Checklist

- [x] This PR targets the `main` branch.
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes."
django/django,19050,"diff --git a/django/db/models/base.py b/django/db/models/base.py
index 4c7b71e8488c..d7d207901b90 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1299,7 +1299,7 @@ def _get_FIELD_display(self, field):
         )
 
     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):
-        if not self.pk:
+        if not self._is_pk_set():
             raise ValueError(""get_next/get_previous cannot be used on unsaved objects."")
         op = ""gt"" if is_next else ""lt""
         order = """" if is_next else ""-""
diff --git a/tests/composite_pk/test_get.py b/tests/composite_pk/test_get.py
index c896ec26ed49..a0614f1bc27d 100644
--- a/tests/composite_pk/test_get.py
+++ b/tests/composite_pk/test_get.py
@@ -1,6 +1,6 @@
 from django.test import TestCase
 
-from .models import Comment, Tenant, User
+from .models import Comment, Tenant, TimeStamped, User
 
 
 class CompositePKGetTests(TestCase):
@@ -124,3 +124,12 @@ def test_lookup_errors(self):
 
     def test_get_user_by_comments(self):
         self.assertEqual(User.objects.get(comments=self.comment_1), self.user_1)
+
+    def test_get_previous_by_field(self):
+        stamp_1 = TimeStamped.objects.create(id=1)
+        stamp_2 = TimeStamped(id=2)
+        msg = ""get_next/get_previous cannot be used on unsaved objects.""
+        with self.assertRaisesMessage(ValueError, msg):
+            stamp_2.get_previous_by_created()
+        stamp_2.save()
+        self.assertEqual(stamp_2.get_previous_by_created(), stamp_1)
","#### Trac ticket number
ticket-36100

#### Branch description
Use `_is_pk_set()` in the check for unsaved objects in get_next/get_previous to avoid checking `(None, None)` and finding it truthy.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18613,"diff --git a/django/contrib/postgres/forms/array.py b/django/contrib/postgres/forms/array.py
index ddb022afc35b..fd5cd219f85d 100644
--- a/django/contrib/postgres/forms/array.py
+++ b/django/contrib/postgres/forms/array.py
@@ -228,7 +228,7 @@ def clean(self, value):
                         params={""nth"": index + 1},
                     )
                 )
-                cleaned_data.append(None)
+                cleaned_data.append(item)
             else:
                 errors.append(None)
         cleaned_data, null_index = self._remove_trailing_nulls(cleaned_data)
diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py
index ff0c4aabb1c2..ea7807687ea2 100644
--- a/tests/postgres_tests/test_array.py
+++ b/tests/postgres_tests/test_array.py
@@ -1339,6 +1339,22 @@ def test_invalid_char_length(self):
             ],
         )
 
+    def test_invalid_char_length_with_remove_trailing_nulls(self):
+        field = SplitArrayField(
+            forms.CharField(max_length=2, required=False),
+            size=3,
+            remove_trailing_nulls=True,
+        )
+        with self.assertRaises(exceptions.ValidationError) as cm:
+            field.clean([""abc"", """", """"])
+        self.assertEqual(
+            cm.exception.messages,
+            [
+                ""Item 1 in the array did not validate: Ensure this value has at most 2 ""
+                ""characters (it has 3)."",
+            ],
+        )
+
     def test_splitarraywidget_value_omitted_from_data(self):
         class Form(forms.ModelForm):
             field = SplitArrayField(forms.IntegerField(), required=False, size=2)
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35449

#### Branch description
[Continue @saJaeHyukc 's PR](https://github.com/django/django/pull/18178)
This change ensures that validation errors that should be raised are not sliced off.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
"
django/django,19199,"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 630324812720..91351e5c9e27 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -313,8 +313,6 @@ def _iter_column_sql(
         yield column_db_type
         if collation := field_db_params.get(""collation""):
             yield self._collate_sql(collation)
-        if self.connection.features.supports_comments_inline and field.db_comment:
-            yield self._comment_sql(field.db_comment)
         # Work out nullability.
         null = field.null
         # Add database default.
@@ -373,6 +371,8 @@ def _iter_column_sql(
             and field.unique
         ):
             yield self.connection.ops.tablespace_sql(tablespace, inline=True)
+        if self.connection.features.supports_comments_inline and field.db_comment:
+            yield self._comment_sql(field.db_comment)
 
     def column_sql(self, model, field, include_default=False):
         """"""
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index c0c284672b66..f734525dcc1e 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -4861,6 +4861,24 @@ def test_add_db_comment_charfield(self):
             comment,
         )
 
+    @skipUnlessDBFeature(""supports_comments"", ""supports_stored_generated_columns"")
+    def test_add_db_comment_generated_field(self):
+        comment = ""Custom comment""
+        field = GeneratedField(
+            expression=Value(1),
+            db_persist=True,
+            output_field=IntegerField(),
+            db_comment=comment,
+        )
+        field.set_attributes_from_name(""volume"")
+        with connection.schema_editor() as editor:
+            editor.create_model(Author)
+            editor.add_field(Author, field)
+        self.assertEqual(
+            self.get_column_comment(Author._meta.db_table, ""volume""),
+            comment,
+        )
+
     @skipUnlessDBFeature(""supports_comments"")
     def test_add_db_comment_and_default_charfield(self):
         comment = ""Custom comment with default""
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35839

#### Branch description
Fixes MySQL syntax error for `GeneratedField` with `db_comment` by ensuring `COMMENT` is placed after GENERATED in `_iter_column_sql`.

Thanks to @charettes for the helpful guidance on this issue!

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19287,"diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index fc1b264472fd..0cf841b747f1 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -189,7 +189,7 @@ def on_bind(self, server_port):
             file=self.stdout,
         )
         docs_version = get_docs_version()
-        if os.environ.get(""HIDE_PRODUCTION_WARNING"") != ""true"":
+        if os.environ.get(""DJANGO_RUNSERVER_HIDE_WARNING"") != ""true"":
             self.stdout.write(
                 self.style.WARNING(
                     ""WARNING: This is a development server. Do not use it in a ""
diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index a2152b263cb9..d401b8389310 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -947,7 +947,7 @@ multithreaded by default.
 Uses IPv6 for the development server. This changes the default IP address from
 ``127.0.0.1`` to ``::1``.
 
-.. envvar:: HIDE_PRODUCTION_WARNING
+.. envvar:: DJANGO_RUNSERVER_HIDE_WARNING
 
 .. versionadded:: 5.2
 
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 0ba2e508b854..af53b800c4e8 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -276,7 +276,8 @@ Management Commands
 
 * A new warning is displayed when running :djadmin:`runserver`, indicating that
   it is unsuitable for production. This warning can be suppressed by setting
-  the :envvar:`HIDE_PRODUCTION_WARNING` environment variable to ``""true""``.
+  the :envvar:`DJANGO_RUNSERVER_HIDE_WARNING` environment variable to
+  ``""true""``.
 
 * The :djadmin:`makemigrations` and :djadmin:`migrate` commands  have a new
   ``Command.autodetector`` attribute for subclasses to override in order to use
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 5d8a5ec97eee..e4900eefd5bb 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -1630,7 +1630,7 @@ def test_on_bind(self):
             self.output.getvalue(),
         )
 
-    @mock.patch.dict(os.environ, {""HIDE_PRODUCTION_WARNING"": ""true""})
+    @mock.patch.dict(os.environ, {""DJANGO_RUNSERVER_HIDE_WARNING"": ""true""})
     def test_hide_production_warning_with_environment_variable(self):
         self.cmd.addr = ""0""
         self.cmd._raw_ipv6 = False
","Changed env variable name from HIDE_PRODUCTION_WARNING to DJANGO_RUNSERVER_HIDE_WARNING

#### Trac ticket number

ticket-36266

#### Branch description
This PR updates the environment variable name from HIDE_PRODUCTION_WARNING to DJANGO_HIDE_PRODUCTION_WARNING to align with Django's naming conventions for environment variables.

Using the DJANGO_ prefix ensures consistency with other Django-related environment variables and reduces potential confusion for developers who may come across this setting without prior context. This change improves clarity and makes it easier for unfamiliar engineers to recognize that the variable is specific to Django

#### Checklist
- [ X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [X ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [X ] I have added or updated relevant tests.
- [ X] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18682,"diff --git a/docs/ref/models/fields.txt b/docs/ref/models/fields.txt
index 899947c17f10..4430c8e00770 100644
--- a/docs/ref/models/fields.txt
+++ b/docs/ref/models/fields.txt
@@ -426,6 +426,11 @@ precedence when creating instances in Python code. ``db_default`` will still be
 set at the database level and will be used when inserting rows outside of the
 ORM or when adding a new field in a migration.
 
+If a field has a ``db_default`` without a ``default`` set and no value is
+assigned to the field, a ``DatabaseDefault`` object is returned as the field
+value on unsaved model instances. The actual value for the field is determined
+by the database when the model instance is saved.
+
 ``db_index``
 ------------
 
diff --git a/docs/topics/db/models.txt b/docs/topics/db/models.txt
index e7bc1681fb25..f7f575eb3fb1 100644
--- a/docs/topics/db/models.txt
+++ b/docs/topics/db/models.txt
@@ -224,6 +224,15 @@ ones:
     object. If callable it will be called every time a new object is
     created.
 
+:attr:`~Field.db_default`
+    The database-computed default value for the field. This can be a literal
+    value or a database function.
+
+    If both ``db_default`` and :attr:`Field.default` are set, ``default`` will
+    take precedence when creating instances in Python code. ``db_default`` will
+    still be set at the database level and will be used when inserting rows
+    outside of the ORM or when adding a new field in a migration.
+
 :attr:`~Field.help_text`
     Extra ""help"" text to be displayed with the form widget. It's useful for
     documentation even if your field isn't used on a form.
","…ault

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35731

#### Branch description
Extended documentation about db_default and DatabaseDefault as mentioned in the ticket description.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19099,"diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index 0e68c2eef069..272cb2b02ce5 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -389,6 +389,20 @@ def resolve_related_fields(self):
             )
         ]
 
+    def get_local_related_value(self, instance):
+        return self.get_instance_value_for_fields(instance, self.foreign_related_fields)
+
+    def get_foreign_related_value(self, instance):
+        # We (possibly) need to convert object IDs to the type of the
+        # instances' PK in order to match up instances during prefetching.
+        return tuple(
+            foreign_field.to_python(val)
+            for foreign_field, val in zip(
+                self.foreign_related_fields,
+                self.get_instance_value_for_fields(instance, self.local_related_fields),
+            )
+        )
+
     def _get_path_info_with_parent(self, filtered_relation):
         """"""
         Return the path that joins the current model through any parent models.
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index e4698b4092b0..c69c99804917 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -758,7 +758,7 @@ def get_prefetch_querysets(self, instances, querysets=None):
             for rel_obj in queryset:
                 if not self.field.is_cached(rel_obj):
                     instance = instances_dict[rel_obj_attr(rel_obj)]
-                    setattr(rel_obj, self.field.name, instance)
+                    self.field.set_cached_value(rel_obj, instance)
             cache_name = self.field.remote_field.cache_name
             return queryset, rel_obj_attr, instance_attr, False, cache_name, False
 
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index b44a34c456c4..d3c096574a20 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -1254,6 +1254,20 @@ def test_deleted_GFK(self):
                 ],
             )
 
+    def test_reverse_generic_relation(self):
+        # Create two distinct bookmarks to ensure the bookmark and
+        # tagged item models primary are offset.
+        first_bookmark = Bookmark.objects.create()
+        second_bookmark = Bookmark.objects.create()
+        TaggedItem.objects.create(
+            content_object=first_bookmark, favorite=second_bookmark
+        )
+        with self.assertNumQueries(2):
+            obj = TaggedItem.objects.prefetch_related(""favorite_bookmarks"").get()
+        with self.assertNumQueries(0):
+            prefetched_bookmarks = obj.favorite_bookmarks.all()
+            self.assertQuerySetEqual(prefetched_bookmarks, [second_bookmark])
+
 
 class MultiTableInheritanceTest(TestCase):
     @classmethod
","

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36135

#### Branch description

The `get_(local|foreign)_related_value` methods of `GenericRelation` must be reversed because it defines `(from|to)_fields` and associated related_fields in the reversed order as it's effectively a reverse `GenericForeignKey` itself.

The related value methods must also account for the fact that referenced primary key values might be stored as a string on the model defining the `GenericForeignKey` but as integer on the model defining the `GenericRelation`. This is achieved by calling the `to_python` method of the involved content type in get_foreign_related_value just like `GenericRelatedObjectManager` does.

Lastly reverse many-to-one manager's `prefetch_related_querysets` should use `set_cached_value` instead of direct attribute assignment as direct assignment might are disallowed on `ReverseManyToOneDescriptor` descriptors. This is likely something that was missed in f5233dc (refs #32511) when the `is_cached` guard was added.

Thanks @1xinghuan for the report.
"
django/django,18393,"diff --git a/django/db/backends/base/base.py b/django/db/backends/base/base.py
index 7a1dfd30d13b..cb8afb35ce9e 100644
--- a/django/db/backends/base/base.py
+++ b/django/db/backends/base/base.py
@@ -593,7 +593,7 @@ def close_if_unusable_or_obsolete(self):
         Close the current connection if unrecoverable errors have occurred
         or if it outlived its maximum age.
         """"""
-        if self.connection is not None:
+        if self.connection is not None and not self.in_atomic_block:
             self.health_check_done = False
             # If the application didn't restore the original autocommit setting,
             # don't take chances, drop the connection.
diff --git a/django/test/client.py b/django/test/client.py
index a755aae05caf..7bc9837362ef 100644
--- a/django/test/client.py
+++ b/django/test/client.py
@@ -17,8 +17,7 @@
 from django.core.handlers.base import BaseHandler
 from django.core.handlers.wsgi import LimitedStream, WSGIRequest
 from django.core.serializers.json import DjangoJSONEncoder
-from django.core.signals import got_request_exception, request_finished, request_started
-from django.db import close_old_connections
+from django.core.signals import got_request_exception, request_started
 from django.http import HttpHeaders, HttpRequest, QueryDict, SimpleCookie
 from django.test import signals
 from django.test.utils import ContextList
@@ -121,9 +120,7 @@ def closing_iterator_wrapper(iterable, close):
     try:
         yield from iterable
     finally:
-        request_finished.disconnect(close_old_connections)
         close()  # will fire request_finished
-        request_finished.connect(close_old_connections)
 
 
 async def aclosing_iterator_wrapper(iterable, close):
@@ -131,9 +128,7 @@ async def aclosing_iterator_wrapper(iterable, close):
         async for chunk in iterable:
             yield chunk
     finally:
-        request_finished.disconnect(close_old_connections)
         close()  # will fire request_finished
-        request_finished.connect(close_old_connections)
 
 
 def conditional_content_removal(request, response):
@@ -172,9 +167,7 @@ def __call__(self, environ):
         if self._middleware_chain is None:
             self.load_middleware()
 
-        request_started.disconnect(close_old_connections)
         request_started.send(sender=self.__class__, environ=environ)
-        request_started.connect(close_old_connections)
         request = WSGIRequest(environ)
         # sneaky little hack so that we can easily get round
         # CsrfViewMiddleware.  This makes life easier, and is probably
@@ -203,9 +196,7 @@ def __call__(self, environ):
                     response.streaming_content, response.close
                 )
         else:
-            request_finished.disconnect(close_old_connections)
             response.close()  # will fire request_finished
-            request_finished.connect(close_old_connections)
 
         return response
 
@@ -228,9 +219,7 @@ async def __call__(self, scope):
         else:
             body_file = FakePayload("""")
 
-        request_started.disconnect(close_old_connections)
         await request_started.asend(sender=self.__class__, scope=scope)
-        request_started.connect(close_old_connections)
         # Wrap FakePayload body_file to allow large read() in test environment.
         request = ASGIRequest(scope, LimitedStream(body_file, len(body_file)))
         # Sneaky little hack so that we can easily get round
@@ -255,10 +244,8 @@ async def __call__(self, scope):
                     response.streaming_content, response.close
                 )
         else:
-            request_finished.disconnect(close_old_connections)
             # Will fire request_finished.
             await sync_to_async(response.close, thread_sensitive=False)()
-            request_finished.connect(close_old_connections)
         return response
 
 
diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py
index 658e9d853e0a..5b8375f6eba0 100644
--- a/tests/asgi/tests.py
+++ b/tests/asgi/tests.py
@@ -12,7 +12,6 @@
 from django.core.exceptions import RequestDataTooBig
 from django.core.handlers.asgi import ASGIHandler, ASGIRequest
 from django.core.signals import request_finished, request_started
-from django.db import close_old_connections
 from django.http import HttpResponse, StreamingHttpResponse
 from django.test import (
     AsyncRequestFactory,
@@ -45,10 +44,6 @@ def __call__(self, signal, **kwargs):
 class ASGITest(SimpleTestCase):
     async_request_factory = AsyncRequestFactory()
 
-    def setUp(self):
-        request_started.disconnect(close_old_connections)
-        self.addCleanup(request_started.connect, close_old_connections)
-
     async def test_get_asgi_application(self):
         """"""
         get_asgi_application() returns a functioning ASGI callable.
diff --git a/tests/backends/base/test_base.py b/tests/backends/base/test_base.py
index 4418d010ea88..a0fffd924d9f 100644
--- a/tests/backends/base/test_base.py
+++ b/tests/backends/base/test_base.py
@@ -381,6 +381,11 @@ def test_set_autocommit_health_checks_enabled(self):
         connection.set_autocommit(True)
         self.assertIs(new_connection, connection.connection)
 
+    def test_no_close_in_atomic(self):
+        with transaction.atomic():
+            connection.close_if_unusable_or_obsolete()
+            self.run_query()
+
 
 class MultiDatabaseTests(TestCase):
     databases = {""default"", ""other""}
diff --git a/tests/cache/tests.py b/tests/cache/tests.py
index 978efdd9d38f..67c12b70888d 100644
--- a/tests/cache/tests.py
+++ b/tests/cache/tests.py
@@ -27,7 +27,7 @@
 from django.core.cache.backends.base import InvalidCacheBackendError
 from django.core.cache.backends.redis import RedisCacheClient
 from django.core.cache.utils import make_template_fragment_key
-from django.db import close_old_connections, connection, connections
+from django.db import connection, connections
 from django.db.backends.utils import CursorWrapper
 from django.http import (
     HttpRequest,
@@ -1560,15 +1560,11 @@ def test_memcached_deletes_key_on_failed_set(self):
     def test_close(self):
         # For clients that don't manage their connections properly, the
         # connection is closed when the request is complete.
-        signals.request_finished.disconnect(close_old_connections)
-        try:
-            with mock.patch.object(
-                cache._class, ""disconnect_all"", autospec=True
-            ) as mock_disconnect:
-                signals.request_finished.send(self.__class__)
-                self.assertIs(mock_disconnect.called, self.should_disconnect_on_close)
-        finally:
-            signals.request_finished.connect(close_old_connections)
+        with mock.patch.object(
+            cache._class, ""disconnect_all"", autospec=True
+        ) as mock_disconnect:
+            signals.request_finished.send(self.__class__)
+            self.assertIs(mock_disconnect.called, self.should_disconnect_on_close)
 
     def test_set_many_returns_failing_keys(self):
         def fail_set_multi(mapping, *args, **kwargs):
diff --git a/tests/handlers/tests.py b/tests/handlers/tests.py
index ffa362abdd76..c63c2a9c8e24 100644
--- a/tests/handlers/tests.py
+++ b/tests/handlers/tests.py
@@ -1,7 +1,7 @@
 from django.core.exceptions import ImproperlyConfigured
 from django.core.handlers.wsgi import WSGIHandler, WSGIRequest, get_script_name
 from django.core.signals import request_finished, request_started
-from django.db import close_old_connections, connection
+from django.db import connection
 from django.test import (
     AsyncRequestFactory,
     RequestFactory,
@@ -14,10 +14,6 @@
 class HandlerTests(SimpleTestCase):
     request_factory = RequestFactory()
 
-    def setUp(self):
-        request_started.disconnect(close_old_connections)
-        self.addCleanup(request_started.connect, close_old_connections)
-
     def test_middleware_initialized(self):
         handler = WSGIHandler()
         self.assertIsNotNone(handler._middleware_chain)
diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py
index 2197c6f7ea18..7f3a6775eb68 100644
--- a/tests/httpwrappers/tests.py
+++ b/tests/httpwrappers/tests.py
@@ -7,8 +7,6 @@
 
 from django.core.exceptions import DisallowedRedirect
 from django.core.serializers.json import DjangoJSONEncoder
-from django.core.signals import request_finished
-from django.db import close_old_connections
 from django.http import (
     BadHeaderError,
     HttpResponse,
@@ -758,12 +756,6 @@ async def test_sync_streaming_response_warning(self):
 
 
 class FileCloseTests(SimpleTestCase):
-    def setUp(self):
-        # Disable the request_finished signal during this test
-        # to avoid interfering with the database connection.
-        request_finished.disconnect(close_old_connections)
-        self.addCleanup(request_finished.connect, close_old_connections)
-
     def test_response(self):
         filename = os.path.join(os.path.dirname(__file__), ""abc.txt"")
 
diff --git a/tests/wsgi/tests.py b/tests/wsgi/tests.py
index 39d72d76971c..796b9deda316 100644
--- a/tests/wsgi/tests.py
+++ b/tests/wsgi/tests.py
@@ -1,8 +1,6 @@
 from django.core.exceptions import ImproperlyConfigured
 from django.core.servers.basehttp import get_internal_wsgi_application
-from django.core.signals import request_started
 from django.core.wsgi import get_wsgi_application
-from django.db import close_old_connections
 from django.http import FileResponse
 from django.test import SimpleTestCase, override_settings
 from django.test.client import RequestFactory
@@ -12,10 +10,6 @@
 class WSGITest(SimpleTestCase):
     request_factory = RequestFactory()
 
-    def setUp(self):
-        request_started.disconnect(close_old_connections)
-        self.addCleanup(request_started.connect, close_old_connections)
-
     def test_get_wsgi_application(self):
         """"""
         get_wsgi_application() returns a functioning WSGI callable.
","# Trac ticket number

ticket-30448
ticket-35618

# Branch description

Previously, the `django.db.close_old_connections` handler for `request_started` and `request_finished` would incorrectly close any connection within a `transaction.atomic` block (such as the one automatically used by `django.db.TestCase`), leading to `InterfaceError: connection already closed`.

The test client and many of our tests have been working around this bug by manually suppressing the `close_old_connections` handler, but the workarounds are incomplete and the bug still affects other projects.  Fix the bug and remove the workarounds.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18959,"diff --git a/django/utils/html.py b/django/utils/html.py
index 310742afe1fe..5671f39db40d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -7,7 +7,8 @@
 from html.parser import HTMLParser
 from urllib.parse import parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit
 
-from django.core.exceptions import SuspiciousOperation
+from django.core.exceptions import SuspiciousOperation, ValidationError
+from django.core.validators import EmailValidator
 from django.utils.encoding import punycode
 from django.utils.functional import Promise, cached_property, keep_lazy, keep_lazy_text
 from django.utils.http import RFC3986_GENDELIMS, RFC3986_SUBDELIMS
@@ -455,20 +456,9 @@ def trim_punctuation(self, word):
     @staticmethod
     def is_email_simple(value):
         """"""Return True if value looks like an email address.""""""
-        # An @ must be in the middle of the value.
-        if ""@"" not in value or value.startswith(""@"") or value.endswith(""@""):
-            return False
         try:
-            p1, p2 = value.split(""@"")
-        except ValueError:
-            # value contains more than one @.
-            return False
-        # Max length for domain name labels is 63 characters per RFC 1034.
-        # Helps to avoid ReDoS vectors in the domain part.
-        if len(p2) > 63:
-            return False
-        # Dot must be in p2 (e.g. example.com)
-        if ""."" not in p2 or p2.startswith("".""):
+            EmailValidator(allowlist=[])(value)
+        except ValidationError:
             return False
         return True
 
diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py
index 88bfa249253f..b7d89bfe5977 100644
--- a/tests/utils_tests/test_html.py
+++ b/tests/utils_tests/test_html.py
@@ -374,15 +374,9 @@ def test_urlize(self):
             (
                 # RFC 6068 requires a mailto URI to percent-encode a number of
                 # characters that can appear in <addr-spec>.
-                ""yes;this=is&a%valid!email@example.com"",
-                '<a href=""mailto:yes%3Bthis%3Dis%26a%25valid%21email@example.com""'
-                "">yes;this=is&a%valid!email@example.com</a>"",
-            ),
-            (
-                # Urlizer shouldn't urlize the ""?org"" part of this. But since
-                # it does, RFC 6068 requires percent encoding the ""?"".
-                ""test@example.com?org"",
-                '<a href=""mailto:test@example.com%3Forg"">test@example.com?org</a>',
+                ""yes+this=is&a%valid!email@example.com"",
+                '<a href=""mailto:yes%2Bthis%3Dis%26a%25valid%21email@example.com""'
+                "">yes+this=is&a%valid!email@example.com</a>"",
             ),
         )
         for value, output in tests:
@@ -402,6 +396,8 @@ def test_urlize_unchanged_inputs(self):
             ""foo@.example.com"",
             ""foo@localhost"",
             ""foo@localhost."",
+            ""test@example?;+!.com"",
+            ""email me@example.com,then I'll respond"",
             # trim_punctuation catastrophic tests
             ""("" * 100_000 + "":"" + "")"" * 100_000,
             ""("" * 100_000 + ""&:"" + "")"" * 100_000,
","[#36017]
Urlize email address allows punctuation in domains

ticket-36017

#### Branch description
Improve def is_email_simple by adding email validator method

#### Checklist
- ✅ This PR targets the `main` branch.
- ✅ The commit message is written in past tense, mentions the ticket number, and ends with a period.
- ✅ I have checked the ""Has patch"" ticket flag in the Trac system.
- ✅ I have added or updated relevant tests.
- N/A I have added or updated relevant docs, including release notes if applicable.
- N/A I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19142,"diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index 964009988cbb..1d36696fd3e0 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -322,7 +322,7 @@ def remove_index(self, model, index, concurrently=False):
         self.execute(index.remove_sql(model, self, concurrently=concurrently))
 
     def _delete_index_sql(self, model, name, sql=None, concurrently=False):
-        sql = (
+        sql = sql or (
             self.sql_delete_index_concurrently
             if concurrently
             else self.sql_delete_index
diff --git a/tests/postgres_tests/test_indexes.py b/tests/postgres_tests/test_indexes.py
index f98d03c6c1ed..7d1e182726f9 100644
--- a/tests/postgres_tests/test_indexes.py
+++ b/tests/postgres_tests/test_indexes.py
@@ -665,6 +665,30 @@ def create_sql(self, model, schema_editor, using=""gin"", **kwargs):
                 str(index.create_sql(CharFieldModel, editor)),
             )
 
+    def test_custom_sql(self):
+        class CustomSQLIndex(PostgresIndex):
+            sql_create_index = ""SELECT 1""
+            sql_delete_index = ""SELECT 2""
+
+            def create_sql(self, model, schema_editor, using="""", **kwargs):
+                kwargs.setdefault(""sql"", self.sql_create_index)
+                return super().create_sql(model, schema_editor, using, **kwargs)
+
+            def remove_sql(self, model, schema_editor, **kwargs):
+                kwargs.setdefault(""sql"", self.sql_delete_index)
+                return super().remove_sql(model, schema_editor, **kwargs)
+
+        index = CustomSQLIndex(fields=[""field""], name=""custom_sql_idx"")
+
+        operations = [
+            (index.create_sql, CustomSQLIndex.sql_create_index),
+            (index.remove_sql, CustomSQLIndex.sql_delete_index),
+        ]
+        for operation, expected in operations:
+            with self.subTest(operation=operation.__name__):
+                with connection.schema_editor() as editor:
+                    self.assertEqual(expected, str(operation(CharFieldModel, editor)))
+
     def test_op_class(self):
         index_name = ""test_op_class""
         index = Index(
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36165

#### Branch description
This is a follow up of bd366ca2aeffa869b7dbc0b0aa01caea75e6dc31.

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [X] I have checked the ""Has patch"" ticket flag in the Trac system.
- [X] I have added or updated relevant tests.
"
django/django,19374,"diff --git a/.github/workflows/linters.yml b/.github/workflows/linters.yml
index 4f24db61f01e..07c92fe06721 100644
--- a/.github/workflows/linters.yml
+++ b/.github/workflows/linters.yml
@@ -28,7 +28,7 @@ jobs:
         uses: actions/setup-python@v5
         with:
           python-version: '3.13'
-      - run: python -m pip install flake8
+      - run: python -m pip install flake8==7.1.2
       - name: flake8
         # Pinned to v3.0.0.
         uses: liskin/gh-problem-matcher-wrap@e7b7beaaafa52524748b31a381160759d68d61fb
","As there were some fixes for 7.2.0 of flake8 1ebb341854e63b6f97683a70d788f569c5e576cf
Makes sense to pin the GitHub actions of flake8 for 5.1 and 4.2 as they are still supported versions (with security releases)

One option is to pin to 7.0.0 as that would match the pre-commit config on this branch"
django/django,19045,"diff --git a/django/utils/html.py b/django/utils/html.py
index 10036c38c479..364c15b9f9b3 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -320,7 +320,8 @@ def __call__(self, text, trim_url_limit=None, nofollow=False, autoescape=False):
         local_cache = {}
         urlized_words = []
         for word in words:
-            if (urlized_word := local_cache.get(word)) is None:
+            urlized_word = local_cache.get(word)
+            if not urlized_word:
                 urlized_word = self.handle_word(
                     word,
                     safe_input=safe_input,
","…iable.

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-XXXXX

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [ x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18058,"diff --git a/django/db/models/base.py b/django/db/models/base.py
index 3d40bc42869a..e68baf4e5763 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1063,12 +1063,16 @@ def _save_table(
         for a single table.
         """"""
         meta = cls._meta
-        non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]
+        non_pks_non_generated = [
+            f
+            for f in meta.local_concrete_fields
+            if not f.primary_key and not f.generated
+        ]
 
         if update_fields:
-            non_pks = [
+            non_pks_non_generated = [
                 f
-                for f in non_pks
+                for f in non_pks_non_generated
                 if f.name in update_fields or f.attname in update_fields
             ]
 
@@ -1100,7 +1104,7 @@ def _save_table(
                     None,
                     (getattr(self, f.attname) if raw else f.pre_save(self, False)),
                 )
-                for f in non_pks
+                for f in non_pks_non_generated
             ]
             forced_update = update_fields or force_update
             updated = self._do_update(
diff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt
index fd36171c4084..506127b0ca8d 100644
--- a/docs/releases/5.0.5.txt
+++ b/docs/releases/5.0.5.txt
@@ -9,4 +9,6 @@ Django 5.0.5 fixes several bugs in 5.0.4.
 Bugfixes
 ========
 
-* ...
+* Fixed a bug in Django 5.0 that caused a crash of ``Model.save()`` when
+  creating an instance of a model with a ``GeneratedField`` and providing a
+  primary key (:ticket:`35350`).
diff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py
index 641ce591e479..2fbfe3c82ad8 100644
--- a/tests/model_fields/test_generatedfield.py
+++ b/tests/model_fields/test_generatedfield.py
@@ -207,6 +207,12 @@ def test_save(self):
         m.refresh_from_db()
         self.assertEqual(m.field, 8)
 
+    def test_save_model_with_pk(self):
+        m = self.base_model(pk=1, a=1, b=2)
+        m.save()
+        m = self._refresh_if_needed(m)
+        self.assertEqual(m.field, 3)
+
     def test_save_model_with_foreign_key(self):
         fk_object = Foo.objects.create(a=""abc"", d=Decimal(""12.34""))
         m = self.base_model(a=1, b=2, fk=fk_object)
","Thanks Matt Hegarty for the report.

Regression in f333e35.

# Trac ticket number
<!-- Replace [number] with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35350

# Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" **ticket flag** in the Trac system.
- [X] I have added or updated relevant **tests**.
- [X] I have added or updated relevant **docs**, including release notes if applicable.
"
django/django,18708,"diff --git a/tests/gis_tests/geoapp/tests.py b/tests/gis_tests/geoapp/tests.py
index 7ee47ee9a8f5..962d4f2217c1 100644
--- a/tests/gis_tests/geoapp/tests.py
+++ b/tests/gis_tests/geoapp/tests.py
@@ -496,6 +496,42 @@ def test_wkt_string_in_lookup(self):
         with self.assertNoLogs(""django.contrib.gis"", ""ERROR""):
             State.objects.filter(poly__intersects=""LINESTRING(0 0, 1 1, 5 5)"")
 
+    @skipUnlessGISLookup(""coveredby"")
+    def test_coveredby_lookup(self):
+        poly = Polygon(LinearRing((0, 0), (0, 5), (5, 5), (5, 0), (0, 0)))
+        state = State.objects.create(name=""Test"", poly=poly)
+
+        small_poly = Polygon(LinearRing((0, 0), (1, 4), (4, 4), (4, 1), (0, 0)))
+        qs = State.objects.filter(poly__coveredby=small_poly)
+        self.assertSequenceEqual(qs, [])
+
+        large_poly = Polygon(LinearRing((0, 0), (-1, 6), (6, 6), (6, -1), (0, 0)))
+        qs = State.objects.filter(poly__coveredby=large_poly)
+        self.assertSequenceEqual(qs, [state])
+
+        if not connection.ops.oracle:
+            # On Oracle, COVEREDBY doesn't match for EQUAL objects.
+            qs = State.objects.filter(poly__coveredby=poly)
+            self.assertSequenceEqual(qs, [state])
+
+    @skipUnlessGISLookup(""covers"")
+    def test_covers_lookup(self):
+        poly = Polygon(LinearRing((0, 0), (0, 5), (5, 5), (5, 0), (0, 0)))
+        state = State.objects.create(name=""Test"", poly=poly)
+
+        small_poly = Polygon(LinearRing((0, 0), (1, 4), (4, 4), (4, 1), (0, 0)))
+        qs = State.objects.filter(poly__covers=small_poly)
+        self.assertSequenceEqual(qs, [state])
+
+        large_poly = Polygon(LinearRing((-1, -1), (-1, 6), (6, 6), (6, -1), (-1, -1)))
+        qs = State.objects.filter(poly__covers=large_poly)
+        self.assertSequenceEqual(qs, [])
+
+        if not connection.ops.oracle:
+            # On Oracle, COVERS doesn't match for EQUAL objects.
+            qs = State.objects.filter(poly__covers=poly)
+            self.assertSequenceEqual(qs, [state])
+
     @skipUnlessDBFeature(""supports_relate_lookup"")
     def test_relate_lookup(self):
         ""Testing the 'relate' lookup type.""
",Cherry-pick from #18631
numpy/numpy,29135,"diff --git a/numpy/testing/_private/utils.py b/numpy/testing/_private/utils.py
index d7ceaeab72cc..f36af6d82503 100644
--- a/numpy/testing/_private/utils.py
+++ b/numpy/testing/_private/utils.py
@@ -500,7 +500,8 @@ def print_assert_equal(test_string, actual, desired):
         raise AssertionError(msg.getvalue())
 
 
-def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True):
+def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True,
+                        *, precision=6):
     """"""
     Raises an AssertionError if two items are not equal up to desired
     precision.
@@ -531,6 +532,10 @@ def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True):
         The error message to be printed in case of failure.
     verbose : bool, optional
         If True, the conflicting values are appended to the error message.
+    precision : int or None, optional
+        Number of digits of precision for floating point output (default 6).
+        May be None if `floatmode` is not `fixed`, to print as many digits as
+        necessary to uniquely specify the value (see `np.set_printoptions()`).
 
     Raises
     ------
@@ -556,7 +561,8 @@ def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True):
      DESIRED: 2.33333334
 
     >>> assert_almost_equal(np.array([1.0,2.3333333333333]),
-    ...                     np.array([1.0,2.33333334]), decimal=9)
+    ...                     np.array([1.0,2.33333334]),
+    ...                     decimal=9, precision=9)
     Traceback (most recent call last):
         ...
     AssertionError:
@@ -600,14 +606,15 @@ def _build_err_msg():
             desiredr = desired
             desiredi = 0
         try:
-            assert_almost_equal(actualr, desiredr, decimal=decimal)
-            assert_almost_equal(actuali, desiredi, decimal=decimal)
+            assert_almost_equal(actualr, desiredr, decimal=decimal, precision=precision)
+            assert_almost_equal(actuali, desiredi, decimal=decimal, precision=precision)
         except AssertionError:
             raise AssertionError(_build_err_msg())
 
     if isinstance(actual, (ndarray, tuple, list)) \
             or isinstance(desired, (ndarray, tuple, list)):
-        return assert_array_almost_equal(actual, desired, decimal, err_msg)
+        return assert_array_almost_equal(actual, desired, decimal, err_msg,
+                                         precision=precision)
     try:
         # If one of desired/actual is not finite, handle it specially here:
         # check that both are nan if any is a nan, and test for equality
@@ -925,7 +932,7 @@ def func_assert_same_pos(x, y, func=isnan, hasval='nan'):
 
 
 def assert_array_equal(actual, desired, err_msg='', verbose=True, *,
-                       strict=False):
+                       precision=6, strict=False):
     """"""
     Raises an AssertionError if two array_like objects are not equal.
 
@@ -960,6 +967,10 @@ def assert_array_equal(actual, desired, err_msg='', verbose=True, *,
         The error message to be printed in case of failure.
     verbose : bool, optional
         If True, the conflicting values are appended to the error message.
+    precision : int or None, optional
+        Number of digits of precision for floating point output (default 6).
+        May be None if `floatmode` is not `fixed`, to print as many digits as
+        necessary to uniquely specify the value (see `np.set_printoptions()`).
     strict : bool, optional
         If True, raise an AssertionError when either the shape or the data
         type of the array_like objects does not match. The special
@@ -1050,11 +1061,11 @@ def assert_array_equal(actual, desired, err_msg='', verbose=True, *,
     __tracebackhide__ = True  # Hide traceback for py.test
     assert_array_compare(operator.__eq__, actual, desired, err_msg=err_msg,
                          verbose=verbose, header='Arrays are not equal',
-                         strict=strict)
+                         precision=precision, strict=strict)
 
 
 def assert_array_almost_equal(actual, desired, decimal=6, err_msg='',
-                              verbose=True):
+                              verbose=True, *, precision=6):
     """"""
     Raises an AssertionError if two objects are not equal up to desired
     precision.
@@ -1087,6 +1098,10 @@ def assert_array_almost_equal(actual, desired, decimal=6, err_msg='',
       The error message to be printed in case of failure.
     verbose : bool, optional
         If True, the conflicting values are appended to the error message.
+    precision : int or None, optional
+        Number of digits of precision for floating point output (default 6).
+        May be None if `floatmode` is not `fixed`, to print as many digits as
+        necessary to uniquely specify the value (see `np.set_printoptions()`).
 
     Raises
     ------
@@ -1162,13 +1177,15 @@ def compare(x, y):
 
         return z < 1.5 * 10.0**(-decimal)
 
+    header = ('Arrays are not almost equal to %d decimals' % decimal)
     assert_array_compare(compare, actual, desired, err_msg=err_msg,
                          verbose=verbose,
-             header=('Arrays are not almost equal to %d decimals' % decimal),
-             precision=decimal)
+                         header=header,
+                         precision=precision)
 
 
-def assert_array_less(x, y, err_msg='', verbose=True, *, strict=False):
+def assert_array_less(x, y, err_msg='', verbose=True, *, precision=6,
+                      strict=False):
     """"""
     Raises an AssertionError if two array_like objects are not ordered by less
     than.
@@ -1190,6 +1207,10 @@ def assert_array_less(x, y, err_msg='', verbose=True, *, strict=False):
       The error message to be printed in case of failure.
     verbose : bool
         If True, the conflicting values are appended to the error message.
+    precision : int or None, optional
+        Number of digits of precision for floating point output (default 6).
+        May be None if `floatmode` is not `fixed`, to print as many digits as
+        necessary to uniquely specify the value (see `np.set_printoptions()`).
     strict : bool, optional
         If True, raise an AssertionError when either the shape or the data
         type of the array_like objects does not match. The special
@@ -1278,6 +1299,7 @@ def assert_array_less(x, y, err_msg='', verbose=True, *, strict=False):
     assert_array_compare(operator.__lt__, x, y, err_msg=err_msg,
                          verbose=verbose,
                          header='Arrays are not strictly ordered `x < y`',
+                         precision=precision,
                          equal_inf=False,
                          strict=strict,
                          names=('x', 'y'))
@@ -1602,7 +1624,7 @@ def _assert_valid_refcount(op):
 
 
 def assert_allclose(actual, desired, rtol=1e-7, atol=0, equal_nan=True,
-                    err_msg='', verbose=True, *, strict=False):
+                    err_msg='', verbose=True, *, precision=6, strict=False):
     """"""
     Raises an AssertionError if two objects are not equal up to desired
     tolerance.
@@ -1633,6 +1655,10 @@ def assert_allclose(actual, desired, rtol=1e-7, atol=0, equal_nan=True,
         The error message to be printed in case of failure.
     verbose : bool, optional
         If True, the conflicting values are appended to the error message.
+    precision : int or None, optional
+        Number of digits of precision for floating point output (default 6).
+        May be None if `floatmode` is not `fixed`, to print as many digits as
+        necessary to uniquely specify the value (see `np.set_printoptions()`).
     strict : bool, optional
         If True, raise an ``AssertionError`` when either the shape or the data
         type of the arguments does not match. The special handling of scalars
@@ -1706,8 +1732,8 @@ def compare(x, y):
     actual, desired = np.asanyarray(actual), np.asanyarray(desired)
     header = f'Not equal to tolerance rtol={rtol:g}, atol={atol:g}'
     assert_array_compare(compare, actual, desired, err_msg=str(err_msg),
-                         verbose=verbose, header=header, equal_nan=equal_nan,
-                         strict=strict)
+                         verbose=verbose, header=header, precision=precision,
+                         equal_nan=equal_nan, strict=strict)
 
 
 def assert_array_almost_equal_nulp(x, y, nulp=1):
diff --git a/numpy/testing/tests/test_utils.py b/numpy/testing/tests/test_utils.py
index fcf20091ca8e..3a44089d8484 100644
--- a/numpy/testing/tests/test_utils.py
+++ b/numpy/testing/tests/test_utils.py
@@ -702,7 +702,7 @@ def test_error_message(self):
                         ' DESIRED: array([1.00000000002, 2.00000000003, '
                         '3.00004      ])')
         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
-            self._assert_func(x, y, decimal=12)
+            self._assert_func(x, y, decimal=12, precision=11)
 
         # With the default value of decimal digits, only the 3rd element
         # differs. Note that we only check for the formatting of the arrays
","…son fails.

<!--         ----------------------------------------------------------------
                MAKE SURE YOUR PR GETS THE ATTENTION IT DESERVES!
                ----------------------------------------------------------------

*  FORMAT IT RIGHT:
      https://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message

*  IF IT'S A NEW FEATURE OR API CHANGE, TEST THE WATERS:
      https://www.numpy.org/devdocs/dev/development_workflow.html#get-the-mailing-list-s-opinion

*  HIT ALL THE GUIDELINES:
      https://numpy.org/devdocs/dev/index.html#guidelines

*  WHAT TO DO IF WE HAVEN'T GOTTEN BACK TO YOU:
      https://www.numpy.org/devdocs/dev/development_workflow.html#getting-your-pr-reviewed
-->
"
django/django,18399,"diff --git a/django/contrib/admin/tests.py b/django/contrib/admin/tests.py
index dc857055b117..3810c359e59f 100644
--- a/django/contrib/admin/tests.py
+++ b/django/contrib/admin/tests.py
@@ -6,6 +6,9 @@
 from django.utils.deprecation import MiddlewareMixin
 from django.utils.translation import gettext as _
 
+# Make unittest ignore frames in this module when reporting failures.
+__unittest = True
+
 
 class CSPMiddleware(MiddlewareMixin):
     """"""The admin's JavaScript should be compatible with CSP.""""""
diff --git a/django/contrib/messages/test.py b/django/contrib/messages/test.py
index 3a69f54585ed..9f3e1bf0bcb0 100644
--- a/django/contrib/messages/test.py
+++ b/django/contrib/messages/test.py
@@ -1,5 +1,8 @@
 from .api import get_messages
 
+# Make unittest ignore frames in this module when reporting failures.
+__unittest = True
+
 
 class MessagesTestMixin:
     def assertMessages(self, response, expected_messages, *, ordered=True):
diff --git a/django/test/testcases.py b/django/test/testcases.py
index 6027332cd547..cd7e7b45d685 100644
--- a/django/test/testcases.py
+++ b/django/test/testcases.py
@@ -67,6 +67,9 @@
     ""skipUnlessDBFeature"",
 )
 
+# Make unittest ignore frames in this module when reporting failures.
+__unittest = True
+
 
 if not PY311:
     # Backport of unittest.case._enter_context() from Python 3.11.
diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt
index 92bb501d61cb..5732a5473c7e 100644
--- a/docs/releases/5.2.txt
+++ b/docs/releases/5.2.txt
@@ -240,7 +240,9 @@ Templates
 Tests
 ~~~~~
 
-* ...
+* Stack frames from Django's custom assertions are now hidden. This makes test
+  failures easier to read and enables :option:`test --pdb` to directly enter
+  into the failing test method.
 
 URLs
 ~~~~
diff --git a/tests/messages_tests/tests.py b/tests/messages_tests/tests.py
index 19aeee9a08c0..3f5cd56e85e7 100644
--- a/tests/messages_tests/tests.py
+++ b/tests/messages_tests/tests.py
@@ -1,5 +1,7 @@
 import importlib
 import sys
+import traceback
+import unittest
 from unittest import mock
 
 from django.conf import settings
@@ -185,3 +187,17 @@ def test_mismatching_length(self):
         )
         with self.assertRaisesMessage(AssertionError, msg):
             self.assertMessages(response, [])
+
+    def test_method_frames_ignored_by_unittest(self):
+        response = FakeResponse()
+        try:
+            self.assertMessages(response, [object()])
+        except AssertionError:
+            exc_type, exc, tb = sys.exc_info()
+
+        result = unittest.TestResult()
+        result.addFailure(self, (exc_type, exc, tb))
+        stack = traceback.extract_tb(exc.__traceback__)
+        self.assertEqual(len(stack), 1)
+        # Top element in the stack is this method, not assertMessages.
+        self.assertEqual(stack[-1].name, ""test_method_frames_ignored_by_unittest"")
diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py
index cd64c087c43d..60b65e309a31 100644
--- a/tests/test_utils/tests.py
+++ b/tests/test_utils/tests.py
@@ -1,6 +1,7 @@
 import os
 import sys
 import threading
+import traceback
 import unittest
 import warnings
 from io import StringIO
@@ -1113,6 +1114,19 @@ def test_not_equal_parsing_errors(self):
         with self.assertRaises(AssertionError):
             self.assertJSONNotEqual(valid_json, invalid_json)
 
+    def test_method_frames_ignored_by_unittest(self):
+        try:
+            self.assertJSONEqual(""1"", ""2"")
+        except AssertionError:
+            exc_type, exc, tb = sys.exc_info()
+
+        result = unittest.TestResult()
+        result.addFailure(self, (exc_type, exc, tb))
+        stack = traceback.extract_tb(exc.__traceback__)
+        self.assertEqual(len(stack), 1)
+        # Top element in the stack is this method, not assertJSONEqual.
+        self.assertEqual(stack[-1].name, ""test_method_frames_ignored_by_unittest"")
+
 
 class XMLEqualTests(SimpleTestCase):
     def test_simple_equal(self):
","# Trac ticket number

ticket-35622

# Branch description
Fixes the issue reported on the ticket, as tested on my example project: the `assertJSONEqual` frame no longer appears in the failure report and the debugger opens within the test. I added a unit test.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18923,"diff --git a/django/views/generic/detail.py b/django/views/generic/detail.py
index a5f604bf1ab4..70e427c59b29 100644
--- a/django/views/generic/detail.py
+++ b/django/views/generic/detail.py
@@ -121,9 +121,10 @@ class SingleObjectTemplateResponseMixin(TemplateResponseMixin):
     def get_template_names(self):
         """"""
         Return a list of template names to be used for the request. May not be
-        called if render_to_response() is overridden. Return the following list:
+        called if render_to_response() is overridden. Return a list containing
+        ``template_name``, if set on the value. Otherwise, return a list
+        containing:
 
-        * the value of ``template_name`` on the view (if provided)
         * the contents of the ``template_name_field`` field on the
           object instance that the view is operating upon (if available)
         * ``<app_label>/<model_name><template_name_suffix>.html``
@@ -170,7 +171,11 @@ def get_template_names(self):
             # If we still haven't managed to find any template names, we should
             # re-raise the ImproperlyConfigured to alert the user.
             if not names:
-                raise
+                raise ImproperlyConfigured(
+                    ""SingleObjectTemplateResponseMixin requires a definition ""
+                    ""of 'template_name', 'template_name_field', or 'model'; ""
+                    ""or an implementation of 'get_template_names()'.""
+                )
 
         return names
 
diff --git a/docs/ref/class-based-views/mixins-single-object.txt b/docs/ref/class-based-views/mixins-single-object.txt
index 1378e10823df..2e96422fc794 100644
--- a/docs/ref/class-based-views/mixins-single-object.txt
+++ b/docs/ref/class-based-views/mixins-single-object.txt
@@ -164,9 +164,10 @@ Single object mixins
 
     .. method:: get_template_names()
 
-        Returns a list of candidate template names. Returns the following list:
+        Returns a list of candidate template names. Return a list containing
+        ``template_name``, if set on the value. Otherwise, return a list
+        containing:
 
-        * the value of ``template_name`` on the view (if provided)
         * the contents of the ``template_name_field`` field on the
           object instance that the view is operating upon (if available)
         * ``<app_label>/<model_name><template_name_suffix>.html``
diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py
index add485245a87..5f3941196b26 100644
--- a/tests/generic_views/test_base.py
+++ b/tests/generic_views/test_base.py
@@ -607,8 +607,9 @@ def test_template_mixin_without_template(self):
         """"""
         view = views.TemplateResponseWithoutTemplate()
         msg = (
-            ""TemplateResponseMixin requires either a definition of ""
-            ""'template_name' or an implementation of 'get_template_names()'""
+            ""SingleObjectTemplateResponseMixin requires a definition ""
+            ""of 'template_name', 'template_name_field', or 'model'; ""
+            ""or an implementation of 'get_template_names()'.""
         )
         with self.assertRaisesMessage(ImproperlyConfigured, msg):
             view.get_template_names()
","#### Trac ticket number

ticket-26007

#### Branch description

* Updated doc string of get_template_names to clarify how the list gets returned
* Updated the error message to be clearer when the view is incorrectly configured.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19371,"diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py
index 7c4841f91646..9177fde77fe0 100644
--- a/tests/admin_views/test_adminsite.py
+++ b/tests/admin_views/test_adminsite.py
@@ -68,8 +68,8 @@ def test_each_context_site_url_with_script_name(self):
         request.user = self.u1
         self.assertEqual(site.each_context(request)[""site_url""], ""/my-script-name/"")
 
-    def test_available_apps(self):
-        ctx = self.ctx
+    def test_available_apps(self, ctx=None):
+        ctx = ctx if ctx else self.ctx
         apps = ctx[""available_apps""]
         # we have registered two models from two different apps
         self.assertEqual(len(apps), 2)
@@ -101,6 +101,15 @@ def test_available_apps(self):
         self.assertEqual(user[""add_url""], ""/test_admin/admin/auth/user/add/"")
         self.assertEqual(user[""name""], ""Users"")
 
+    def test_available_apps_in_app_index(self):
+        """"""available_apps in some app_index view are the same as in site index view""""""
+        request = self.request_factory.get(
+            reverse(""test_adminsite:app_list"", args=[""auth""])
+        )
+        request.user = self.u1
+        ctx = site.each_context(request)
+        self.test_available_apps(ctx)
+
 
 class SiteActionsTests(SimpleTestCase):
     def setUp(self):
",https://github.com/knyghty/django-admin-keyboard-shortcuts/issues/53
django/django,19486,"diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index 495657d26496..849be1f055d3 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -154,7 +154,19 @@ def cleanup_headers(self):
             self.request_handler.close_connection = True
 
     def close(self):
-        self.get_stdin().read()
+        def _read_with_chunks(io_stream, chunk_size=1024):
+            """"""
+            Block-based read prevents memory usage caused by large packets
+            """"""
+            lefe_size = io_stream.limit
+            while True:
+                if left_size <= chunk_size:
+                    io_stream.read(left_size)
+                    break
+                io_stream.read(chunk_size)
+                left_size = left_size - chunk_size
+                continue
+        _read_with_chunks(self.get_stdin())
         super().close()
 
     def finish_response(self):
","When a request is closed, data is read from the buffer by fragment to prevent memory usage caused by reading all packets at a time.

#### Trac ticket number
N/A

#### Branch description
In the original implementation, when an external attacker initiates a request using a large packet, the packet is not parsed in a timely manner. In addition, when the packet is closed, the input stream is loaded at a time. As a result, the memory usage exceeds the threshold and DDoS attacks occur.

#### Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19077,"diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index eb0e361d8dcb..e594067b50c9 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -32,9 +32,9 @@
 from .validation import DatabaseValidation
 
 version = Database.version_info
-if version < (1, 4, 3):
+if version < (2, 2, 1):
     raise ImproperlyConfigured(
-        ""mysqlclient 1.4.3 or newer is required; you have %s."" % Database.__version__
+        ""mysqlclient 2.2.1 or newer is required; you have %s."" % Database.__version__
     )
 
 
@@ -254,12 +254,6 @@ def get_connection_params(self):
     @async_unsafe
     def get_new_connection(self, conn_params):
         connection = Database.connect(**conn_params)
-        # bytes encoder in mysqlclient doesn't work and was added only to
-        # prevent KeyErrors in Django < 2.0. We can remove this workaround when
-        # mysqlclient 2.1 becomes the minimal mysqlclient supported by Django.
-        # See https://github.com/PyMySQL/mysqlclient/issues/489
-        if connection.encoders.get(bytes) is bytes:
-            connection.encoders.pop(bytes)
         return connection
 
     def init_connection_state(self):
diff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py
index c864cab57a2e..a0b5e4154e82 100644
--- a/django/db/backends/postgresql/base.py
+++ b/django/db/backends/postgresql/base.py
@@ -1,7 +1,7 @@
 """"""
 PostgreSQL database backend for Django.
 
-Requires psycopg2 >= 2.8.4 or psycopg >= 3.1.8
+Requires psycopg2 >= 2.9.9 or psycopg >= 3.1.12
 """"""
 
 import asyncio
@@ -34,13 +34,13 @@ def psycopg_version():
     return get_version_tuple(version)
 
 
-if psycopg_version() < (2, 8, 4):
+if psycopg_version() < (2, 9, 9):
     raise ImproperlyConfigured(
-        f""psycopg2 version 2.8.4 or newer is required; you have {Database.__version__}""
+        f""psycopg2 version 2.9.9 or newer is required; you have {Database.__version__}""
     )
-if (3,) <= psycopg_version() < (3, 1, 8):
+if (3,) <= psycopg_version() < (3, 1, 12):
     raise ImproperlyConfigured(
-        f""psycopg version 3.1.8 or newer is required; you have {Database.__version__}""
+        f""psycopg version 3.1.12 or newer is required; you have {Database.__version__}""
     )
 
 
diff --git a/docs/internals/contributing/writing-code/unit-tests.txt b/docs/internals/contributing/writing-code/unit-tests.txt
index f2cdd76a17c8..489b651c4b62 100644
--- a/docs/internals/contributing/writing-code/unit-tests.txt
+++ b/docs/internals/contributing/writing-code/unit-tests.txt
@@ -306,27 +306,27 @@ Running all the tests
 If you want to run the full suite of tests, you'll need to install a number of
 dependencies:
 
-* :pypi:`aiosmtpd`
-* :pypi:`argon2-cffi` 19.2.0+
+* :pypi:`aiosmtpd` 1.4.5+
+* :pypi:`argon2-cffi` 23.1.0+
 * :pypi:`asgiref` 3.8.1+ (required)
-* :pypi:`bcrypt`
+* :pypi:`bcrypt` 4.1.1+
 * :pypi:`colorama` 0.4.6+
 * :pypi:`docutils` 0.19+
-* :pypi:`geoip2`
+* :pypi:`geoip2` 4.8.0+
 * :pypi:`Jinja2` 2.11+
-* :pypi:`numpy`
-* :pypi:`Pillow` 6.2.1+
-* :pypi:`PyYAML`
+* :pypi:`numpy` 1.26.0+
+* :pypi:`Pillow` 10.1.0+
+* :pypi:`PyYAML` 6.0.2+
 * :pypi:`pywatchman`
-* :pypi:`redis` 3.4+
+* :pypi:`redis` 5.1.0+
 * :pypi:`setuptools`
 * :pypi:`pymemcache`, plus a `supported Python binding
   <https://memcached.org/>`_
 * `gettext <https://www.gnu.org/software/gettext/manual/gettext.html>`_
   (:ref:`gettext_on_windows`)
-* :pypi:`selenium` 4.8.0+
-* :pypi:`sqlparse` 0.3.1+ (required)
-* :pypi:`tblib` 1.5.0+
+* :pypi:`selenium` 4.23.0+
+* :pypi:`sqlparse` 0.5.0+ (required)
+* :pypi:`tblib` 3.0.0+
 
 You can find these dependencies in `pip requirements files
 <https://pip.pypa.io/en/latest/user_guide/#requirements-files>`_ inside the
diff --git a/docs/ref/databases.txt b/docs/ref/databases.txt
index 217be1972826..541f6e6b7106 100644
--- a/docs/ref/databases.txt
+++ b/docs/ref/databases.txt
@@ -115,8 +115,8 @@ below for information on how to set up your database correctly.
 PostgreSQL notes
 ================
 
-Django supports PostgreSQL 14 and higher. `psycopg`_ 3.1.8+ or `psycopg2`_
-2.8.4+ is required, though the latest `psycopg`_ 3.1.8+ is recommended.
+Django supports PostgreSQL 14 and higher. `psycopg`_ 3.1.12+ or `psycopg2`_
+2.9.9+ is required, though the latest `psycopg`_ 3.1.12+ is recommended.
 
 .. note::
 
@@ -486,7 +486,7 @@ Connector/Python includes `its own`_.
 mysqlclient
 ~~~~~~~~~~~
 
-Django requires `mysqlclient`_ 1.4.3 or later.
+Django requires `mysqlclient`_ 2.2.1 or later.
 
 MySQL Connector/Python
 ~~~~~~~~~~~~~~~~~~~~~~
diff --git a/docs/releases/6.0.txt b/docs/releases/6.0.txt
index 9dabf7f666f5..0645441c612c 100644
--- a/docs/releases/6.0.txt
+++ b/docs/releases/6.0.txt
@@ -235,6 +235,28 @@ backends.
 
 * ...
 
+Dropped support for Python < 3.12
+---------------------------------
+
+Because Python 3.12 is now the minimum supported version for Django, any
+optional dependencies must also meet that requirement. The following versions
+of each library are the first to add or confirm compatibility with Python 3.12:
+
+* ``aiosmtpd`` 1.4.5
+* ``argon2-cffi`` 23.1.0
+* ``bcrypt`` 4.1.1
+* ``geoip2`` 4.8.0
+* ``Pillow`` 10.1.0
+* ``mysqlclient`` 2.2.1
+* ``numpy`` 1.26.0
+* ``PyYAML`` 6.0.2
+* ``psycopg`` 3.1.12
+* ``psycopg2`` 2.9.9
+* ``redis-py`` 5.1.0
+* ``selenium`` 4.23.0
+* ``sqlparse`` 0.5.0
+* ``tblib`` 3.0.0
+
 Miscellaneous
 -------------
 
diff --git a/docs/topics/email.txt b/docs/topics/email.txt
index 74468063b800..ae4d81ef4b21 100644
--- a/docs/topics/email.txt
+++ b/docs/topics/email.txt
@@ -815,7 +815,7 @@ anything. The :pypi:`aiosmtpd` package provides a way to accomplish this:
 
 .. code-block:: shell
 
-    python -m pip install aiosmtpd
+    python -m pip install ""aiosmtpd >= 1.4.5""
 
     python -m aiosmtpd -n -l localhost:8025
 
diff --git a/docs/topics/testing/tools.txt b/docs/topics/testing/tools.txt
index a03ad7da786d..ce8e3fd8215e 100644
--- a/docs/topics/testing/tools.txt
+++ b/docs/topics/testing/tools.txt
@@ -1022,7 +1022,7 @@ First of all, you need to install the :pypi:`selenium` package:
 
 .. console::
 
-    $ python -m pip install ""selenium >= 4.8.0""
+    $ python -m pip install ""selenium >= 4.23.0""
 
 Then, add a ``LiveServerTestCase``-based test to your app's tests module
 (for example: ``myapp/tests.py``). For this example, we'll assume you're using
diff --git a/pyproject.toml b/pyproject.toml
index 540e64d95103..f10d15d20d89 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -8,7 +8,7 @@ dynamic = [""version""]
 requires-python = "">= 3.12""
 dependencies = [
     ""asgiref>=3.8.1"",
-    ""sqlparse>=0.3.1"",
+    ""sqlparse>=0.5.0"",
     ""tzdata; sys_platform == 'win32'"",
 ]
 authors = [
@@ -37,8 +37,8 @@ classifiers = [
 ]
 
 [project.optional-dependencies]
-argon2 = [""argon2-cffi>=19.1.0""]
-bcrypt = [""bcrypt""]
+argon2 = [""argon2-cffi>=23.1.0""]
+bcrypt = [""bcrypt>=4.1.1""]
 
 [project.scripts]
 django-admin = ""django.core.management:execute_from_command_line""
diff --git a/tests/requirements/mysql.txt b/tests/requirements/mysql.txt
index 27be1d86cc9c..d2e68b04cbd4 100644
--- a/tests/requirements/mysql.txt
+++ b/tests/requirements/mysql.txt
@@ -1 +1 @@
-mysqlclient >= 1.4.3
+mysqlclient >= 2.2.1
diff --git a/tests/requirements/postgres.txt b/tests/requirements/postgres.txt
index 91f911080cbe..b000879b5c32 100644
--- a/tests/requirements/postgres.txt
+++ b/tests/requirements/postgres.txt
@@ -1,3 +1,2 @@
-psycopg>=3.1.14; implementation_name == 'pypy'
-psycopg[binary]>=3.1.8; implementation_name != 'pypy'
+psycopg[binary]>=3.1.12
 psycopg-pool>=3.2.0
diff --git a/tests/requirements/py3.txt b/tests/requirements/py3.txt
index f0e208a115cb..131d84b1a521 100644
--- a/tests/requirements/py3.txt
+++ b/tests/requirements/py3.txt
@@ -1,21 +1,21 @@
-aiosmtpd
+aiosmtpd >= 1.4.5
 asgiref >= 3.8.1
-argon2-cffi >= 19.2.0
-bcrypt
-black
+argon2-cffi >= 23.1.0
+bcrypt >= 4.1.1
+black >= 2.4.10
 docutils >= 0.19
-geoip2
+geoip2 >= 4.8.0
 jinja2 >= 2.11.0
-numpy; python_version < '3.14'
-Pillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.14'
+numpy >= 1.26.0; python_version < '3.14'
+Pillow >= 10.1.0; sys.platform != 'win32' or python_version < '3.14'
 # pylibmc/libmemcached can't be built on Windows.
 pylibmc; sys_platform != 'win32'
 pymemcache >= 3.4.0
 pywatchman; sys_platform != 'win32'
-PyYAML
-redis >= 3.4.0
-selenium >= 4.8.0
-sqlparse >= 0.3.1
-tblib >= 1.5.0
+PyYAML >= 6.0.2
+redis >= 5.1.0
+selenium >= 4.23.0
+sqlparse >= 0.5.0
+tblib >= 3.0.0
 tzdata
 colorama >= 0.4.6; sys_platform == 'win32'
","This bumps minimum supported versions of 3rd-party packages to the first releases to support Python 3.12.

ticket-36005"
django/django,18950,"diff --git a/django/core/validators.py b/django/core/validators.py
index c4e734c1d82a..ff9573b1726d 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -6,7 +6,6 @@
 
 from django.core.exceptions import ValidationError
 from django.utils.deconstruct import deconstructible
-from django.utils.encoding import punycode
 from django.utils.ipv6 import is_valid_ipv6_address
 from django.utils.regex_helper import _lazy_re_compile
 from django.utils.translation import gettext_lazy as _
@@ -76,14 +75,14 @@ class DomainNameValidator(RegexValidator):
     # Max length for domain name labels is 63 characters per RFC 1034 sec. 3.1.
     domain_re = r""(?:\.(?!-)[a-z"" + ul + r""0-9-]{1,63}(?<!-))*""
     # Top-level domain.
-    tld_re = (
+    tld_no_fqdn_re = (
         r""\.""  # dot
         r""(?!-)""  # can't start with a dash
         r""(?:[a-z"" + ul + ""-]{2,63}""  # domain label
         r""|xn--[a-z0-9]{1,59})""  # or punycode label
         r""(?<!-)""  # can't end with a dash
-        r""\.?""  # may have a trailing dot
     )
+    tld_re = tld_no_fqdn_re + r""\.?""
     ascii_only_hostname_re = r""[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?""
     ascii_only_domain_re = r""(?:\.(?!-)[a-zA-Z0-9-]{1,63}(?<!-))*""
     ascii_only_tld_re = (
@@ -210,6 +209,10 @@ def validate_integer(value):
 class EmailValidator:
     message = _(""Enter a valid email address."")
     code = ""invalid""
+    hostname_re = DomainNameValidator.hostname_re
+    domain_re = DomainNameValidator.domain_re
+    tld_no_fqdn_re = DomainNameValidator.tld_no_fqdn_re
+
     user_regex = _lazy_re_compile(
         # dot-atom
         r""(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*\Z""
@@ -219,8 +222,7 @@ class EmailValidator:
         re.IGNORECASE,
     )
     domain_regex = _lazy_re_compile(
-        # max length for domain name labels is 63 characters per RFC 1034
-        r""((?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+)(?:[A-Z0-9-]{2,63}(?<!-))\Z"",
+        r""^"" + hostname_re + domain_re + tld_no_fqdn_re + r""\Z"",
         re.IGNORECASE,
     )
     literal_regex = _lazy_re_compile(
@@ -252,14 +254,6 @@ def __call__(self, value):
         if domain_part not in self.domain_allowlist and not self.validate_domain_part(
             domain_part
         ):
-            # Try for possible IDN domain-part
-            try:
-                domain_part = punycode(domain_part)
-            except UnicodeError:
-                pass
-            else:
-                if self.validate_domain_part(domain_part):
-                    return
             raise ValidationError(self.message, code=self.code, params={""value"": value})
 
     def validate_domain_part(self, domain_part):
diff --git a/tests/forms_tests/field_tests/test_emailfield.py b/tests/forms_tests/field_tests/test_emailfield.py
index 601318bae3d8..cfebf4216db4 100644
--- a/tests/forms_tests/field_tests/test_emailfield.py
+++ b/tests/forms_tests/field_tests/test_emailfield.py
@@ -31,7 +31,8 @@ def test_email_regexp_for_performance(self):
         # Check for runaway regex security problem. This will take a long time
         # if the security fix isn't in place.
         addr = ""viewx3dtextx26qx3d@yahoo.comx26latlngx3d15854521645943074058""
-        self.assertEqual(addr, f.clean(addr))
+        with self.assertRaisesMessage(ValidationError, ""Enter a valid email address.""):
+            f.clean(addr)
 
     def test_emailfield_not_required(self):
         f = EmailField(required=False)
diff --git a/tests/validators/tests.py b/tests/validators/tests.py
index 7455c93d407e..acd867c54532 100644
--- a/tests/validators/tests.py
+++ b/tests/validators/tests.py
@@ -319,6 +319,20 @@
     (validate_email, ""example@inv-.alid-.com"", ValidationError),
     (validate_email, ""example@inv-.-alid.com"", ValidationError),
     (validate_email, 'test@example.com\n\n<script src=""x.js"">', ValidationError),
+    (validate_email, ""email@xn--4ca9at.com"", None),
+    (validate_email, ""email@öäü.com"", None),
+    (validate_email, ""email@עִתוֹן.example.il"", None),
+    (validate_email, ""email@މިހާރު.example.mv"", None),
+    (validate_email, ""email@漢字.example.com"", None),
+    (validate_email, ""editor@މިހާރު.example.mv"", None),
+    (validate_email, ""@domain.com"", ValidationError),
+    (validate_email, ""email.domain.com"", ValidationError),
+    (validate_email, ""email@domain@domain.com"", ValidationError),
+    (validate_email, ""email@domain..com"", ValidationError),
+    (validate_email, ""email@.domain.com"", ValidationError),
+    (validate_email, ""email@-domain.com"", ValidationError),
+    (validate_email, ""email@domain-.com"", ValidationError),
+    (validate_email, ""email@domain.com-"", ValidationError),
     # Quoted-string format (CR not allowed)
     (validate_email, '""\\\011""@here.com', None),
     (validate_email, '""\\\012""@here.com', ValidationError),
","#### Trac ticket number

ticket-[36014](https://code.djangoproject.com/ticket/36014)

#### Branch description
This PR updates Django's domain validation to properly handle IDNA 2008 encoded domains. The changes replace the legacy `punycode` encoding function (that only supports IDNA 2003) with a simple IDNA 2008 validator that was written to avoid the third party dependency for IDNA domain validation. I added sufficient tests to make sure that we don't miss out on common edge cases, so I think this simplified validator should be sufficient for our current needs. 

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,13418,"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index bea685966e7b..fa62a01803e3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -495,7 +495,10 @@ def has_change_permission(self, request, obj=None):
         """"""
         opts = self.opts
         codename = get_permission_codename('change', opts)
-        return request.user.has_perm(""%s.%s"" % (opts.app_label, codename))
+        return (
+            request.user.has_perm(""%s.%s"" % (opts.app_label, codename)) or
+            request.user.has_perm(""%s.%s"" % (opts.app_label, codename), obj=obj)
+        )
 
     def has_delete_permission(self, request, obj=None):
         """"""
@@ -510,7 +513,10 @@ def has_delete_permission(self, request, obj=None):
         """"""
         opts = self.opts
         codename = get_permission_codename('delete', opts)
-        return request.user.has_perm(""%s.%s"" % (opts.app_label, codename))
+        return (
+            request.user.has_perm(""%s.%s"" % (opts.app_label, codename)) or
+            request.user.has_perm(""%s.%s"" % (opts.app_label, codename), obj=obj)
+        )
 
     def has_view_permission(self, request, obj=None):
         """"""
@@ -528,7 +534,9 @@ def has_view_permission(self, request, obj=None):
         codename_change = get_permission_codename('change', opts)
         return (
             request.user.has_perm('%s.%s' % (opts.app_label, codename_view)) or
-            request.user.has_perm('%s.%s' % (opts.app_label, codename_change))
+            request.user.has_perm('%s.%s' % (opts.app_label, codename_change)) or
+            request.user.has_perm('%s.%s' % (opts.app_label, codename_view), obj=obj) or
+            request.user.has_perm('%s.%s' % (opts.app_label, codename_change), obj=obj)
         )
 
     def has_view_or_change_permission(self, request, obj=None):
","to facilitate integration between backends providing object level
permissions, like django-guardian and applications that heavily
utilize the admin panel."
django/django,19451,"diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index ea83b6881f34..13af96c004f7 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -69,6 +69,7 @@
     Collector,
     Color,
     ComplexSortedPerson,
+    Country,
     CoverLetter,
     CustomArticle,
     CyclicOne,
@@ -6698,11 +6699,12 @@ def _get_text_inside_element_by_selector(selector):
         self.wait_until(lambda d: len(d.window_handles) == 1, 1)
         self.selenium.switch_to.window(self.selenium.window_handles[0])
 
+        argentina = Country.objects.get(name=""Argentina"")
         self.assertHTMLEqual(
             _get_HTML_inside_element_by_id(born_country_select_id),
-            """"""
+            f""""""
             <option value="""" selected="""">---------</option>
-            <option value=""1"" selected="""">Argentina</option>
+            <option value=""{argentina.pk}"" selected="""">Argentina</option>
             """""",
         )
         # Argentina isn't added to the living_country select nor selected by
@@ -6736,12 +6738,13 @@ def _get_text_inside_element_by_selector(selector):
         self.wait_until(lambda d: len(d.window_handles) == 1, 1)
         self.selenium.switch_to.window(self.selenium.window_handles[0])
 
+        spain = Country.objects.get(name=""Spain"")
         self.assertHTMLEqual(
             _get_HTML_inside_element_by_id(born_country_select_id),
-            """"""
+            f""""""
             <option value="""" selected="""">---------</option>
-            <option value=""1"" selected="""">Argentina</option>
-            <option value=""2"">Spain</option>
+            <option value=""{argentina.pk}"" selected="""">Argentina</option>
+            <option value=""{spain.pk}"">Spain</option>
             """""",
         )
 
@@ -6778,12 +6781,13 @@ def _get_text_inside_element_by_selector(selector):
         self.wait_until(lambda d: len(d.window_handles) == 1, 1)
         self.selenium.switch_to.window(self.selenium.window_handles[0])
 
+        italy = spain
         self.assertHTMLEqual(
             _get_HTML_inside_element_by_id(born_country_select_id),
-            """"""
+            f""""""
             <option value="""" selected="""">---------</option>
-            <option value=""1"" selected="""">Argentina</option>
-            <option value=""2"">Italy</option>
+            <option value=""{argentina.pk}"" selected="""">Argentina</option>
+            <option value=""{italy.pk}"">Italy</option>
             """""",
         )
         # Italy is added to the living_country select and it's also selected by
diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py
index efff4e47d799..bd2dd10cc42f 100644
--- a/tests/admin_widgets/tests.py
+++ b/tests/admin_widgets/tests.py
@@ -1740,8 +1740,8 @@ def test_refresh_page(self):
 class AdminRawIdWidgetSeleniumTests(AdminWidgetSeleniumTestCase):
     def setUp(self):
         super().setUp()
-        Band.objects.create(id=42, name=""Bogey Blues"")
-        Band.objects.create(id=98, name=""Green Potatoes"")
+        self.blues = Band.objects.create(name=""Bogey Blues"")
+        self.potatoes = Band.objects.create(name=""Green Potatoes"")
 
     @screenshot_cases([""desktop_size"", ""mobile_size"", ""rtl"", ""dark"", ""high_contrast""])
     def test_ForeignKey(self):
@@ -1763,23 +1763,23 @@ def test_ForeignKey(self):
         self.selenium.find_element(By.ID, ""lookup_id_main_band"").click()
         self.wait_for_and_switch_to_popup()
         link = self.selenium.find_element(By.LINK_TEXT, ""Bogey Blues"")
-        self.assertIn(""/band/42/"", link.get_attribute(""href""))
+        self.assertIn(f""/band/{self.blues.pk}/"", link.get_attribute(""href""))
         link.click()
 
         # The field now contains the selected band's id
         self.selenium.switch_to.window(main_window)
-        self.wait_for_value(""#id_main_band"", ""42"")
+        self.wait_for_value(""#id_main_band"", str(self.blues.pk))
 
         # Reopen the popup window and click on another band
         self.selenium.find_element(By.ID, ""lookup_id_main_band"").click()
         self.wait_for_and_switch_to_popup()
         link = self.selenium.find_element(By.LINK_TEXT, ""Green Potatoes"")
-        self.assertIn(""/band/98/"", link.get_attribute(""href""))
+        self.assertIn(f""/band/{self.potatoes.pk}/"", link.get_attribute(""href""))
         link.click()
 
         # The field now contains the other selected band's id
         self.selenium.switch_to.window(main_window)
-        self.wait_for_value(""#id_main_band"", ""98"")
+        self.wait_for_value(""#id_main_band"", str(self.potatoes.pk))
 
     def test_many_to_many(self):
         from selenium.webdriver.common.by import By
@@ -1810,23 +1810,25 @@ def test_many_to_many(self):
         self.selenium.find_element(By.ID, ""lookup_id_supporting_bands"").click()
         self.wait_for_and_switch_to_popup()
         link = self.selenium.find_element(By.LINK_TEXT, ""Bogey Blues"")
-        self.assertIn(""/band/42/"", link.get_attribute(""href""))
+        self.assertIn(f""/band/{self.blues.pk}/"", link.get_attribute(""href""))
         link.click()
 
         # The field now contains the selected band's id
         self.selenium.switch_to.window(main_window)
-        self.wait_for_value(""#id_supporting_bands"", ""42"")
+        self.wait_for_value(""#id_supporting_bands"", str(self.blues.pk))
 
         # Reopen the popup window and click on another band
         self.selenium.find_element(By.ID, ""lookup_id_supporting_bands"").click()
         self.wait_for_and_switch_to_popup()
         link = self.selenium.find_element(By.LINK_TEXT, ""Green Potatoes"")
-        self.assertIn(""/band/98/"", link.get_attribute(""href""))
+        self.assertIn(f""/band/{self.potatoes.pk}/"", link.get_attribute(""href""))
         link.click()
 
         # The field now contains the two selected bands' ids
         self.selenium.switch_to.window(main_window)
-        self.wait_for_value(""#id_supporting_bands"", ""42,98"")
+        self.wait_for_value(
+            ""#id_supporting_bands"", f""{self.blues.pk},{self.potatoes.pk}""
+        )
 
 
 class RelatedFieldWidgetSeleniumTests(AdminWidgetSeleniumTestCase):
","Failures observed when testing with MongoDB.
"
django/django,18770,"diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index d28a38281472..51450d1d9e09 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -121,7 +121,7 @@ def media(self):
 
     @cached_property
     def is_collapsible(self):
-        if any([field in self.fields for field in self.form.errors]):
+        if any(field in self.fields for field in self.form.errors):
             return False
         return ""collapse"" in self.classes
 
","
#### Trac ticket number
https://code.djangoproject.com/ticket/35893

#### Branch description
Grepping through the code base, I found two instances where `any`/`all` were called with an intermediately generated list-comprehension. This is _usually_ an anti-pattern, because it prevents short-circuiting. One of the instances has a comment explaining why it needs to use list comprehension. I fleshed that out a tiny bit more to make the intent clearer. I removed the other instance of list comprehension

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18834,"diff --git a/docs/ref/request-response.txt b/docs/ref/request-response.txt
index 26fcb5fa0824..3944d602544c 100644
--- a/docs/ref/request-response.txt
+++ b/docs/ref/request-response.txt
@@ -554,11 +554,11 @@ a subclass of dictionary. Exceptions are outlined here:
 
 .. method:: QueryDict.__getitem__(key)
 
-    Returns the value for the given key. If the key has more than one value,
-    it returns the last value. Raises
-    ``django.utils.datastructures.MultiValueDictKeyError`` if the key does not
-    exist. (This is a subclass of Python's standard :exc:`KeyError`, so you can
-    stick to catching ``KeyError``.)
+    Returns the last data value for the given key. If the key has more than one
+    value, it returns the last value. If the value is an empty list, ``[]`` is
+    returned. Raises ``django.utils.datastructures.MultiValueDictKeyError`` if
+    the key does not exist. (This is a subclass of Python's standard
+    :exc:`KeyError`, so you can stick to catching ``KeyError``.)
 
 .. method:: QueryDict.__setitem__(key, value)
 
","Updated doc string to include the return of of [] when a key references an empty list.

ticket-35915 Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35915

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19457,"diff --git a/docs/intro/tutorial04.txt b/docs/intro/tutorial04.txt
index 149b01f338e4..35c2f03a0b23 100644
--- a/docs/intro/tutorial04.txt
+++ b/docs/intro/tutorial04.txt
@@ -21,26 +21,32 @@ tutorial, so that the template contains an HTML ``<form>`` element:
     :caption: ``polls/templates/polls/detail.html``
 
     <form action=""{% url 'polls:vote' question.id %}"" method=""post"">
-    {% csrf_token %}
-    <fieldset>
-        <legend><h1>{{ question.question_text }}</h1></legend>
-        {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}
-        {% for choice in question.choice_set.all %}
-            <input type=""radio"" name=""choice"" id=""choice{{ forloop.counter }}"" value=""{{ choice.id }}"">
-            <label for=""choice{{ forloop.counter }}"">{{ choice.choice_text }}</label><br>
-        {% endfor %}
-    </fieldset>
-    <input type=""submit"" value=""Vote"">
+        {% csrf_token %}
+        <fieldset>
+            <legend><h1>{{ question.question_text }}</h1></legend>
+            {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}
+            {% if question.choice_set.all %}
+                {% for choice in question.choice_set.all %}
+                    <input type=""radio"" name=""choice"" id=""choice{{ forloop.counter }}"" value=""{{ choice.id }}"">
+                    <label for=""choice{{ forloop.counter }}"">{{ choice.choice_text }}</label><br>
+                {% endfor %}
+            {% else %}
+                <p>No choices available for this question.</p>
+            {% endif %}
+        </fieldset>
+        <input type=""submit"" value=""Vote"">
     </form>
 
 A quick rundown:
 
 * The above template displays a radio button for each question choice. The
-  ``value`` of each radio button is the associated question choice's ID. The
-  ``name`` of each radio button is ``""choice""``. That means, when somebody
-  selects one of the radio buttons and submits the form, it'll send the
-  POST data ``choice=#`` where # is the ID of the selected choice. This is the
-  basic concept of HTML forms.
+    ``value`` of each radio button is the associated question choice's ID. The
+    ``name`` of each radio button is ``""choice""``. That means, when somebody
+    selects one of the radio buttons and submits the form, it'll send the
+    POST data ``choice=#`` where # is the ID of the selected choice. This is the
+    basic concept of HTML forms.
+
+* If there are no choices available for the question, the template displays a message: ""No choices available for this question.""
 
 * We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and we
   set ``method=""post""``. Using ``method=""post""`` (as opposed to
@@ -59,6 +65,25 @@ A quick rundown:
   targeted at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>`
   template tag.
 
+If you want to add choices to a question using the Python interactive shell,
+ you can do so as follows:
+
+.. code-block:: pycon
+
+    # No choice are in the system yet.
+    >>> from polls.models import Question, Choice
+    >>> q = Question.objects.get(pk=1)
+    >>> q.choice_set.all()
+    <QuerySet []>
+    >>> q.choice_set.create(choice_text=""Not much"", votes=0)
+    <Choice: Not much>
+    >>> q.choice_set.create(choice_text=""The sky"", votes=0)
+    <Choice: The sky>
+    >>> q.choice_set.create(choice_text=""Just hacking again"", votes=0)
+    <Choice: Just hacking again>
+    >>> q.choice_set.all()
+    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
+
 Now, let's create a Django view that handles the submitted data and does
 something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we
 created a URLconf for the polls application that includes this line:
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-[#36381](https://code.djangoproject.com/ticket/36381)

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [✅ ] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [✅ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ✅] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,15814,"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 33cc636b2264..cf7566d7711c 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -748,6 +748,7 @@ def deferred_to_data(self, target):
                     cur_model = source.related_model
                 else:
                     cur_model = source.remote_field.model
+                cur_model = cur_model._meta.concrete_model
                 opts = cur_model._meta
                 # Even if we're ""just passing through"" this model, we must add
                 # both the current model's pk and the related reference field
diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py
index f2f465678b51..7caa43d4893a 100644
--- a/tests/proxy_models/tests.py
+++ b/tests/proxy_models/tests.py
@@ -395,6 +395,12 @@ def test_proxy_load_from_fixture(self):
         p = MyPerson.objects.get(pk=100)
         self.assertEqual(p.name, ""Elvis Presley"")
 
+    def test_select_related_only(self):
+        user = ProxyTrackerUser.objects.create(name=""Joe Doe"", status=""test"")
+        issue = Issue.objects.create(summary=""New issue"", assignee=user)
+        qs = Issue.objects.select_related(""assignee"").only(""assignee__status"")
+        self.assertEqual(qs.get(), issue)
+
     def test_eq(self):
         self.assertEqual(MyPerson(id=100), Person(id=100))
 
",QuerySet.only() after select_related() crash on proxy models.
django/django,18680,"diff --git a/django/contrib/auth/decorators.py b/django/contrib/auth/decorators.py
index 77fbc798551b..4d62aec93a03 100644
--- a/django/contrib/auth/decorators.py
+++ b/django/contrib/auth/decorators.py
@@ -1,8 +1,7 @@
-import asyncio
 from functools import wraps
 from urllib.parse import urlsplit
 
-from asgiref.sync import async_to_sync, sync_to_async
+from asgiref.sync import async_to_sync, iscoroutinefunction, sync_to_async
 
 from django.conf import settings
 from django.contrib.auth import REDIRECT_FIELD_NAME
@@ -35,11 +34,11 @@ def _redirect_to_login(request):
 
             return redirect_to_login(path, resolved_login_url, redirect_field_name)
 
-        if asyncio.iscoroutinefunction(view_func):
+        if iscoroutinefunction(view_func):
 
             async def _view_wrapper(request, *args, **kwargs):
                 auser = await request.auser()
-                if asyncio.iscoroutinefunction(test_func):
+                if iscoroutinefunction(test_func):
                     test_pass = await test_func(auser)
                 else:
                     test_pass = await sync_to_async(test_func)(auser)
@@ -51,7 +50,7 @@ async def _view_wrapper(request, *args, **kwargs):
         else:
 
             def _view_wrapper(request, *args, **kwargs):
-                if asyncio.iscoroutinefunction(test_func):
+                if iscoroutinefunction(test_func):
                     test_pass = async_to_sync(test_func)(request.user)
                 else:
                     test_pass = test_func(request.user)
@@ -107,7 +106,7 @@ def permission_required(perm, login_url=None, raise_exception=False):
         perms = perm
 
     def decorator(view_func):
-        if asyncio.iscoroutinefunction(view_func):
+        if iscoroutinefunction(view_func):
 
             async def check_perms(user):
                 # First check if the user has the permission (even anon users).
diff --git a/tests/auth_tests/test_decorators.py b/tests/auth_tests/test_decorators.py
index fa2672beb49d..2c3f93d2abf8 100644
--- a/tests/auth_tests/test_decorators.py
+++ b/tests/auth_tests/test_decorators.py
@@ -1,4 +1,4 @@
-from asyncio import iscoroutinefunction
+from asgiref.sync import iscoroutinefunction
 
 from django.conf import settings
 from django.contrib.auth import models
","Fixes `DeprecationWarning`:

`'asyncio.iscoroutinefunction' is deprecated and slated for removal in Python 3.16; use inspect.iscoroutinefunction() instead.`

ticket-35844"
django/django,18706,"diff --git a/docs/glossary.txt b/docs/glossary.txt
index f24a33e81d55..2534187cf34a 100644
--- a/docs/glossary.txt
+++ b/docs/glossary.txt
@@ -18,7 +18,7 @@ Glossary
         A higher-order :term:`view` function that provides an abstract/generic
         implementation of a common idiom or pattern found in view development.
 
-        See :doc:`/topics/class-based-views/index`.
+        See :ref:`class-based-views-explanation`.
 
     model
         Models store your application's data.
diff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt
index 85ad0d400fd2..d5ace4ee3ed4 100644
--- a/docs/internals/deprecation.txt
+++ b/docs/internals/deprecation.txt
@@ -1230,8 +1230,7 @@ details on these changes.
   instead use ``django.contrib.formtools.utils.form_hmac``
 
 * The function-based generic view modules will be removed in favor of their
-  class-based equivalents, outlined :doc:`here
-  </topics/class-based-views/index>`.
+  class-based equivalents, outlined in :ref:`class-based-views-explanation`.
 
 * The ``django.core.servers.basehttp.AdminMediaHandler`` will be
   removed.  In its place use
diff --git a/docs/intro/tutorial04.txt b/docs/intro/tutorial04.txt
index 149b01f338e4..26791beb5f0c 100644
--- a/docs/intro/tutorial04.txt
+++ b/docs/intro/tutorial04.txt
@@ -340,8 +340,7 @@ use the variable you want.
 
 Run the server, and use your new polling app based on generic views.
 
-For full details on generic views, see the :doc:`generic views documentation
-</topics/class-based-views/index>`.
+For full details on generic views, see the generic views documentation under :ref:`class-based-views-explanation`.
 
 When you're comfortable with forms and generic views, read :doc:`part 5 of this
 tutorial</intro/tutorial05>` to learn about testing our polls app.
diff --git a/docs/ref/class-based-views/index.txt b/docs/ref/class-based-views/index.txt
index 0c2f20aee5b3..b8d7c1479fc4 100644
--- a/docs/ref/class-based-views/index.txt
+++ b/docs/ref/class-based-views/index.txt
@@ -3,7 +3,7 @@ Built-in class-based views API
 ==============================
 
 Class-based views API reference. For introductory material, see the
-:doc:`/topics/class-based-views/index` topic guide.
+:ref:`class-based-views-explanation` topic guide.
 
 .. toctree::
    :maxdepth: 3
diff --git a/docs/releases/1.3.txt b/docs/releases/1.3.txt
index 46bd886c67ba..7b54d615bd8f 100644
--- a/docs/releases/1.3.txt
+++ b/docs/releases/1.3.txt
@@ -69,9 +69,7 @@ provided, along with a completely generic view base class that can be
 used as the basis for reusable applications that can be easily
 extended.
 
-See :doc:`the documentation on class-based generic views</topics/class-based-views/index>`
-for more details. There is also a document to help you `convert
-your function-based generic views to class-based
+See the documentation on :ref:`class-based-views-explanation` for more details. There is also a document to help you `convert your function-based generic views to class-based
 views <https://raw.githubusercontent.com/django/django/ea9dc9f4b03ae034c1dc080730422dda7a9c2e47/docs/topics/generic-views-migration.txt>`_.
 
 Logging
diff --git a/docs/releases/1.5.txt b/docs/releases/1.5.txt
index 76d41a9ab8a8..fd5e2af848be 100644
--- a/docs/releases/1.5.txt
+++ b/docs/releases/1.5.txt
@@ -210,7 +210,7 @@ associated with proxy models.
 New ``view`` variable in class-based views context
 --------------------------------------------------
 
-In all :doc:`generic class-based views </topics/class-based-views/index>`
+In all generic :ref:`class-based-views-explanation`
 (or any class-based view inheriting from ``ContextMixin``), the context dictionary
 contains a ``view`` variable that points to the ``View`` instance.
 
diff --git a/docs/topics/auth/default.txt b/docs/topics/auth/default.txt
index a22cebbf15a6..6202283b0465 100644
--- a/docs/topics/auth/default.txt
+++ b/docs/topics/auth/default.txt
@@ -610,7 +610,7 @@ The ``login_required`` decorator
 The ``LoginRequiredMixin`` mixin
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-When using :doc:`class-based views </topics/class-based-views/index>`, you can
+When using :ref:`class-based-views-explanation`, you can
 achieve the same behavior as with ``login_required`` by using the
 ``LoginRequiredMixin``. This mixin should be at the leftmost position in the
 inheritance list.
@@ -728,7 +728,7 @@ email in the desired domain and if not, redirects to the login page::
 
 .. class:: UserPassesTestMixin
 
-    When using :doc:`class-based views </topics/class-based-views/index>`, you
+    When using :ref:`class-based-views-explanation`, you
     can use the ``UserPassesTestMixin`` to do this.
 
     .. method:: test_func()
@@ -1057,8 +1057,7 @@ arguments in the URLconf, these will be passed on to the view. For example::
         ),
     ]
 
-All views are :doc:`class-based </topics/class-based-views/index>`, which allows
-you to easily customize them by subclassing.
+All views are :ref:`class-based-views-explanation`, which allows you to easily customize them by subclassing.
 
 .. _all-authentication-views:
 
diff --git a/docs/topics/class-based-views/index.txt b/docs/topics/class-based-views/index.txt
index ec126099f626..fb934fae10a1 100644
--- a/docs/topics/class-based-views/index.txt
+++ b/docs/topics/class-based-views/index.txt
@@ -1,3 +1,5 @@
+.. _class-based-views-explanation:
+
 =================
 Class-based views
 =================
diff --git a/docs/topics/http/urls.txt b/docs/topics/http/urls.txt
index 8e57732725a8..a24942ec6504 100644
--- a/docs/topics/http/urls.txt
+++ b/docs/topics/http/urls.txt
@@ -49,8 +49,7 @@ algorithm the system follows to determine which Python code to execute:
    :attr:`~django.http.HttpRequest.path_info`.
 
 #. Once one of the URL patterns matches, Django imports and calls the given
-   view, which is a Python function (or a :doc:`class-based view
-   </topics/class-based-views/index>`). The view gets passed the following
+   view, which is a Python function (or a :ref:`class-based-views-explanation`). The view gets passed the following
    arguments:
 
    * An instance of :class:`~django.http.HttpRequest`.
","#### Trac ticket number
N/A

#### Branch description
Improved docs text link (under deprecation) from a generic ""here"" to the name of the linked page, ""class-based views.""

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18367,"diff --git a/tests/admin_inlines/admin.py b/tests/admin_inlines/admin.py
index 578142d192fe..3b018aa5d750 100644
--- a/tests/admin_inlines/admin.py
+++ b/tests/admin_inlines/admin.py
@@ -145,7 +145,6 @@ class PhotographerAdmin(admin.ModelAdmin):
         ),
     ]
     inlines = [
-        PhotoTabularInline,
         PhotoTabularInline,
         PhotoStackedExtra2Inline,
         PhotoStackedExtra3Inline,
","Introduced in 01ed59f753139afb514170ee7f7384c155ecbc2d

Pulled out from https://github.com/django/django/pull/18301
"
django/django,17890,"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ad8f8e665026..a89acaf5a9c9 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -167,13 +167,16 @@ def __invert__(self):
         return NegatedExpression(self)
 
 
+class OutputFieldIsNoneError(FieldError):
+    pass
+
+
 class BaseExpression:
     """"""Base class for all query expressions.""""""
 
     empty_result_set_value = NotImplemented
     # aggregate specific fields
     is_summary = False
-    _output_field_resolved_to_none = False
     # Can the expression be used in a WHERE clause?
     filterable = True
     # Can the expression be used as a source expression in Window?
@@ -323,11 +326,12 @@ def output_field(self):
         """"""Return the output type of this expressions.""""""
         output_field = self._resolve_output_field()
         if output_field is None:
-            self._output_field_resolved_to_none = True
-            raise FieldError(""Cannot resolve expression type, unknown output_field"")
+            raise OutputFieldIsNoneError(
+                ""Cannot resolve expression type, unknown output_field""
+            )
         return output_field
 
-    @cached_property
+    @property
     def _output_field_or_none(self):
         """"""
         Return the output field of this expression, or None if
@@ -335,9 +339,8 @@ def _output_field_or_none(self):
         """"""
         try:
             return self.output_field
-        except FieldError:
-            if not self._output_field_resolved_to_none:
-                raise
+        except OutputFieldIsNoneError:
+            return
 
     def _resolve_output_field(self):
         """"""
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index af4cf01fcaad..d36107b35861 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -51,6 +51,7 @@
     Combinable,
     CombinedExpression,
     NegatedExpression,
+    OutputFieldIsNoneError,
     RawSQL,
     Ref,
 )
@@ -2329,6 +2330,16 @@ def test_output_field_decimalfield(self):
         time = Time.objects.annotate(one=Value(1, output_field=DecimalField())).first()
         self.assertEqual(time.one, 1)
 
+    def test_output_field_is_none_error(self):
+        with self.assertRaises(OutputFieldIsNoneError):
+            Employee.objects.annotate(custom_expression=Value(None)).first()
+
+    def test_output_field_or_none_property_not_cached(self):
+        expression = Value(None, output_field=None)
+        self.assertIsNone(expression._output_field_or_none)
+        expression.output_field = BooleanField()
+        self.assertIsInstance(expression._output_field_or_none, BooleanField)
+
     def test_resolve_output_field(self):
         value_types = [
             (""str"", CharField),
diff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py
index 885512cfcac5..ddd3b6bbd047 100644
--- a/tests/postgres_tests/test_aggregates.py
+++ b/tests/postgres_tests/test_aggregates.py
@@ -334,6 +334,22 @@ def test_array_agg_filter_slice(self):
         )
         self.assertCountEqual(qs, [[], [5]])
 
+    def test_array_agg_with_empty_filter_and_default_values(self):
+        for filter_value in ([-1], []):
+            for default_value in ([], Value([])):
+                with self.subTest(filter=filter_value, default=default_value):
+                    queryset = AggregateTestModel.objects.annotate(
+                        test_array_agg=ArrayAgg(
+                            ""stattestmodel__int1"",
+                            filter=Q(pk__in=filter_value),
+                            default=default_value,
+                        )
+                    )
+                    self.assertSequenceEqual(
+                        queryset.values_list(""test_array_agg"", flat=True),
+                        [[], [], [], []],
+                    )
+
     def test_bit_and_general(self):
         values = AggregateTestModel.objects.filter(integer_field__in=[0, 1]).aggregate(
             bitand=BitAnd(""integer_field"")
","https://code.djangoproject.com/ticket/35235

New to Django core here and wanting to try for next djangonaut run, thought I could try to triage by writing some quickie tests to see if I could replicate the issue... and I can't. My 2 additional tests (and all of them, actually) pass locally. 

Let me know if this is not a good approach."
django/django,18789,"diff --git a/django/views/debug.py b/django/views/debug.py
index 10b4d2203018..1c7edc22a32d 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -6,6 +6,7 @@
 import types
 import warnings
 from pathlib import Path
+from urllib.parse import urlparse, urlunparse
 
 from django.conf import settings
 from django.http import Http404, HttpResponse, HttpResponseNotFound
@@ -115,6 +116,7 @@ class SafeExceptionReporterFilter:
     hidden_settings = _lazy_re_compile(
         ""API|AUTH|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE"", flags=re.I
     )
+    hidden_url_settings = _lazy_re_compile(""URL$"", flags=re.I)
 
     def cleanse_setting(self, key, value):
         """"""
@@ -122,15 +124,21 @@ def cleanse_setting(self, key, value):
         value is a dictionary, recursively cleanse the keys in that dictionary.
         """"""
         if key == settings.SESSION_COOKIE_NAME:
+            is_url = False
             is_sensitive = True
         else:
             try:
-                is_sensitive = self.hidden_settings.search(key)
+                is_url = self.hidden_url_settings.search(key)
+                is_sensitive = is_url or self.hidden_settings.search(key)
             except TypeError:
+                is_url = False
                 is_sensitive = False
 
         if is_sensitive:
-            cleansed = self.cleansed_substitute
+            if is_url:
+                cleansed = self.cleanse_url(key, value)
+            else:
+                cleansed = self.cleansed_substitute
         elif isinstance(value, dict):
             cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
         elif isinstance(value, list):
@@ -145,6 +153,32 @@ def cleanse_setting(self, key, value):
 
         return cleansed
 
+    def cleanse_url(self, key, value):
+        del key
+
+        try:
+            parsed = urlparse(value)
+        except Exception:
+            return self.cleansed_substitute
+
+        cleansed_netloc = re.sub(
+            ""^([^:]*:[^:]*)@"",
+            f""{self.cleansed_substitute}:{self.cleansed_substitute}@"",
+            parsed.netloc,
+        )
+        cleansed_value = urlunparse(
+            [
+                parsed.scheme,
+                cleansed_netloc,
+                parsed.path,
+                parsed.params,
+                parsed.query,
+                parsed.fragment,
+            ]
+        )
+
+        return cleansed_value
+
     def get_safe_settings(self):
         """"""
         Return a dictionary of the settings module with values of sensitive
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-31604

#### Branch description
`*_URL` settings are the one key hole in protecting credentials. My wish for plugging was rejected 4 years ago but I have [seen it lead to potential arbitrary remote code execution recently](https://github.com/climateconnect/climateconnect/pull/1331#issuecomment-2397881433) and so I'm helping out with a pull request myself now…

For example:
```
In [1]: from django.conf import settings

In [2]: settings.configure()

In [3]: from django.views.debug import SafeExceptionReporterFilter

In [4]: SafeExceptionReporterFilter().cleanse_setting(""CELERY_BROKER_URL"", ""redis://user:secret@host:6379/0"")
Out[4]: 'redis://********************:********************@host:6379/0'
```

I can add tests and extend docs when there is approval for this general direction from you.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18563,"diff --git a/django/contrib/gis/db/backends/mysql/schema.py b/django/contrib/gis/db/backends/mysql/schema.py
index 152cbc3960ab..1cc3186cb05c 100644
--- a/django/contrib/gis/db/backends/mysql/schema.py
+++ b/django/contrib/gis/db/backends/mysql/schema.py
@@ -33,12 +33,7 @@ def _field_indexes_sql(self, model, field):
                         cursor, model._meta.db_table
                     )
                 )
-            qn = self.connection.ops.quote_name
-            sql = self.sql_add_spatial_index % {
-                ""index"": qn(self._create_spatial_index_name(model, field)),
-                ""table"": qn(model._meta.db_table),
-                ""column"": qn(field.column),
-            }
+            sql = self._create_spatial_index_sql(model, field)
             if supports_spatial_index:
                 return [sql]
             else:
@@ -51,8 +46,7 @@ def _field_indexes_sql(self, model, field):
 
     def remove_field(self, model, field):
         if isinstance(field, GeometryField) and field.spatial_index and not field.null:
-            index_name = self._create_spatial_index_name(model, field)
-            sql = self._delete_index_sql(model, index_name)
+            sql = self._delete_spatial_index_sql(model, field)
             try:
                 self.execute(sql)
             except OperationalError:
@@ -66,3 +60,16 @@ def remove_field(self, model, field):
 
     def _create_spatial_index_name(self, model, field):
         return ""%s_%s_id"" % (model._meta.db_table, field.column)
+
+    def _create_spatial_index_sql(self, model, field):
+        index_name = self._create_spatial_index_name(model, field)
+        qn = self.connection.ops.quote_name
+        return self.sql_add_spatial_index % {
+            ""index"": qn(index_name),
+            ""table"": qn(model._meta.db_table),
+            ""column"": qn(field.column),
+        }
+
+    def _delete_spatial_index_sql(self, model, field):
+        index_name = self._create_spatial_index_name(model, field)
+        return self._delete_index_sql(model, index_name)
diff --git a/django/contrib/gis/db/backends/oracle/schema.py b/django/contrib/gis/db/backends/oracle/schema.py
index e17a4b191108..ef9b1aa94253 100644
--- a/django/contrib/gis/db/backends/oracle/schema.py
+++ b/django/contrib/gis/db/backends/oracle/schema.py
@@ -42,16 +42,7 @@ def quote_value(self, value):
 
     def _field_indexes_sql(self, model, field):
         if isinstance(field, GeometryField) and field.spatial_index:
-            return [
-                self.sql_add_spatial_index
-                % {
-                    ""index"": self.quote_name(
-                        self._create_spatial_index_name(model, field)
-                    ),
-                    ""table"": self.quote_name(model._meta.db_table),
-                    ""column"": self.quote_name(field.column),
-                }
-            ]
+            return [self._create_spatial_index_sql(model, field)]
         return super()._field_indexes_sql(model, field)
 
     def column_sql(self, model, field, include_default=False):
@@ -99,8 +90,7 @@ def remove_field(self, model, field):
                 }
             )
             if field.spatial_index:
-                index_name = self._create_spatial_index_name(model, field)
-                self.execute(self._delete_index_sql(model, index_name))
+                self.execute(self._delete_spatial_index_sql(model, field))
         super().remove_field(model, field)
 
     def run_geometry_sql(self):
@@ -114,3 +104,15 @@ def _create_spatial_index_name(self, model, field):
         return truncate_name(
             ""%s_%s_id"" % (strip_quotes(model._meta.db_table), field.column), 30
         )
+
+    def _create_spatial_index_sql(self, model, field):
+        index_name = self._create_spatial_index_name(model, field)
+        return self.sql_add_spatial_index % {
+            ""index"": self.quote_name(index_name),
+            ""table"": self.quote_name(model._meta.db_table),
+            ""column"": self.quote_name(field.column),
+        }
+
+    def _delete_spatial_index_sql(self, model, field):
+        index_name = self._create_spatial_index_name(model, field)
+        return self._delete_index_sql(model, index_name)
diff --git a/django/contrib/gis/db/backends/postgis/schema.py b/django/contrib/gis/db/backends/postgis/schema.py
index 5464c85cf658..5c0cd25364ca 100644
--- a/django/contrib/gis/db/backends/postgis/schema.py
+++ b/django/contrib/gis/db/backends/postgis/schema.py
@@ -26,29 +26,7 @@ def _create_index_sql(self, model, *, fields=None, **kwargs):
         if fields is None or len(fields) != 1 or not hasattr(fields[0], ""geodetic""):
             return super()._create_index_sql(model, fields=fields, **kwargs)
 
-        field = fields[0]
-        expressions = None
-        opclasses = None
-        if field.geom_type == ""RASTER"":
-            # For raster fields, wrap index creation SQL statement with ST_ConvexHull.
-            # Indexes on raster columns are based on the convex hull of the raster.
-            expressions = Func(Col(None, field), template=self.rast_index_template)
-            fields = None
-        elif field.dim > 2 and not field.geography:
-            # Use ""nd"" ops which are fast on multidimensional cases
-            opclasses = [self.geom_index_ops_nd]
-        name = kwargs.get(""name"")
-        if not name:
-            name = self._create_index_name(model._meta.db_table, [field.column], ""_id"")
-
-        return super()._create_index_sql(
-            model,
-            fields=fields,
-            name=name,
-            using="" USING %s"" % self.geom_index_type,
-            opclasses=opclasses,
-            expressions=expressions,
-        )
+        return self._create_spatial_index_sql(model, fields[0], **kwargs)
 
     def _alter_column_type_sql(
         self, table, old_field, new_field, new_type, old_collation, new_collation
@@ -79,3 +57,30 @@ def _alter_column_type_sql(
             ),
             [],
         )
+
+    def _create_spatial_index_name(self, model, field):
+        return self._create_index_name(model._meta.db_table, [field.column], ""_id"")
+
+    def _create_spatial_index_sql(self, model, field, **kwargs):
+        expressions = None
+        opclasses = None
+        fields = [field]
+        if field.geom_type == ""RASTER"":
+            # For raster fields, wrap index creation SQL statement with ST_ConvexHull.
+            # Indexes on raster columns are based on the convex hull of the raster.
+            expressions = Func(Col(None, field), template=self.rast_index_template)
+            fields = None
+        elif field.dim > 2 and not field.geography:
+            # Use ""nd"" ops which are fast on multidimensional cases
+            opclasses = [self.geom_index_ops_nd]
+        if not (name := kwargs.get(""name"")):
+            name = self._create_spatial_index_name(model, field)
+
+        return super()._create_index_sql(
+            model,
+            fields=fields,
+            name=name,
+            using="" USING %s"" % self.geom_index_type,
+            opclasses=opclasses,
+            expressions=expressions,
+        )
","Cherry-pick of commits:
- f0b02242917ca2500ee6b2e8a9fa45f541b2b513
- ddc07d1e870bbf01db154be252b29f1d8b1da376 (with a slight tweak)

from #18492

Approved and will merge when the CI is green

"
django/django,18784,"diff --git a/django/shortcuts.py b/django/shortcuts.py
index b8b5be1f5f54..d882ce50c633 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -188,3 +188,45 @@ def resolve_url(to, *args, **kwargs):
 
     # Finally, fall back and assume it's a URL
     return to
+
+
+def get_object_or_none(klass, *args, **kwargs):
+    """"""
+    Use get() to return an object, or return None if the object does not exist.
+
+    klass may be a Model, Manager, or QuerySet object. All other passed
+    arguments and keyword arguments are used in the get() query.
+
+    Like with QuerySet.get(), MultipleObjectsReturned is raised if more than
+    one object is found.
+    """"""
+    queryset = _get_queryset(klass)
+    if not hasattr(queryset, ""get""):
+        klass__name = (
+            klass.__name__ if isinstance(klass, type) else klass.__class__.__name__
+        )
+        raise ValueError(
+            ""First argument to get_object_or_none() must be a Model, Manager, ""
+            ""or QuerySet, not '%s'."" % klass__name
+        )
+    try:
+        return queryset.get(*args, **kwargs)
+    except queryset.model.DoesNotExist:
+        return None
+
+
+async def aget_object_or_none(klass, *args, **kwargs):
+    """"""See get_object_or_none().""""""
+    queryset = _get_queryset(klass)
+    if not hasattr(queryset, ""aget""):
+        klass__name = (
+            klass.__name__ if isinstance(klass, type) else klass.__class__.__name__
+        )
+        raise ValueError(
+            ""First argument to aget_object_or_none() must be a Model, Manager, or ""
+            f""QuerySet, not '{klass__name}'.""
+        )
+    try:
+        return await queryset.aget(*args, **kwargs)
+    except queryset.model.DoesNotExist:
+        return None
diff --git a/tests/async/test_async_shortcuts.py b/tests/async/test_async_shortcuts.py
index 09c76873fa5a..75923a613bc8 100644
--- a/tests/async/test_async_shortcuts.py
+++ b/tests/async/test_async_shortcuts.py
@@ -1,6 +1,6 @@
 from django.db.models import Q
 from django.http import Http404
-from django.shortcuts import aget_list_or_404, aget_object_or_404
+from django.shortcuts import aget_list_or_404, aget_object_or_404, aget_object_or_none
 from django.test import TestCase
 
 from .models import RelatedModel, SimpleModel
@@ -56,3 +56,24 @@ async def test_get_list_or_404_bad_class(self):
         )
         with self.assertRaisesMessage(ValueError, msg):
             await aget_list_or_404([SimpleModel], field=1)
+
+    async def test_aget_object_or_none(self):
+        # Test successful retrieval
+        self.assertEqual(await aget_object_or_none(SimpleModel, field=1), self.s2)
+        self.assertEqual(await aget_object_or_none(SimpleModel, Q(field=0)), self.s1)
+        self.assertEqual(
+            await aget_object_or_none(SimpleModel.objects.all(), field=1), self.s2
+        )
+        self.assertEqual(
+            await aget_object_or_none(self.s1.relatedmodel_set, pk=self.r1.pk), self.r1
+        )
+        # Test non-existent object returns None
+        self.assertIsNone(await aget_object_or_none(SimpleModel, field=2))
+
+    async def test_aget_object_or_none_bad_class(self):
+        msg = (
+            ""First argument to aget_object_or_none() must be a Model, Manager, or ""
+            ""QuerySet, not 'str'.""
+        )
+        with self.assertRaisesMessage(ValueError, msg):
+            await aget_object_or_none(""SimpleModel"", field=0)
diff --git a/tests/get_object_or_none/__init__.py b/tests/get_object_or_none/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/get_object_or_none/models.py b/tests/get_object_or_none/models.py
new file mode 100644
index 000000000000..d032bcf093b7
--- /dev/null
+++ b/tests/get_object_or_none/models.py
@@ -0,0 +1,31 @@
+""""""
+DB-API Shortcuts
+
+``get_object_or_none()`` is a shortcut function to be used in view functions for
+performing a ``get()`` lookup and returning ``None`` if a ``DoesNotExist``
+exception was raised during the ``get()`` call.
+""""""
+
+from django.db import models
+
+
+class Author(models.Model):
+    name = models.CharField(max_length=50)
+
+
+class ArticleManager(models.Manager):
+    def get_queryset(self):
+        return super().get_queryset().filter(authors__name__icontains=""sir"")
+
+
+class AttributeErrorManager(models.Manager):
+    def get_queryset(self):
+        raise AttributeError(""AttributeErrorManager"")
+
+
+class Article(models.Model):
+    authors = models.ManyToManyField(Author)
+    title = models.CharField(max_length=50)
+    objects = models.Manager()
+    by_a_sir = ArticleManager()
+    attribute_error_objects = AttributeErrorManager()
diff --git a/tests/get_object_or_none/tests.py b/tests/get_object_or_none/tests.py
new file mode 100644
index 000000000000..39aaaa7815cd
--- /dev/null
+++ b/tests/get_object_or_none/tests.py
@@ -0,0 +1,66 @@
+from django.db.models import Q
+from django.shortcuts import get_object_or_none
+from django.test import TestCase
+
+from .models import Article, Author
+
+
+class GetObjectOrNoneTests(TestCase):
+    def test_get_object_or_none(self):
+        a1 = Author.objects.create(name=""Brave Sir Robin"")
+        article = Article.objects.create(title=""Run away!"")
+        article.authors.set([a1])
+
+        # Test successful retrieval with different query methods
+        self.assertEqual(get_object_or_none(Article, title=""Run away!""), article)
+        self.assertEqual(
+            get_object_or_none(Article, Q(title__startswith=""Run"")), article
+        )
+        self.assertEqual(
+            get_object_or_none(Article.objects.all(), title=""Run away!""), article
+        )
+        self.assertEqual(
+            get_object_or_none(a1.article_set, title=""Run away!""), article
+        )
+
+        # Test non-existent object returns None
+        self.assertIsNone(get_object_or_none(Article, title=""Does not exist""))
+        self.assertIsNone(get_object_or_none(a1.article_set, title=""Missing""))
+
+        # Custom managers can be used too
+        self.assertEqual(
+            get_object_or_none(Article.by_a_sir, title=""Run away!""), article
+        )
+
+        # Multiple objects should still raise MultipleObjectsReturned
+        Author.objects.create(name=""Patsy"")
+        with self.assertRaises(Author.MultipleObjectsReturned):
+            get_object_or_none(Author.objects.all())
+
+        # Using an empty QuerySet returns None
+        self.assertIsNone(
+            get_object_or_none(Article.objects.none(), title=""Run away!"")
+        )
+
+    def test_get_object_or_none_bad_class(self):
+        msg = (
+            ""First argument to get_object_or_none() must be a Model, Manager, or ""
+            ""QuerySet, not 'str'.""
+        )
+        with self.assertRaisesMessage(ValueError, msg):
+            get_object_or_none(""Article"", title=""Run away!"")
+
+        class CustomClass:
+            pass
+
+        msg = (
+            ""First argument to get_object_or_none() must be a Model, Manager, or ""
+            ""QuerySet, not 'CustomClass'.""
+        )
+        with self.assertRaisesMessage(ValueError, msg):
+            get_object_or_none(CustomClass, title=""Run away!"")
+
+    def test_get_object_or_none_queryset_attribute_error(self):
+        """"""AttributeError raised by QuerySet.get() isn't hidden.""""""
+        with self.assertRaisesMessage(AttributeError, ""AttributeErrorManager""):
+            get_object_or_none(Article.attribute_error_objects, id=42)
","#### Branch description
Adds a new `get_object_or_none` shortcut function that provides a cleaner alternative to try/except blocks when querying for objects that may not exist.

Similar to `get_object_or_404`, this function attempts to retrieve an object from the database, but instead of raising a 404 error when the object isn't found, it gracefully returns `None`. This makes it particularly useful for:

- Optional relationship lookups
- Checking for existence without exception handling
- Cases where a missing object is an acceptable scenario rather than an error condition

Example usage:
```python
# Instead of:
try:
    user = User.objects.get(id=user_id)
except User.DoesNotExist:
    user = None

# You can now write:
user = get_object_or_none(User, id=user_id)
```

#### Checklist
- [X] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [X] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [X] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19090,"diff --git a/README.rst b/README.rst
index e0baa8a1f722..bad4fae61b3d 100644
--- a/README.rst
+++ b/README.rst
@@ -35,7 +35,7 @@ To get more help:
 * Join the django-users mailing list, or read the archives, at
   https://groups.google.com/group/django-users.
 
-* Join the `Django Discord community <https://discord.gg/xcRH6mN4fa>`_.
+* Join the `Django Discord community <https://chat.djangoproject.com>`_.
 
 * Join the community on the `Django Forum <https://forum.djangoproject.com/>`_.
 
diff --git a/docs/faq/contributing.txt b/docs/faq/contributing.txt
index d281ce8b7574..c4c66f877b53 100644
--- a/docs/faq/contributing.txt
+++ b/docs/faq/contributing.txt
@@ -68,7 +68,7 @@ issue over and over again. This sort of behavior will not gain you any
 additional attention -- certainly not the attention that you need in order to
 get your issue addressed.
 
-.. _`Django Discord server`: https://discord.gg/xcRH6mN4fa
+.. _`Django Discord server`: https://chat.djangoproject.com
 
 But I've reminded you several times and you keep ignoring my contribution!
 ==========================================================================
diff --git a/docs/faq/help.txt b/docs/faq/help.txt
index 7c8b39fc46b6..fa42f0d16195 100644
--- a/docs/faq/help.txt
+++ b/docs/faq/help.txt
@@ -25,7 +25,7 @@ Then, please post it in one of the following channels:
 * The `Django Discord server`_ for chat-based discussions.
 
 .. _`""Using Django""`: https://forum.djangoproject.com/c/users/6
-.. _`Django Discord server`: https://discord.gg/xcRH6mN4fa
+.. _`Django Discord server`: https://chat.djangoproject.com
 
 In all these channels please abide by the `Django Code of Conduct`_. In
 summary, being friendly and patient, considerate, respectful, and careful in
diff --git a/docs/internals/contributing/bugs-and-features.txt b/docs/internals/contributing/bugs-and-features.txt
index d95ab96efd71..a305eb9c389b 100644
--- a/docs/internals/contributing/bugs-and-features.txt
+++ b/docs/internals/contributing/bugs-and-features.txt
@@ -167,4 +167,4 @@ Votes on technical matters should be announced and held in public on the
 .. _searching: https://code.djangoproject.com/search
 .. _custom queries: https://code.djangoproject.com/query
 .. _Django Forum: https://forum.djangoproject.com/
-.. _Django Discord server: https://discord.gg/xcRH6mN4fa
+.. _Django Discord server: https://chat.djangoproject.com
diff --git a/docs/internals/contributing/index.txt b/docs/internals/contributing/index.txt
index 6ac5e884bdf5..41596e88c99e 100644
--- a/docs/internals/contributing/index.txt
+++ b/docs/internals/contributing/index.txt
@@ -46,7 +46,7 @@ a great ecosystem to work in:
 
 .. _posting guidelines: https://code.djangoproject.com/wiki/UsingTheMailingList
 .. _community page: https://www.djangoproject.com/community/
-.. _Django Discord server: https://discord.gg/xcRH6mN4fa
+.. _Django Discord server: https://chat.djangoproject.com
 .. _Django forum: https://forum.djangoproject.com/
 .. _register it here: https://www.djangoproject.com/community/add/blogs/
 
diff --git a/docs/internals/contributing/new-contributors.txt b/docs/internals/contributing/new-contributors.txt
index 201fe4afc2aa..3ec74b6bd447 100644
--- a/docs/internals/contributing/new-contributors.txt
+++ b/docs/internals/contributing/new-contributors.txt
@@ -132,7 +132,7 @@ but not completely certain, you might also try asking on the
 ``#contributing-getting-started`` channel in the `Django Discord server`_ to
 see if someone else can confirm your suspicions.
 
-.. _`Django Discord server`: https://discord.gg/xcRH6mN4fa
+.. _`Django Discord server`: https://chat.djangoproject.com
 
 Wait for feedback, and respond to feedback that you receive
 -----------------------------------------------------------
diff --git a/docs/intro/contributing.txt b/docs/intro/contributing.txt
index 32c8645f20ad..e990089b04a0 100644
--- a/docs/intro/contributing.txt
+++ b/docs/intro/contributing.txt
@@ -47,7 +47,7 @@ so that it can be of use to the widest audience.
 
 .. _Dive Into Python: https://diveintopython3.net/
 .. _Django Forum: https://forum.djangoproject.com/
-.. _Django Discord server: https://discord.gg/xcRH6mN4fa
+.. _Django Discord server: https://chat.djangoproject.com
 
 What does this tutorial cover?
 ------------------------------
diff --git a/docs/intro/tutorial08.txt b/docs/intro/tutorial08.txt
index 261cd85d8587..6ef3b0b6e1f0 100644
--- a/docs/intro/tutorial08.txt
+++ b/docs/intro/tutorial08.txt
@@ -70,7 +70,7 @@ resolve the issue yourself, there are options available to you.
 #. Search for similar issues on the package's issue tracker. Django Debug
    Toolbar’s is `on GitHub <https://github.com/django-commons/django-debug-toolbar/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc>`_.
 #. Consult the `Django Forum <https://forum.djangoproject.com/>`_.
-#. Join the `Django Discord server <https://discord.gg/xcRH6mN4fa>`_.
+#. Join the `Django Discord server <https://chat.djangoproject.com>`_.
 
 Installing other third-party packages
 =====================================
diff --git a/docs/intro/whatsnext.txt b/docs/intro/whatsnext.txt
index e02d90f800a8..1515090a27f9 100644
--- a/docs/intro/whatsnext.txt
+++ b/docs/intro/whatsnext.txt
@@ -127,7 +127,7 @@ particular Django setup, try the |django-users| mailing list or the
 `Django Discord server`_ instead.
 
 .. _ticket system: https://code.djangoproject.com/
-.. _Django Discord server: https://discord.gg/xcRH6mN4fa
+.. _Django Discord server: https://chat.djangoproject.com
 
 In plain text
 -------------
","#### Trac ticket number

ticket-36125

#### Branch description
I used `git grep -F discord.gg` to find all instances of the URL and replaced them with the new https://chat.djangoproject.com redirection.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18785,"diff --git a/django/template/base.py b/django/template/base.py
index b974495c9c92..eaca428b10c4 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -57,7 +57,7 @@
 
 from django.template.context import BaseContext
 from django.utils.formats import localize
-from django.utils.html import conditional_escape, escape
+from django.utils.html import conditional_escape
 from django.utils.regex_helper import _lazy_re_compile
 from django.utils.safestring import SafeData, SafeString, mark_safe
 from django.utils.text import get_text_list, smart_split, unescape_string_literal
@@ -247,10 +247,10 @@ def get_exception_info(self, exception, token):
         for num, next in enumerate(linebreak_iter(self.source)):
             if start >= upto and end <= next:
                 line = num
-                before = escape(self.source[upto:start])
-                during = escape(self.source[start:end])
-                after = escape(self.source[end:next])
-            source_lines.append((num, escape(self.source[upto:next])))
+                before = self.source[upto:start]
+                during = self.source[start:end]
+                after = self.source[end:next]
+            source_lines.append((num, self.source[upto:next]))
             upto = next
         total = len(source_lines)
 
diff --git a/tests/template_tests/templates/test_extends_block_error.html b/tests/template_tests/templates/test_extends_block_error.html
index c4733747a237..8133c93ccd31 100644
--- a/tests/template_tests/templates/test_extends_block_error.html
+++ b/tests/template_tests/templates/test_extends_block_error.html
@@ -1,2 +1,2 @@
 {% extends ""test_extends_block_error_parent.html"" %}
-{% block content %}{% include ""missing.html"" %}{% endblock %}
+{% block content %}{% include ""index.html"" %}{% include ""missing.html"" %}{% include ""index.html"" %}{% endblock %}
diff --git a/tests/template_tests/tests.py b/tests/template_tests/tests.py
index 14df81669b12..7364c7ca6462 100644
--- a/tests/template_tests/tests.py
+++ b/tests/template_tests/tests.py
@@ -5,7 +5,6 @@
 from django.test import SimpleTestCase, override_settings
 from django.urls import NoReverseMatch
 from django.utils import translation
-from django.utils.html import escape
 
 
 class TemplateTestMixin:
@@ -157,10 +156,32 @@ def test_render_tag_error_in_extended_block(self):
         with self.assertRaises(TemplateDoesNotExist) as cm:
             template.render(context)
         if self.debug_engine:
+            self.assertEqual(
+                cm.exception.template_debug[""before""],
+                '{% block content %}{% include ""index.html"" %}',
+            )
             self.assertEqual(
                 cm.exception.template_debug[""during""],
-                escape('{% include ""missing.html"" %}'),
+                '{% include ""missing.html"" %}',
+            )
+            self.assertEqual(
+                cm.exception.template_debug[""after""],
+                '{% include ""index.html"" %}{% endblock %}\n',
+            )
+            self.assertEqual(
+                cm.exception.template_debug[""source_lines""][0],
+                (1, '{% extends ""test_extends_block_error_parent.html"" %}\n'),
+            )
+            self.assertEqual(
+                cm.exception.template_debug[""source_lines""][1],
+                (
+                    2,
+                    '{% block content %}{% include ""index.html"" %}'
+                    '{% include ""missing.html"" %}'
+                    '{% include ""index.html"" %}{% endblock %}\n',
+                ),
             )
+            self.assertEqual(cm.exception.template_debug[""source_lines""][2], (3, """"))
 
     def test_super_errors(self):
         """"""
","ticket-35897

#### Branch description

""Philosophically"" / architecturally these calls shouldn't be here: escaping happens at the edges. The practical implication is the risk of double-escaping; this risk materializes at least for the Sentry-SDK (I ran into this while developing [Bugsink](https://www.bugsink.com), but I've double-checked other Sentry-SDK-compatible servers, and they all suffer from it).

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests. IMHO, ""if the tests don't fail"" this doesn't require a new test; but others may think differently.
- [ ] I have added or updated relevant docs, including release notes if applicable. N/A
- [ ] I have attached screenshots in both light and dark modes for any UI changes.  N/A
"
django/django,19127,"diff --git a/docs/ref/contrib/postgres/aggregates.txt b/docs/ref/contrib/postgres/aggregates.txt
index edaf032ffa74..da5e1c2ad3bf 100644
--- a/docs/ref/contrib/postgres/aggregates.txt
+++ b/docs/ref/contrib/postgres/aggregates.txt
@@ -51,8 +51,8 @@ General-purpose aggregation functions
 
             from django.db.models import F
 
-            ArrayAgg(""a_field"", order_by=""-some_field"")
-            ArrayAgg(""a_field"", order_by=F(""some_field"").desc())
+            ArrayAgg(""a_field"", ordering=""-some_field"")
+            ArrayAgg(""a_field"", ordering=F(""some_field"").desc())
 
     .. versionchanged:: 5.0
 
","When backporting, replacement `s/order_by/ordering/` should have been applied since `order_by` was added in 5.2 :see_no_evil: "
django/django,18341,"diff --git a/docs/internals/contributing/bugs-and-features.txt b/docs/internals/contributing/bugs-and-features.txt
index b6b3265ba6bf..6562ebbd6481 100644
--- a/docs/internals/contributing/bugs-and-features.txt
+++ b/docs/internals/contributing/bugs-and-features.txt
@@ -110,11 +110,6 @@ part of that. Here are some tips on how to make a request most effectively:
 If there's a consensus agreement on the feature, then it's appropriate to
 create a ticket. Include a link to the discussion in the ticket description.
 
-As with most open-source projects, code talks. If you are willing to write the
-code for the feature yourself or, even better, if you've already written it,
-it's much more likely to be accepted. Fork Django on GitHub, create a feature
-branch, and show us your work!
-
 See also: :ref:`documenting-new-features`.
 
 .. _how-we-make-decisions:
diff --git a/docs/internals/contributing/writing-code/submitting-patches.txt b/docs/internals/contributing/writing-code/submitting-patches.txt
index 11a96eb91136..c924ad267c9e 100644
--- a/docs/internals/contributing/writing-code/submitting-patches.txt
+++ b/docs/internals/contributing/writing-code/submitting-patches.txt
@@ -6,6 +6,8 @@ We're always grateful for contributions to Django's code. Indeed, bug reports
 with associated contributions will get fixed *far* more quickly than those
 without a solution.
 
+.. _trivial-change:
+
 Typo fixes and trivial documentation changes
 ============================================
 
@@ -52,9 +54,10 @@ and time availability), claim it by following these steps:
 
 .. note::
     The Django software foundation requests that anyone contributing more than
-    a trivial change to Django sign and submit a `Contributor License
-    Agreement`_, this ensures that the Django Software Foundation has clear
-    license to all contributions allowing for a clear license for all users.
+    a :ref:`trivial change <trivial-change>`, to Django sign and submit a
+    `Contributor License Agreement`_, this ensures that the Django Software
+    Foundation has clear license to all contributions allowing for a clear
+    license for all users.
 
 .. _Login using your GitHub account: https://code.djangoproject.com/github/login
 .. _Create an account: https://www.djangoproject.com/accounts/register/
@@ -262,9 +265,12 @@ documentation.
 Contribution checklist
 ======================
 
-Use this checklist to review a pull request. If you are reviewing a pull
-request that is not your own and it passes all the criteria below, please set
-the ""Triage Stage"" on the corresponding Trac ticket to ""Ready for checkin"".
+Use this checklist to review a pull request. If this contribution would not be
+:ref:`considered trivial <trivial-change>`, first ensure it has an accepted
+ticket before proceeding with the review.
+
+If the pull request passes all the criteria below and is not your own, please
+set the ""Triage Stage"" on the corresponding Trac ticket to ""Ready for checkin"".
 If you've left comments for improvement on the pull request, please tick the
 appropriate flags on the Trac ticket based on the results of your review:
 ""Patch needs improvement"", ""Needs documentation"", and/or ""Needs tests"". As time
@@ -331,5 +337,7 @@ All tickets
   :ref:`commit message format <committing-guidelines>`?
 * Are you the patch author and a new contributor? Please add yourself to the
   :source:`AUTHORS` file and submit a `Contributor License Agreement`_.
+* Does this have an accepted ticket on Trac? All contributions require a ticket
+  unless the :ref:`change is considered trivial <trivial-change>`.
 
 .. _Contributor License Agreement: https://www.djangoproject.com/foundation/cla/
","# Trac ticket number
ticket-35546

# Branch description
Following some feedback from PR https://github.com/django/django/pull/17389 mentioned in the TRAC ticket, I have checked and updated the places where we need to be more explicit about the need to have an accepted ticket when working on changes.

Most of the updates involve rewording paragraphs to ensure this requirement is clearly stated.

I am happy to remove any misleading paragraphs if they are unnecessary, as we now explicitly mention the need to add a TRAC ticket for any kind of patches (whether trivial or not) in several places.

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18260,"diff --git a/django/contrib/staticfiles/management/commands/runserver.py b/django/contrib/staticfiles/management/commands/runserver.py
deleted file mode 100644
index fd9ddb16a424..000000000000
--- a/django/contrib/staticfiles/management/commands/runserver.py
+++ /dev/null
@@ -1,36 +0,0 @@
-from django.conf import settings
-from django.contrib.staticfiles.handlers import StaticFilesHandler
-from django.core.management.commands.runserver import Command as RunserverCommand
-
-
-class Command(RunserverCommand):
-    help = (
-        ""Starts a lightweight web server for development and also serves static files.""
-    )
-
-    def add_arguments(self, parser):
-        super().add_arguments(parser)
-        parser.add_argument(
-            ""--nostatic"",
-            action=""store_false"",
-            dest=""use_static_handler"",
-            help=""Tells Django to NOT automatically serve static files at STATIC_URL."",
-        )
-        parser.add_argument(
-            ""--insecure"",
-            action=""store_true"",
-            dest=""insecure_serving"",
-            help=""Allows serving static files even if DEBUG is False."",
-        )
-
-    def get_handler(self, *args, **options):
-        """"""
-        Return the static files serving handler wrapping the default handler,
-        if static files should be served. Otherwise return the default handler.
-        """"""
-        handler = super().get_handler(*args, **options)
-        use_static_handler = options[""use_static_handler""]
-        insecure_serving = options[""insecure_serving""]
-        if use_static_handler and (settings.DEBUG or insecure_serving):
-            return StaticFilesHandler(handler)
-        return handler
diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 132ee4c0795a..a09cf4810ea4 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -6,6 +6,7 @@
 from datetime import datetime
 
 from django.conf import settings
+from django.contrib.staticfiles.handlers import StaticFilesHandler
 from django.core.management.base import BaseCommand, CommandError
 from django.core.servers.basehttp import WSGIServer, get_internal_wsgi_application, run
 from django.db import connections
@@ -65,6 +66,18 @@ def add_arguments(self, parser):
             action=""store_true"",
             help=""Skip system checks."",
         )
+        parser.add_argument(
+            ""--nostatic"",
+            action=""store_false"",
+            dest=""use_static_handler"",
+            help=""Tells Django to NOT automatically serve static files at STATIC_URL."",
+        )
+        parser.add_argument(
+            ""--insecure"",
+            action=""store_true"",
+            dest=""insecure_serving"",
+            help=""Allows serving static files even if DEBUG is False."",
+        )
 
     def execute(self, *args, **options):
         if options[""no_color""]:
@@ -75,8 +88,18 @@ def execute(self, *args, **options):
         super().execute(*args, **options)
 
     def get_handler(self, *args, **options):
-        """"""Return the default WSGI handler for the runner.""""""
-        return get_internal_wsgi_application()
+        """"""
+        Return the default WSGI handler for the runner, or `StaticFilesHandler` if
+        either of --nostatic/--insecure is passed
+        """"""
+        handler = get_internal_wsgi_application()
+
+        use_static_handler = options[""use_static_handler""]
+        insecure_serving = options[""insecure_serving""]
+        if use_static_handler and (settings.DEBUG or insecure_serving):
+            handler = StaticFilesHandler(handler)
+
+        return handler
 
     def handle(self, *args, **options):
         if not settings.DEBUG and not settings.ALLOWED_HOSTS:
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 2e77f2c97a62..19ba3aac8514 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -30,7 +30,13 @@
 from django.core.management.commands.testserver import Command as TestserverCommand
 from django.db import ConnectionHandler, connection
 from django.db.migrations.recorder import MigrationRecorder
-from django.test import LiveServerTestCase, SimpleTestCase, TestCase, override_settings
+from django.test import (
+    LiveServerTestCase,
+    RequestFactory,
+    SimpleTestCase,
+    TestCase,
+    override_settings,
+)
 from django.test.utils import captured_stderr, captured_stdout
 from django.urls import path
 from django.utils.version import PY313
@@ -1695,6 +1701,23 @@ def test_skip_checks(self, mocked_check, *mocked_objects):
         self.assertIn(""Performing system checks..."", self.output.getvalue())
         mocked_check.assert_called()
 
+    @override_settings(MIDDLEWARE=[""django.middleware.common.CommonMiddleware""])
+    def test_middleware_loaded_only_once(self):
+        with mock.patch(""django.middleware.common.CommonMiddleware"") as mocked:
+            self.cmd.get_handler(use_static_handler=True, insecure_serving=True)
+            self.assertEqual(mocked.call_count, 1)
+
+    def test_404_response(self):
+        handler = self.cmd.get_handler(use_static_handler=True, insecure_serving=True)
+        missing_static_file = os.path.join(settings.STATIC_URL, ""unknown.css"")
+        req = RequestFactory().get(missing_static_file)
+        with override_settings(DEBUG=False):
+            response = handler.get_response(req)
+            self.assertEqual(response.status_code, 404)
+        with override_settings(DEBUG=True):
+            response = handler.get_response(req)
+            self.assertEqual(response.status_code, 404)
+
 
 class ManageRunserverMigrationWarning(TestCase):
     def setUp(self):
diff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py
index 4fc35689d615..15539bc1e86e 100644
--- a/tests/settings_tests/tests.py
+++ b/tests/settings_tests/tests.py
@@ -338,6 +338,12 @@ def test_incorrect_timezone(self):
         with self.assertRaisesMessage(ValueError, ""Incorrect timezone setting: test""):
             settings._setup()
 
+    def test_import_non_existing_module(self):
+        exc = ModuleNotFoundError(""No module named 'fake_module'"", name=""fake_module"")
+        with mock.patch(""importlib.import_module"", side_effect=exc):
+            with self.assertRaisesMessage(ImportError, ""No module named 'fake_module'""):
+                Settings(""fake_settings_module"")
+
 
 class TestComplexSettingOverride(SimpleTestCase):
     def setUp(self):
diff --git a/tests/staticfiles_tests/test_management.py b/tests/staticfiles_tests/test_management.py
index c0d381738393..32a5a6c0015e 100644
--- a/tests/staticfiles_tests/test_management.py
+++ b/tests/staticfiles_tests/test_management.py
@@ -11,11 +11,11 @@
 
 from django.conf import STATICFILES_STORAGE_ALIAS, settings
 from django.contrib.staticfiles import storage
-from django.contrib.staticfiles.management.commands import collectstatic, runserver
+from django.contrib.staticfiles.management.commands import collectstatic
 from django.core.exceptions import ImproperlyConfigured
 from django.core.management import CommandError, call_command
 from django.core.management.base import SystemCheckError
-from django.test import RequestFactory, override_settings
+from django.test import override_settings
 from django.test.utils import extend_sys_path
 from django.utils._os import symlinks_supported
 from django.utils.functional import empty
@@ -33,27 +33,6 @@ def test_no_files_created(self):
         self.assertEqual(os.listdir(settings.STATIC_ROOT), [])
 
 
-class TestRunserver(StaticFilesTestCase):
-    @override_settings(MIDDLEWARE=[""django.middleware.common.CommonMiddleware""])
-    def test_middleware_loaded_only_once(self):
-        command = runserver.Command()
-        with mock.patch(""django.middleware.common.CommonMiddleware"") as mocked:
-            command.get_handler(use_static_handler=True, insecure_serving=True)
-            self.assertEqual(mocked.call_count, 1)
-
-    def test_404_response(self):
-        command = runserver.Command()
-        handler = command.get_handler(use_static_handler=True, insecure_serving=True)
-        missing_static_file = os.path.join(settings.STATIC_URL, ""unknown.css"")
-        req = RequestFactory().get(missing_static_file)
-        with override_settings(DEBUG=False):
-            response = handler.get_response(req)
-            self.assertEqual(response.status_code, 404)
-        with override_settings(DEBUG=True):
-            response = handler.get_response(req)
-            self.assertEqual(response.status_code, 404)
-
-
 class TestFindStatic(TestDefaults, CollectionTestCase):
     """"""
     Test ``findstatic`` management command.
","# Trac ticket number

ticket-32915

# Branch description

The traceback for `runserver --nostatic` with broken/missing settings was hidden because the custom runserver command which added `--nostatic` to the command args was only instantiated if the settings had no errors.

Previous PRs: [#1637](https://github.com/django/django/pull/16337), [14622](https://github.com/django/django/pull/14622)

# Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
"
django/django,19372,"diff --git a/django/contrib/auth/password_validation.py b/django/contrib/auth/password_validation.py
index 6067858b005a..38e7c5c3a80f 100644
--- a/django/contrib/auth/password_validation.py
+++ b/django/contrib/auth/password_validation.py
@@ -106,15 +106,20 @@ def __init__(self, min_length=8):
 
     def validate(self, password, user=None):
         if len(password) < self.min_length:
-            raise ValidationError(self.get_error_message(), code=""password_too_short"")
+            raise ValidationError(
+                self.get_error_message(),
+                code=""password_too_short"",
+                params={""min_length"": self.min_length},
+            )
 
     def get_error_message(self):
-        return ngettext(
-            ""This password is too short. It must contain at least %d character.""
-            % self.min_length,
-            ""This password is too short. It must contain at least %d characters.""
-            % self.min_length,
-            self.min_length,
+        return (
+            ngettext(
+                ""This password is too short. It must contain at least %d character."",
+                ""This password is too short. It must contain at least %d characters."",
+                self.min_length,
+            )
+            % self.min_length
         )
 
     def get_help_text(self):
diff --git a/docs/releases/5.2.1.txt b/docs/releases/5.2.1.txt
index cc12e7b34f74..81fb750847b3 100644
--- a/docs/releases/5.2.1.txt
+++ b/docs/releases/5.2.1.txt
@@ -36,3 +36,7 @@ Bugfixes
 * Fixed a regression in Django 5.2 that caused improper values to be returned
   from ``QuerySet.values_list()`` when duplicate field names were specified
   (:ticket:`36288`).
+
+* Fixed a regression in Django 5.2 where the password validation error message
+  from ``MinimumLengthValidator`` was not translated when using non-English
+  locales (:ticket:`36314`).
diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py
index ea75c4a080af..fdbf495ff5cd 100644
--- a/tests/auth_tests/test_validators.py
+++ b/tests/auth_tests/test_validators.py
@@ -1,4 +1,5 @@
 import os
+from unittest import mock
 
 from django.contrib.auth import validators
 from django.contrib.auth.models import User
@@ -132,11 +133,16 @@ def test_validate(self):
         with self.assertRaises(ValidationError) as cm:
             MinimumLengthValidator().validate(""1234567"")
         self.assertEqual(cm.exception.messages, [expected_error % 8])
-        self.assertEqual(cm.exception.error_list[0].code, ""password_too_short"")
+        error = cm.exception.error_list[0]
+        self.assertEqual(error.code, ""password_too_short"")
+        self.assertEqual(error.params, {""min_length"": 8})
 
         with self.assertRaises(ValidationError) as cm:
             MinimumLengthValidator(min_length=3).validate(""12"")
         self.assertEqual(cm.exception.messages, [expected_error % 3])
+        error = cm.exception.error_list[0]
+        self.assertEqual(error.code, ""password_too_short"")
+        self.assertEqual(error.params, {""min_length"": 3})
 
     def test_help_text(self):
         self.assertEqual(
@@ -144,6 +150,24 @@ def test_help_text(self):
             ""Your password must contain at least 8 characters."",
         )
 
+    @mock.patch(""django.contrib.auth.password_validation.ngettext"")
+    def test_l10n(self, mock_ngettext):
+        with self.subTest(""get_error_message""):
+            MinimumLengthValidator().get_error_message()
+            mock_ngettext.assert_called_with(
+                ""This password is too short. It must contain at least %d character."",
+                ""This password is too short. It must contain at least %d characters."",
+                8,
+            )
+        mock_ngettext.reset()
+        with self.subTest(""get_help_text""):
+            MinimumLengthValidator().get_help_text()
+            mock_ngettext.assert_called_with(
+                ""Your password must contain at least %(min_length)d "" ""character."",
+                ""Your password must contain at least %(min_length)d "" ""characters."",
+                8,
+            )
+
     def test_custom_error(self):
         class CustomMinimumLengthValidator(MinimumLengthValidator):
             def get_error_message(self):
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36314

#### Branch description
The `MinimumLengthValidator` error message was not being translated properly
because string formatting was applied before translation. Changed to use named
parameters `(%(min_length)d)` and moved string formatting after the ngettext
call, matching the pattern used in `get_help_text()`.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19110,"diff --git a/django/forms/models.py b/django/forms/models.py
index be59dbe4a0a5..fd28e00446e6 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -203,6 +203,7 @@ def fields_for_model(
                 fields is not None
                 and f.name in fields
                 and (exclude is None or f.name not in exclude)
+                and f not in sortable_private_fields
             ):
                 raise FieldError(
                     ""'%s' cannot be specified for %s model form as it is a ""
diff --git a/docs/releases/5.1.6.txt b/docs/releases/5.1.6.txt
index 3b2319203317..02b38d3daa29 100644
--- a/docs/releases/5.1.6.txt
+++ b/docs/releases/5.1.6.txt
@@ -12,3 +12,6 @@ Bugfixes
 * Fixed a regression in Django 5.1.5 that caused ``validate_ipv6_address()``
   and ``validate_ipv46_address()`` to crash when handling non-string values
   (:ticket:`36098`).
+
+* Fixed a regression in Django 5.1 where ``GenericForeignKey`` fields could not
+  be used in a :class:`~django.forms.ModelForm` (:ticket:`36151`).
diff --git a/tests/contenttypes_tests/test_fields.py b/tests/contenttypes_tests/test_fields.py
index 764b9fa7dbeb..5546810126b5 100644
--- a/tests/contenttypes_tests/test_fields.py
+++ b/tests/contenttypes_tests/test_fields.py
@@ -1,5 +1,6 @@
 import json
 
+from django import forms
 from django.contrib.contenttypes.fields import GenericForeignKey
 from django.contrib.contenttypes.prefetch import GenericPrefetch
 from django.db import models
@@ -65,6 +66,25 @@ def test_clear_cached_generic_relation_when_deferred(self):
         answer.refresh_from_db()
         self.assertIsNot(answer.question, old_question_obj)
 
+    def test_form_field(self):
+        class AnswerForm(forms.ModelForm):
+            class Meta:
+                model = Answer
+                fields = ""__all__""
+
+        form = AnswerForm()
+        self.assertNotIn(""question"", form.fields)
+
+        class AnswerWithGFKForm(forms.ModelForm):
+            question = forms.CharField()
+
+            class Meta:
+                model = Answer
+                fields = [""question""]
+
+        form = AnswerWithGFKForm()
+        self.assertIn(""question"", form.fields)
+
 
 class GenericRelationTests(TestCase):
     def test_value_to_string(self):
","#### Trac ticket number

ticket-36151

#### Branch description

https://code.djangoproject.com/ticket/35224 made GFK a Field with hard-coded editable=False

This breaks this very nice feature in Django 5.1 [​https://django-autocomplete-light.readthedocs.io/en/master/gfk.html](https://django-autocomplete-light.readthedocs.io/en/master/gfk.html)

With exception: cannot be specified for TModel model form as it is a non-editable field. Check fields/fieldsets/exclude attributes of class TestAdmin

While I understand this is an interesting default protection for users, it would also be nice if Django would keep on allowing users to create their form fields for GFK if they want to, as they could until Django 5.0

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ]I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19443,"diff --git a/docs/internals/howto-release-django.txt b/docs/internals/howto-release-django.txt
index 88456bda08d3..7b7fbc8517f7 100644
--- a/docs/internals/howto-release-django.txt
+++ b/docs/internals/howto-release-django.txt
@@ -83,7 +83,7 @@ permissions.
     ``you@example.com`` is the email address associated with the key you want
     to use.
 
-* A clean Python virtual environment per Django version being released, with
+* A clean Python virtual environment (Python 3.9+) to build artifacts, with
   these required Python packages installed:
 
   .. code-block:: shell
@@ -473,10 +473,8 @@ Building the artifacts
 
     You can streamline some of the steps below using helper scripts from the Wiki:
 
-    * `Release script for versions 5.1 and newer
+    * `Release script
       <https://code.djangoproject.com/wiki/ReleaseScript>`_
-    * `Release script for versions 5.0 and older
-      <https://code.djangoproject.com/wiki/ReleaseScript5.0AndOlder>`_
     * `Test new version script
       <https://code.djangoproject.com/wiki/ReleaseTestNewVersion>`_
 
","With the recent merge of artifact build updates from https://github.com/django/django/pull/19436, there is no need to have different build instructions for 4.2.

#### Trac ticket number
Related to ticket-35980 and https://github.com/django/django/pull/19436.
"
django/django,18591,"diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py
index 8e1d2ace09c0..f4535acb09c9 100644
--- a/django/conf/global_settings.py
+++ b/django/conf/global_settings.py
@@ -43,8 +43,10 @@ def gettext_noop(s):
 # If you set this to True, Django will use timezone-aware datetimes.
 USE_TZ = True
 
-# Language code for this installation. All choices can be found here:
-# http://www.i18nguy.com/unicode/language-identifiers.html
+# Language code for this installation. Valid choices can be found here:
+# https://www.iana.org/assignments/language-subtag-registry/
+# If LANGUAGE_CODE is not listed in LANGUAGES (below), the project must
+# provide the necessary translations and locale definitions.
 LANGUAGE_CODE = ""en-us""
 
 # Languages we provide translations for, out of the box.
","The linked link does not include a list of supported locales. Some locales listed there are not supported at all.

Even if the user attempts to use them, Django will error. An example is `ku`: It is listed in the link, but not supported at all.

This PR removes the misleading link.
"
django/django,18920,"diff --git a/django/contrib/auth/middleware.py b/django/contrib/auth/middleware.py
index 85f58ec9a54a..880563bc5b77 100644
--- a/django/contrib/auth/middleware.py
+++ b/django/contrib/auth/middleware.py
@@ -95,13 +95,16 @@ class RemoteUserMiddleware:
     Middleware for utilizing web-server-provided authentication.
 
     If request.user is not authenticated, then this middleware attempts to
-    authenticate the username passed in the ``REMOTE_USER`` request header.
+    authenticate the username from the ``REMOTE_USER`` key in ``request.META``,
+    an environment variable commonly set by the webserver.
+
     If authentication is successful, the user is automatically logged in to
     persist the user in the session.
 
-    The header used is configurable and defaults to ``REMOTE_USER``.  Subclass
-    this class and change the ``header`` attribute if you need to use a
-    different header.
+    The ``request.META`` key is configurable and defaults to ``REMOTE_USER``.
+    Subclass this class and change the ``header`` attribute if you need to
+    use a different key from ``request.META``, for example a HTTP request
+    header.
     """"""
 
     sync_capable = True
@@ -116,9 +119,9 @@ def __init__(self, get_response):
             markcoroutinefunction(self)
         super().__init__()
 
-    # Name of request header to grab username from.  This will be the key as
-    # used in the request.META dictionary, i.e. the normalization of headers to
-    # all uppercase and the addition of ""HTTP_"" prefix apply.
+    # Name of request.META key to grab username from. Note that for
+    # request headers, normalization to all uppercase and the addition
+    # of a ""HTTP_"" prefix apply.
     header = ""REMOTE_USER""
     force_logout_if_no_header = True
 
@@ -259,10 +262,10 @@ class PersistentRemoteUserMiddleware(RemoteUserMiddleware):
     Middleware for web-server provided authentication on logon pages.
 
     Like RemoteUserMiddleware but keeps the user authenticated even if
-    the header (``REMOTE_USER``) is not found in the request. Useful
-    for setups when the external authentication via ``REMOTE_USER``
-    is only expected to happen on some ""logon"" URL and the rest of
-    the application wants to use Django's authentication mechanism.
+    the ``request.META`` key is not found in the request. Useful for
+    setups when the external authentication is only expected to happen
+    on some ""logon"" URL and the rest of the application wants to use
+    Django's authentication mechanism.
     """"""
 
     force_logout_if_no_header = False
","Per the errors mentioned in the ticket:

Change the docstrings and code comments to better reflect where the default value comes from (environment variable, not request header). 

Also: Add mention in the docstrings of what happens in corner cases.

#### Trac ticket number

ticket-36002

#### Branch description
Fix erroneous docstrings and comments.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19214,"diff --git a/django/contrib/admin/models.py b/django/contrib/admin/models.py
index 5723ebff7f36..453e65cf013b 100644
--- a/django/contrib/admin/models.py
+++ b/django/contrib/admin/models.py
@@ -24,9 +24,7 @@
 class LogEntryManager(models.Manager):
     use_in_migrations = True
 
-    def log_actions(
-        self, user_id, queryset, action_flag, change_message="""", *, single_object=False
-    ):
+    def log_actions(self, user_id, queryset, action_flag, change_message=""""):
         if isinstance(change_message, list):
             change_message = json.dumps(change_message)
 
@@ -44,7 +42,7 @@ def log_actions(
             for obj in queryset
         ]
 
-        if single_object and log_entry_list:
+        if len(log_entry_list) == 1:
             instance = log_entry_list[0]
             instance.save()
             return instance
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 3c2cf9d13061..090b12151a8d 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -946,7 +946,6 @@ def log_addition(self, request, obj, message):
             queryset=[obj],
             action_flag=ADDITION,
             change_message=message,
-            single_object=True,
         )
 
     def log_change(self, request, obj, message):
@@ -962,7 +961,6 @@ def log_change(self, request, obj, message):
             queryset=[obj],
             action_flag=CHANGE,
             change_message=message,
-            single_object=True,
         )
 
     def log_deletions(self, request, queryset):
diff --git a/docs/releases/5.1.7.txt b/docs/releases/5.1.7.txt
index d1ed21ec5db0..77e89d9c2720 100644
--- a/docs/releases/5.1.7.txt
+++ b/docs/releases/5.1.7.txt
@@ -22,3 +22,7 @@ Bugfixes
   of ``ManyToManyField`` related managers would always return ``0`` and
   ``False`` when the intermediary model back references used ``to_field``
   (:ticket:`36197`).
+
+* Fixed a regression in Django 5.1 where the ``pre_save`` and ``post_save``
+  signals for ``LogEntry`` were not sent when deleting a single object in the
+  admin (:ticket:`36217`).
diff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt
index 799f3ee819d6..a57bf60cbd1b 100644
--- a/docs/releases/5.1.txt
+++ b/docs/releases/5.1.txt
@@ -401,6 +401,11 @@ Miscellaneous
 * The minimum supported version of ``asgiref`` is increased from 3.7.0 to
   3.8.1.
 
+* To improve performance, the ``delete_selected`` admin action now uses
+  ``QuerySet.bulk_create()`` when creating multiple ``LogEntry`` objects. As a
+  result, ``pre_save`` and ``post_save`` signals for ``LogEntry`` are not sent
+  when multiple objects are deleted via this admin action.
+
 .. _deprecated-features-5.1:
 
 Features deprecated in 5.1
diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py
index 17866c8ad673..6003ce47d884 100644
--- a/tests/admin_changelist/tests.py
+++ b/tests/admin_changelist/tests.py
@@ -1845,7 +1845,7 @@ def test_no_user(self):
         """"""{% get_admin_log %} works without specifying a user.""""""
         user = User(username=""jondoe"", password=""secret"", email=""super@example.com"")
         user.save()
-        LogEntry.objects.log_actions(user.pk, [user], 1, single_object=True)
+        LogEntry.objects.log_actions(user.pk, [user], 1)
         context = Context({""log_entries"": LogEntry.objects.all()})
         t = Template(
             ""{% load log %}""
diff --git a/tests/admin_utils/test_logentry.py b/tests/admin_utils/test_logentry.py
index 491a2201995a..7ba43c4ba08c 100644
--- a/tests/admin_utils/test_logentry.py
+++ b/tests/admin_utils/test_logentry.py
@@ -5,6 +5,7 @@
 from django.contrib.admin.utils import quote
 from django.contrib.auth.models import User
 from django.contrib.contenttypes.models import ContentType
+from django.db.models.signals import post_save, pre_save
 from django.test import TestCase, override_settings
 from django.urls import reverse
 from django.utils import translation
@@ -41,11 +42,23 @@ def setUpTestData(cls):
             [cls.a1],
             CHANGE,
             change_message=""Changed something"",
-            single_object=True,
         )
 
     def setUp(self):
         self.client.force_login(self.user)
+        self.signals = []
+
+        pre_save.connect(self.pre_save_listener, sender=LogEntry)
+        self.addCleanup(pre_save.disconnect, self.pre_save_listener, sender=LogEntry)
+
+        post_save.connect(self.post_save_listener, sender=LogEntry)
+        self.addCleanup(post_save.disconnect, self.post_save_listener, sender=LogEntry)
+
+    def pre_save_listener(self, instance, **kwargs):
+        self.signals.append((""pre_save"", instance))
+
+    def post_save_listener(self, instance, created, **kwargs):
+        self.signals.append((""post_save"", instance, created))
 
     def test_logentry_save(self):
         """"""
@@ -271,6 +284,7 @@ def test_log_actions(self):
             for obj in queryset
         ]
         self.assertSequenceEqual(logs, expected_log_values)
+        self.assertEqual(self.signals, [])
 
     def test_recentactions_without_content_type(self):
         """"""
@@ -314,6 +328,8 @@ def test_proxy_model_content_type_is_used_for_log_entries(self):
             ""created_1"": ""00:00"",
         }
         changelist_url = reverse(""admin:admin_utils_articleproxy_changelist"")
+        expected_signals = []
+        self.assertEqual(self.signals, expected_signals)
 
         # add
         proxy_add_url = reverse(""admin:admin_utils_articleproxy_add"")
@@ -322,6 +338,10 @@ def test_proxy_model_content_type_is_used_for_log_entries(self):
         proxy_addition_log = LogEntry.objects.latest(""id"")
         self.assertEqual(proxy_addition_log.action_flag, ADDITION)
         self.assertEqual(proxy_addition_log.content_type, proxy_content_type)
+        expected_signals.extend(
+            [(""pre_save"", proxy_addition_log), (""post_save"", proxy_addition_log, True)]
+        )
+        self.assertEqual(self.signals, expected_signals)
 
         # change
         article_id = proxy_addition_log.object_id
@@ -334,6 +354,10 @@ def test_proxy_model_content_type_is_used_for_log_entries(self):
         proxy_change_log = LogEntry.objects.latest(""id"")
         self.assertEqual(proxy_change_log.action_flag, CHANGE)
         self.assertEqual(proxy_change_log.content_type, proxy_content_type)
+        expected_signals.extend(
+            [(""pre_save"", proxy_change_log), (""post_save"", proxy_change_log, True)]
+        )
+        self.assertEqual(self.signals, expected_signals)
 
         # delete
         proxy_delete_url = reverse(
@@ -344,6 +368,10 @@ def test_proxy_model_content_type_is_used_for_log_entries(self):
         proxy_delete_log = LogEntry.objects.latest(""id"")
         self.assertEqual(proxy_delete_log.action_flag, DELETION)
         self.assertEqual(proxy_delete_log.content_type, proxy_content_type)
+        expected_signals.extend(
+            [(""pre_save"", proxy_delete_log), (""post_save"", proxy_delete_log, True)]
+        )
+        self.assertEqual(self.signals, expected_signals)
 
     def test_action_flag_choices(self):
         tests = ((1, ""Addition""), (2, ""Change""), (3, ""Deletion""))
@@ -358,7 +386,6 @@ def test_hook_get_log_entries(self):
             [self.a1],
             CHANGE,
             change_message=""Article changed message"",
-            single_object=True,
         )
         c1 = Car.objects.create()
         LogEntry.objects.log_actions(
@@ -366,7 +393,6 @@ def test_hook_get_log_entries(self):
             [c1],
             ADDITION,
             change_message=""Car created message"",
-            single_object=True,
         )
         exp_str_article = escape(str(self.a1))
         exp_str_car = escape(str(c1))
diff --git a/tests/admin_views/test_history_view.py b/tests/admin_views/test_history_view.py
index dfac3530bf6b..7079c1d0d8b9 100644
--- a/tests/admin_views/test_history_view.py
+++ b/tests/admin_views/test_history_view.py
@@ -66,7 +66,6 @@ def setUp(self):
                 [self.superuser],
                 CHANGE,
                 change_message=f""Changed something {i}"",
-                single_object=True,
             )
         self.admin_login(
             username=""super"",
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 1fa2c62353ae..5e1aa719c10c 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -3884,21 +3884,18 @@ def setUpTestData(cls):
             [cls.m1],
             2,
             change_message=""Changed something"",
-            single_object=True,
         )
         LogEntry.objects.log_actions(
             user_pk,
             [cls.m1],
             1,
             change_message=""Added something"",
-            single_object=True,
         )
         LogEntry.objects.log_actions(
             user_pk,
             [cls.m1],
             3,
             change_message=""Deleted something"",
-            single_object=True,
         )
 
     def setUp(self):
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36217

#### Branch description
I fixed the issue where the signals set in `LogEntry` were not being called when an object was deleted in the admin.
Thank you for @sarahboyce for providing the solution this ticket.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18828,"diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index c2663154d4a5..b7f9c7149902 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -8,7 +8,15 @@
 from django.utils.translation import gettext_lazy as _
 from django.utils.translation import ngettext_lazy
 
-__all__ = (""BaseFormSet"", ""formset_factory"", ""all_valid"")
+__all__ = (
+    ""BaseFormSet"",
+    ""formset_factory"",
+    ""all_valid"",
+    ""TOTAL_FORM_COUNT"",
+    ""INITIAL_FORM_COUNT"",
+    ""MIN_NUM_FORM_COUNT"",
+    ""MAX_NUM_FORM_COUNT"",
+)
 
 # special field names
 TOTAL_FORM_COUNT = ""TOTAL_FORMS""
@@ -78,6 +86,8 @@ class BaseFormSet(RenderableFormMixin):
     template_name_table = ""django/forms/formsets/table.html""
     template_name_ul = ""django/forms/formsets/ul.html""
 
+    management_form_class = ManagementForm
+
     def __init__(
         self,
         data=None,
@@ -88,6 +98,7 @@ def __init__(
         error_class=ErrorList,
         form_kwargs=None,
         error_messages=None,
+        management_form_class=None,
     ):
         self.is_bound = data is not None or files is not None
         self.prefix = prefix or self.get_default_prefix()
@@ -101,6 +112,7 @@ def __init__(
         self._non_form_errors = None
         self.form_renderer = self.renderer
         self.renderer = self.renderer or get_default_renderer()
+        self.management_form_class = management_form_class or self.management_form_class
 
         messages = {}
         for cls in reversed(type(self).__mro__):
@@ -207,6 +219,27 @@ def forms(self):
             for i in range(self.total_form_count())
         ]
 
+    def get_management_form_kwargs(self):
+        if self.is_bound:
+            return {
+                ""data"": self.data,
+                ""auto_id"": self.auto_id,
+                ""prefix"": self.prefix,
+                ""renderer"": self.renderer,
+            }
+        else:
+            return {
+                ""auto_id"": self.auto_id,
+                ""prefix"": self.prefix,
+                ""initial"": {
+                    TOTAL_FORM_COUNT: self.total_form_count(),
+                    INITIAL_FORM_COUNT: self.initial_form_count(),
+                    MIN_NUM_FORM_COUNT: self.min_num,
+                    MAX_NUM_FORM_COUNT: self.max_num,
+                },
+                ""renderer"": self.renderer,
+            }
+
     def get_form_kwargs(self, index):
         """"""
         Return additional keyword arguments for each individual formset form.
@@ -544,6 +577,7 @@ def formset_factory(
     absolute_max=None,
     can_delete_extra=True,
     renderer=None,
+    management_form_class=None,
 ):
     """"""Return a FormSet for the given form class.""""""
     if min_num is None:
@@ -570,6 +604,10 @@ def formset_factory(
         ""validate_max"": validate_max,
         ""renderer"": renderer,
     }
+
+    if management_form_class:
+        attrs[""management_form_class""] = management_form_class
+
     form_name = form.__name__
     if form_name.endswith(""Form""):
         formset_name = form_name + ""Set""
diff --git a/docs/ref/forms/formsets.txt b/docs/ref/forms/formsets.txt
index 5010d3268132..d308c6f24f7b 100644
--- a/docs/ref/forms/formsets.txt
+++ b/docs/ref/forms/formsets.txt
@@ -11,7 +11,7 @@ Formset API reference. For introductory material about formsets, see the
 ``formset_factory``
 ===================
 
-.. function:: formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None)
+.. function:: formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None, management_form_class=None)
 
     Returns a ``FormSet`` class for the given ``form`` class.
 
diff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt
index 14d4962eb671..59dde6f78067 100644
--- a/docs/topics/forms/formsets.txt
+++ b/docs/topics/forms/formsets.txt
@@ -1081,3 +1081,54 @@ it is rendered and processed correctly.
 
 Each formset's :ref:`prefix <formset-prefix>` replaces the default ``form``
 prefix that's added to each field's ``name`` and ``id`` HTML attributes.
+
+.. _formset-management-form:
+
+Customizing the management form
+===============================
+
+.. versionadded:: 5.2
+
+Formsets use a ``ManagementForm`` to manage the collection of forms contained
+in the formset (see :ref:`understanding-the-managementform`). In certain
+situations, you may want to get more control over that mangement form and
+how it is created. That's why :class:`~.BaseFormSet` offers some extension
+points to allow ``ManagementForm`` customization:
+
+.. attribute:: BaseFormSet.management_form_class
+
+    The ``ManagementForm`` class to use to produce the management form.
+    Defaults to ``django.forms.formsets.ManagementForm``.
+
+:func:`~django.forms.formsets.formset_factory` accepts an optionnal
+``management_form_class`` parameter. When provided, it takes priority over
+:attr:`~.BaseFormSet.management_form_class`.
+
+:class:`~.BaseFormSet`'s ``__init__`` accepts an optionnal
+``management_form_class`` parameter. When provided, it takes priority over
+``formset_factory``'s ``management_form_class`` parameter.
+
+Usage::
+
+    from django.forms import formset_factory, ManagmentForm, BaseFormSet
+
+
+    class WarningManagmentForm(ManagementForm):
+        """"""
+        A managment form with a number of forms beyond which the front
+        should display a warning
+        """"""
+
+        WARNING_NUM_FORMS = IntegerField(required=False, widget=HiddenInput)
+
+
+    class WarningFormSet(BaseFormSet):
+        management_form_class = WarningManagmentForm
+
+        def get_management_form_kwargs(self):
+            kwargs = super().get_management_form_kwargs()
+            kwargs[""initial""][""WARNING_NUM_FORMS""] = 30
+            return kwargs
+
+
+    formset = formset_factory(Form, formset=WarningFormSet)
diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py
index 9f7012a11fd8..2b3e7483f20c 100644
--- a/tests/forms_tests/tests/test_formsets.py
+++ b/tests/forms_tests/tests/test_formsets.py
@@ -1966,3 +1966,83 @@ def test_invalid(self):
         ]
         self.assertEqual(formset1._errors, expected_errors)
         self.assertEqual(formset2._errors, expected_errors)
+
+
+class WarningManagmentForm(ManagementForm):
+    """"""
+    A managment form with a number of forms beyond which the front
+    should display a warning
+    """"""
+
+    WARNING_NUM_FORMS = IntegerField(required=False, widget=HiddenInput)
+
+
+class EnpointManagmentForm(ManagementForm):
+    """"""
+    A managment form indicating an enpoint to POST to for front
+    """"""
+
+    FRONT_API_ENPOINT = CharField(required=False, widget=HiddenInput)
+
+
+class CustomManagmentFormTest(SimpleTestCase):
+    def test_managment_form_override(self):
+        class CustomFormset(BaseFormSet):
+            management_form_class = WarningManagmentForm
+            renderer = None
+
+        self.assertIs(CustomFormset().management_form_class, WarningManagmentForm)
+        self.assertIs(
+            CustomFormset(
+                management_form_class=EnpointManagmentForm
+            ).management_form_class,
+            EnpointManagmentForm,
+        )
+
+    def test_formset_factory_override(self):
+        class CustomFormset(BaseFormSet):
+            management_form_class = WarningManagmentForm
+            renderer = None
+
+        with self.subTest(""formset_factory defaults to class attribute""):
+            formset = formset_factory(Form, formset=CustomFormset)
+            self.assertIs(formset().management_form_class, WarningManagmentForm)
+
+        with self.subTest(
+            ""formset_factory argument takes priority over class attribute""
+        ):
+            formset = formset_factory(
+                Form, formset=CustomFormset, management_form_class=EnpointManagmentForm
+            )
+            self.assertIs(formset().management_form_class, EnpointManagmentForm)
+
+        with self.subTest(
+            ""constructor argument takes priory over formset_factory argument""
+        ):
+            formset = formset_factory(
+                Form, formset=CustomFormset, management_form_class=EnpointManagmentForm
+            )
+            self.assertIs(
+                formset(management_form_class=ManagementForm).management_form_class,
+                ManagementForm,
+            )
+
+    def test_get_management_form_kwargs(self):
+        class CustomFormset(BaseFormSet):
+            management_form_class = WarningManagmentForm
+
+            def get_management_form_kwargs(self):
+                kwargs = super().get_management_form_kwargs()
+                kwargs[""initial""][""WARNING_NUM_FORMS""] = 30
+                return kwargs
+
+        self.assertEqual(
+            formset_factory(Form, formset=CustomFormset)().management_form.initial,
+            {
+                ""INITIAL_FORMS"": 0,
+                ""MAX_NUM_FORMS"": 1000,
+                ""MIN_NUM_FORMS"": 0,
+                ""TOTAL_FORMS"": 1,
+                ""WARNING_NUM_FORMS"": 30,
+            },
+        )
","#### Trac ticket number

ticket-35922

#### Branch description

Implemented ManagementForm customisation in BaseFormSet

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18619,"diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py
index 5ae1aae5c620..16bfa7f4d878 100644
--- a/django/middleware/csrf.py
+++ b/django/middleware/csrf.py
@@ -287,11 +287,11 @@ def _origin_verified(self, request):
             parsed_origin = urlsplit(request_origin)
         except ValueError:
             return False
-        request_scheme = parsed_origin.scheme
-        request_netloc = parsed_origin.netloc
+        parsed_origin_scheme = parsed_origin.scheme
+        parsed_origin_netloc = parsed_origin.netloc
         return any(
-            is_same_domain(request_netloc, host)
-            for host in self.allowed_origin_subdomains.get(request_scheme, ())
+            is_same_domain(parsed_origin_netloc, host)
+            for host in self.allowed_origin_subdomains.get(parsed_origin_scheme, ())
         )
 
     def _check_referer(self, request):
","(trivial PR, no actual Trac issue that goes with this)

I was studying the code for the CSRF middleware recently in an attempt to get clarity on what my users are running into.

What was confusing to me: the variable `request_scheme` did _not_ contain the scheme from the request (which is also a thing, and also a thing in the context of the relevant code snippet) but instead the scheme from the request's origin header. Same for `request_netloc`. By inlining the variables (single use) this becomes clear automatically.

#### Branch description
Provide a concise overview of the issue or rationale behind the proposed changes.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [ ] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19264,"diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py
index 89d12ce6b877..132e7f89d24a 100644
--- a/django/core/management/commands/shell.py
+++ b/django/core/management/commands/shell.py
@@ -185,8 +185,8 @@ def get_namespace(self, **options):
             else:
                 module = None
                 name = path
-
-            auto_imports[module].append((name, obj))
+            if (name, obj) not in auto_imports[module]:
+                auto_imports[module].append((name, obj))
 
         namespace = {
             name: obj for items in auto_imports.values() for name, obj in items
diff --git a/docs/howto/custom-shell.txt b/docs/howto/custom-shell.txt
index 312a38162b92..c1632849b528 100644
--- a/docs/howto/custom-shell.txt
+++ b/docs/howto/custom-shell.txt
@@ -55,7 +55,8 @@ Running this customized ``shell`` command with ``verbosity=2`` would show:
       from django.urls import resolve, reverse
 
 If an overridden ``shell`` command includes paths that cannot be imported,
-these errors are shown when ``verbosity`` is set to ``1`` or higher.
+these errors are shown when ``verbosity`` is set to ``1`` or higher. Duplicate
+imports are automatically handled.
 
 Note that automatic imports can be disabled for a specific ``shell`` session
 using the :option:`--no-imports <shell --no-imports>` flag. To permanently
diff --git a/tests/shell/tests.py b/tests/shell/tests.py
index 49c85ecbe313..ff4db089f7bf 100644
--- a/tests/shell/tests.py
+++ b/tests/shell/tests.py
@@ -303,11 +303,16 @@ def test_verbosity_one(self):
     def test_message_with_stdout_listing_objects_with_isort_not_installed(self):
         class TestCommand(shell.Command):
             def get_auto_imports(self):
+                # Include duplicate import strings to ensure proper handling,
+                # independent of isort's deduplication (#36252).
                 return super().get_auto_imports() + [
                     ""django.urls.reverse"",
                     ""django.urls.resolve"",
                     ""shell"",
                     ""django"",
+                    ""django.urls.reverse"",
+                    ""shell"",
+                    ""django"",
                 ]
 
         with captured_stdout() as stdout:
","#### Trac ticket number
ticket-36252

#### Branch description
Fixed duplicate imports in the shell command output. When the same import path appeared multiple times in the auto-imports list, it would be displayed multiple times in the verbose output. This change ensures each import is only displayed once.

#### Checklist
- [x] This PR targets the `main` branch.
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes."
django/django,19348,"diff --git a/docs/topics/i18n/translation.txt b/docs/topics/i18n/translation.txt
index 04dad034cc80..eacf2a323463 100644
--- a/docs/topics/i18n/translation.txt
+++ b/docs/topics/i18n/translation.txt
@@ -129,8 +129,22 @@ have more than a single parameter. If you used positional interpolation,
 translations wouldn't be able to reorder placeholder text.
 
 Since string extraction is done by the ``xgettext`` command, only syntaxes
-supported by ``gettext`` are supported by Django. In particular, Python
-:py:ref:`f-strings <f-strings>` are not yet supported by ``xgettext``, and
+supported by ``gettext`` are supported by Django. Python :py:ref:`f-strings
+<f-strings>` cannot be used directly with ``gettext`` functions because
+f-string expressions are evaluated before they reach ``gettext``. This means
+``_(f""Welcome {name}"")`` will not work as expected, as the variable is
+substituted before translation occurs. Instead, use named-string
+interpolation::
+
+    # Good
+    _(""Welcome %(name)s"") % {""name"": name}
+
+    # Good
+    _(""Welcome {name}"").format(name=name)
+
+    # Bad
+    _(f""Welcome {name}"")  # f-string evaluated before translation.
+
 JavaScript template strings need ``gettext`` 0.21+.
 
 .. _translator-comments:
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35993

#### Branch description
Updated documentation to explain that while xgettext 0.23+ recognizes f-string syntax, 
f-strings cannot be effectively used with gettext functions because they are evaluated 
before translation occurs. Added examples of correct usage patterns with named string 
interpolation and format() method.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18792,"diff --git a/django/core/serializers/pyyaml.py b/django/core/serializers/pyyaml.py
index ed6e4b38958c..c72d1fa03bca 100644
--- a/django/core/serializers/pyyaml.py
+++ b/django/core/serializers/pyyaml.py
@@ -5,6 +5,7 @@
 """"""
 
 import collections
+import datetime
 import decimal
 
 import yaml
@@ -12,7 +13,6 @@
 from django.core.serializers.base import DeserializationError
 from django.core.serializers.python import Deserializer as PythonDeserializer
 from django.core.serializers.python import Serializer as PythonSerializer
-from django.db import models
 
 # Use the C (faster) implementation if possible
 try:
@@ -44,17 +44,17 @@ class Serializer(PythonSerializer):
 
     internal_use_only = False
 
-    def handle_field(self, obj, field):
+    def _value_from_field(self, obj, field):
         # A nasty special case: base YAML doesn't support serialization of time
         # types (as opposed to dates or datetimes, which it does support). Since
         # we want to use the ""safe"" serializer for better interoperability, we
         # need to do something with those pesky times. Converting 'em to strings
         # isn't perfect, but it's better than a ""!!python/time"" type which would
         # halt deserialization under any other language.
-        if isinstance(field, models.TimeField) and getattr(obj, field.name) is not None:
-            self._current[field.name] = str(getattr(obj, field.name))
-        else:
-            super().handle_field(obj, field)
+        value = super()._value_from_field(obj, field)
+        if isinstance(value, datetime.time):
+            value = str(value)
+        return value
 
     def end_serialization(self):
         self.options.setdefault(""allow_unicode"", True)
diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py
index 212ea0e06fb4..bb76bfba48bf 100644
--- a/tests/serializers/models/data.py
+++ b/tests/serializers/models/data.py
@@ -245,8 +245,9 @@ class SmallPKData(models.Model):
 # class TextPKData(models.Model):
 #     data = models.TextField(primary_key=True)
 
-# class TimePKData(models.Model):
-#    data = models.TimeField(primary_key=True)
+
+class TimePKData(models.Model):
+    data = models.TimeField(primary_key=True)
 
 
 class UUIDData(models.Model):
diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py
index 33ea3458de75..1f8f38ba0fa7 100644
--- a/tests/serializers/test_data.py
+++ b/tests/serializers/test_data.py
@@ -69,6 +69,7 @@
     Tag,
     TextData,
     TimeData,
+    TimePKData,
     UniqueAnchor,
     UUIDData,
     UUIDDefaultData,
@@ -390,7 +391,7 @@ def inherited_compare(testcase, pk, klass, data):
     # It contains line breaks.
     # Several of them.
     # The end.""""""),
-    # (pk_obj, 770, TimePKData, datetime.time(10, 42, 37)),
+    (pk_obj, 770, TimePKData, datetime.time(10, 42, 37)),
     (pk_obj, 791, UUIDData, uuid_obj),
     (fk_obj, 792, FKToUUID, uuid_obj),
     (pk_obj, 793, UUIDDefaultData, uuid_obj),
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-21286

#### Branch description

The `TimePKData` model, which contains a `TimeField` that is a primary key, was commented out of the serializer data tests because it would cause the YAML serializer throw an error. However, the `TimeData` model, which contains a `TimeField` that isn't a primary key, works fine with the YAML serializer.

The YAML serializer class inherits from the Python serializer class and overrides `handle_field` to special-case `TimeField` since PyYAML can't serialize `datetime.time` values.

This patch changes which method the YAML serializer overrides from `handle_field` to `_value_from_field` because only non-primary key, non-relation fields are passed into `handle_field`. All fields seem to be passed into `_value_for_field`, which seems like the appropriate override since we would always need to handle `TimeField` as a special case in the YAML serializer.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [x] I have added or updated relevant docs, including release notes if applicable.
- [x] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19279,"diff --git a/.gitattributes b/.gitattributes
index 170bbc2b548b..2c9770c278a6 100644
--- a/.gitattributes
+++ b/.gitattributes
@@ -5,3 +5,5 @@
 tests/staticfiles_tests/apps/test/static/test/*txt text eol=lf
 tests/staticfiles_tests/project/documents/test/*txt text eol=lf
 docs/releases/*.txt merge=union
+# Make GitHub syntax-highlight .html files as Django templates
+*.html linguist-language=django
","#### Trac ticket number

n/a

#### Branch description

Added a [linguist override](https://github.com/github-linguist/linguist/blob/main/docs/overrides.md) to make our templates render with its [Jinja (alias Django) language](https://github.com/github-linguist/linguist/blob/06013552cd40e62475af5442fd1bc26bf4aea8ce/lib/linguist/languages.yml#L3580-L3596) on GitHub.

[Before](https://github.com/django/django/blob/30e0a43937e685083fa1210c3594678a3b813806/django/contrib/admin/templates/admin/base.html):

<img width=""2000"" alt=""Xnapper-2025-03-17-11 06 10"" src=""https://github.com/user-attachments/assets/cb10659f-fcb8-4a94-9128-d70c45952fe9"" />

[After](https://github.com/adamchainz/django/blob/linguist_templates/django/contrib/admin/templates/admin/base.html):

<img width=""2000"" alt=""Xnapper-2025-03-17-11 06 19"" src=""https://github.com/user-attachments/assets/d0b90763-d09e-4b64-a8e5-184317d4d2f2"" />


#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [n/a] I have checked the ""Has patch"" ticket flag in the Trac system.
- [n/a] I have added or updated relevant tests.
- [n/a] I have added or updated relevant docs, including release notes if applicable.
- [n/a] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18743,"diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py
index 2f6e93cde8c0..ba44b5ed8717 100644
--- a/tests/queries/test_qs_combinators.py
+++ b/tests/queries/test_qs_combinators.py
@@ -1,7 +1,9 @@
 import operator
+from datetime import datetime
 
 from django.db import DatabaseError, NotSupportedError, connection
 from django.db.models import (
+    DateTimeField,
     Exists,
     F,
     IntegerField,
@@ -10,12 +12,13 @@
     Transform,
     Value,
 )
-from django.db.models.functions import Mod
+from django.db.models.functions import Cast, Mod
 from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature
 from django.test.utils import CaptureQueriesContext
 
 from .models import (
     Annotation,
+    Article,
     Author,
     Celebrity,
     ExtraInfo,
@@ -440,6 +443,39 @@ def test_union_multiple_models_with_values_list_and_annotations(self):
             [(""c1"", -10, ""cb""), (""rn1"", 10, ""rn"")],
         )
 
+    def test_union_multiple_models_with_values_list_and_datetime_annotations(self):
+        gen_x = datetime(1966, 6, 6)
+        Article.objects.create(name=""Bellatrix"", created=gen_x)
+        column_names = [""name"", ""created"", ""order""]
+        qs1 = Article.objects.annotate(order=Value(1)).values_list(*column_names)
+
+        gen_y = datetime(1991, 10, 10)
+        ReservedName.objects.create(name=""Rigel"", order=2)
+        qs2 = ReservedName.objects.annotate(
+            created=Cast(Value(gen_y), DateTimeField())
+        ).values_list(*column_names)
+
+        expected_result = [(""Bellatrix"", gen_x, 1), (""Rigel"", gen_y, 2)]
+        self.assertEqual(list(qs1.union(qs2).order_by(""order"")), expected_result)
+
+    def test_union_multiple_models_with_values_and_datetime_annotations(self):
+        gen_x = datetime(1966, 6, 6)
+        Article.objects.create(name=""Bellatrix"", created=gen_x)
+        column_names = [""name"", ""created"", ""order""]
+        qs1 = Article.objects.values(*column_names, order=Value(1))
+
+        gen_y = datetime(1991, 10, 10)
+        ReservedName.objects.create(name=""Rigel"", order=2)
+        qs2 = ReservedName.objects.values(
+            *column_names, created=Cast(Value(gen_y), DateTimeField())
+        )
+
+        expected_result = [
+            {""name"": ""Bellatrix"", ""created"": gen_x, ""order"": 1},
+            {""name"": ""Rigel"", ""created"": gen_y, ""order"": 2},
+        ]
+        self.assertEqual(list(qs1.union(qs2).order_by(""order"")), expected_result)
+
     def test_union_in_subquery(self):
         ReservedName.objects.bulk_create(
             [
","#### Trac ticket number

ticket-35011

#### Branch description

While attempting to fix ticket 35011 for Django-5.1, I first wrote some unit tests. I then discovered that this issue has been fixed in Django-5.2a. These are two additional tests to prove that the given ticket can be closed. 

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19334,"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 0d1fe5fb434e..9fde8496e933 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2339,6 +2339,9 @@ def set_group_by(self, allow_aliases=True):
             self.append_annotation_mask(group_by_annotations)
             self.select = tuple(values_select.values())
             self.values_select = tuple(values_select)
+            if self.selected is not None:
+                for index, value_select in enumerate(values_select):
+                    self.selected[value_select] = index
         group_by = list(self.select)
         for alias, annotation in self.annotation_select.items():
             if not (group_by_cols := annotation.get_group_by_cols()):
diff --git a/docs/releases/5.2.1.txt b/docs/releases/5.2.1.txt
index 16cbd2c9bac6..a4e73841bdf1 100644
--- a/docs/releases/5.2.1.txt
+++ b/docs/releases/5.2.1.txt
@@ -9,4 +9,6 @@ Django 5.2.1 fixes several bugs in 5.2.
 Bugfixes
 ========
 
-* ...
+* Fixed a regression in Django 5.2 that caused a crash when annotating
+  aggregate expressions over query that uses explicit grouping by transforms
+  followed by field references (:ticket:`36292`).
diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py
index 8caefc060c5a..a8ce6ed1d8a5 100644
--- a/tests/aggregation/tests.py
+++ b/tests/aggregation/tests.py
@@ -2210,6 +2210,33 @@ def test_multiple_aggregate_references(self):
             },
         )
 
+    def test_group_by_transform_column(self):
+        self.assertSequenceEqual(
+            Store.objects.values(
+                ""original_opening__date"",
+                ""name"",
+            )
+            .annotate(Count(""books""))
+            .order_by(""name""),
+            [
+                {
+                    ""original_opening__date"": datetime.date(1994, 4, 23),
+                    ""name"": ""Amazon.com"",
+                    ""books__count"": 6,
+                },
+                {
+                    ""original_opening__date"": datetime.date(2001, 3, 15),
+                    ""name"": ""Books.com"",
+                    ""books__count"": 4,
+                },
+                {
+                    ""original_opening__date"": datetime.date(1945, 4, 25),
+                    ""name"": ""Mamma and Pappa's Books"",
+                    ""books__count"": 3,
+                },
+            ],
+        )
+
     def test_group_by_reference_subquery(self):
         author_qs = (
             Author.objects.annotate(publisher_id=F(""book__publisher""))
","

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36292

#### Branch description

Regression in 65ad4ade74dc9208b9d686a451cd6045df0c9c3a.

Refs ticket-28900

Thanks @paltman for the report.
"
django/django,18633,"diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py
index dd3c2e527b97..a1276c71b2e7 100644
--- a/django/contrib/auth/backends.py
+++ b/django/contrib/auth/backends.py
@@ -59,9 +59,7 @@ def _get_user_permissions(self, user_obj):
         return user_obj.user_permissions.all()
 
     def _get_group_permissions(self, user_obj):
-        user_groups_field = get_user_model()._meta.get_field(""groups"")
-        user_groups_query = ""group__%s"" % user_groups_field.related_query_name()
-        return Permission.objects.filter(**{user_groups_query: user_obj})
+        return Permission.objects.filter(group__in=user_obj.groups.all())
 
     def _get_permissions(self, user_obj, obj, from_name):
         """"""
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35792

#### Branch description

Changed the `_get_group_permissions` method of the `ModelBackend` to match the suggestion from the ticket.

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes."
django/django,18533,"diff --git a/django/contrib/admin/templates/admin/auth/user/change_password.html b/django/contrib/admin/templates/admin/auth/user/change_password.html
index c9a494dc19c9..2f96a7143629 100644
--- a/django/contrib/admin/templates/admin/auth/user/change_password.html
+++ b/django/contrib/admin/templates/admin/auth/user/change_password.html
@@ -2,7 +2,7 @@
 {% load i18n static %}
 {% load admin_urls %}
 
-{% block title %}{% if form.errors %}{{ _('Error:') }} {% endif %}{{ block.super }}{% endblock %}
+{% block title %}{% if form.errors %}{% translate ""Error:"" %} {% endif %}{{ block.super }}{% endblock %}
 {% block extrastyle %}
   {{ block.super }}
   <link rel=""stylesheet"" href=""{% static ""admin/css/forms.css"" %}"">
diff --git a/django/contrib/admin/templates/admin/change_form.html b/django/contrib/admin/templates/admin/change_form.html
index b9bde3001896..8e7ced9a4844 100644
--- a/django/contrib/admin/templates/admin/change_form.html
+++ b/django/contrib/admin/templates/admin/change_form.html
@@ -1,7 +1,7 @@
 {% extends ""admin/base_site.html"" %}
 {% load i18n admin_urls static admin_modify %}
 
-{% block title %}{% if errors %}{{ _('Error:') }} {% endif %}{{ block.super }}{% endblock %}
+{% block title %}{% if errors %}{% translate ""Error:"" %} {% endif %}{{ block.super }}{% endblock %}
 {% block extrahead %}{{ block.super }}
 <script src=""{% url 'admin:jsi18n' %}""></script>
 {{ media }}
diff --git a/django/contrib/admin/templates/admin/change_list.html b/django/contrib/admin/templates/admin/change_list.html
index fa189102bb6f..b0b4c31619a9 100644
--- a/django/contrib/admin/templates/admin/change_list.html
+++ b/django/contrib/admin/templates/admin/change_list.html
@@ -1,7 +1,7 @@
 {% extends ""admin/base_site.html"" %}
 {% load i18n admin_urls static admin_list %}
 
-{% block title %}{% if cl.formset and cl.formset.errors %}{{ _('Error:') }} {% endif %}{{ block.super }}{% endblock %}
+{% block title %}{% if cl.formset and cl.formset.errors %}{% translate ""Error:"" %} {% endif %}{{ block.super }}{% endblock %}
 {% block extrastyle %}
   {{ block.super }}
   <link rel=""stylesheet"" href=""{% static ""admin/css/changelists.css"" %}"">
diff --git a/django/contrib/admin/templates/admin/login.html b/django/contrib/admin/templates/admin/login.html
index 8c2c7d11ff35..3999dd370300 100644
--- a/django/contrib/admin/templates/admin/login.html
+++ b/django/contrib/admin/templates/admin/login.html
@@ -1,7 +1,7 @@
 {% extends ""admin/base_site.html"" %}
 {% load i18n static %}
 
-{% block title %}{% if form.errors %}{{ _('Error:') }} {% endif %}{{ block.super }}{% endblock %}
+{% block title %}{% if form.errors %}{% translate ""Error:"" %} {% endif %}{{ block.super }}{% endblock %}
 {% block extrastyle %}{{ block.super }}<link rel=""stylesheet"" href=""{% static ""admin/css/login.css"" %}"">
 {{ form.media }}
 {% endblock %}
diff --git a/django/contrib/admin/templates/registration/password_change_form.html b/django/contrib/admin/templates/registration/password_change_form.html
index 20c78210c651..3d66aeb16231 100644
--- a/django/contrib/admin/templates/registration/password_change_form.html
+++ b/django/contrib/admin/templates/registration/password_change_form.html
@@ -1,7 +1,7 @@
 {% extends ""admin/base_site.html"" %}
 {% load i18n static %}
 
-{% block title %}{% if form.errors %}{{ _('Error:') }} {% endif %}{{ block.super }}{% endblock %}
+{% block title %}{% if form.errors %}{% translate ""Error:"" %} {% endif %}{{ block.super }}{% endblock %}
 {% block extrastyle %}{{ block.super }}<link rel=""stylesheet"" href=""{% static ""admin/css/forms.css"" %}"">{% endblock %}
 {% block userlinks %}
   {% url 'django-admindocs-docroot' as docsroot %}{% if docsroot %}<a href=""{{ docsroot }}"">{% translate 'Documentation' %}</a> / {% endif %} {% translate 'Change password' %} /
diff --git a/django/contrib/admin/templates/registration/password_reset_confirm.html b/django/contrib/admin/templates/registration/password_reset_confirm.html
index 3866b5aead18..5e1478be83ab 100644
--- a/django/contrib/admin/templates/registration/password_reset_confirm.html
+++ b/django/contrib/admin/templates/registration/password_reset_confirm.html
@@ -1,7 +1,7 @@
 {% extends ""admin/base_site.html"" %}
 {% load i18n static %}
 
-{% block title %}{% if form.new_password1.errors or form.new_password2.errors %}{{ _('Error:') }} {% endif %}{{ block.super }}{% endblock %}
+{% block title %}{% if form.new_password1.errors or form.new_password2.errors %}{% translate ""Error:"" %} {% endif %}{{ block.super }}{% endblock %}
 {% block extrastyle %}{{ block.super }}<link rel=""stylesheet"" href=""{% static ""admin/css/forms.css"" %}"">{% endblock %}
 {% block breadcrumbs %}
 <div class=""breadcrumbs"">
diff --git a/django/contrib/admin/templates/registration/password_reset_form.html b/django/contrib/admin/templates/registration/password_reset_form.html
index 7200e0f8befa..e12189af5420 100644
--- a/django/contrib/admin/templates/registration/password_reset_form.html
+++ b/django/contrib/admin/templates/registration/password_reset_form.html
@@ -1,7 +1,7 @@
 {% extends ""admin/base_site.html"" %}
 {% load i18n static %}
 
-{% block title %}{% if form.email.errors %}{{ _('Error:') }} {% endif %}{{ block.super }}{% endblock %}
+{% block title %}{% if form.email.errors %}{% translate ""Error:"" %} {% endif %}{{ block.super }}{% endblock %}
 {% block extrastyle %}{{ block.super }}<link rel=""stylesheet"" href=""{% static ""admin/css/forms.css"" %}"">{% endblock %}
 {% block breadcrumbs %}
 <div class=""breadcrumbs"">
","#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35706

#### Branch description
Replace `'_('Error:')'` with `'{% translate 'Error:' %}'` for consistency.
#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,19170,"diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 13afa5988f68..ebfe8572fecb 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -254,22 +254,25 @@ def apply_migration(self, state, migration, fake=False, fake_initial=False):
                 ) as schema_editor:
                     state = migration.apply(state, schema_editor)
                     if not schema_editor.deferred_sql:
-                        self.record_migration(migration)
+                        self.record_migration(migration.app_label, migration.name)
                         migration_recorded = True
         if not migration_recorded:
-            self.record_migration(migration)
+            self.record_migration(migration.app_label, migration.name)
         # Report progress
         if self.progress_callback:
             self.progress_callback(""apply_success"", migration, fake)
         return state
 
-    def record_migration(self, migration):
+    def record_migration(self, app_label, name, forward=True):
+        migration = self.loader.disk_migrations.get((app_label, name))
         # For replacement migrations, record individual statuses
-        if migration.replaces:
-            for app_label, name in migration.replaces:
-                self.recorder.record_applied(app_label, name)
+        if migration and migration.replaces:
+            for replaced_app_label, replaced_name in migration.replaces:
+                self.record_migration(replaced_app_label, replaced_name, forward)
+        if forward:
+            self.recorder.record_applied(app_label, name)
         else:
-            self.recorder.record_applied(migration.app_label, migration.name)
+            self.recorder.record_unapplied(app_label, name)
 
     def unapply_migration(self, state, migration, fake=False):
         """"""Run a migration backwards.""""""
@@ -280,11 +283,7 @@ def unapply_migration(self, state, migration, fake=False):
                 atomic=migration.atomic
             ) as schema_editor:
                 state = migration.unapply(state, schema_editor)
-        # For replacement migrations, also record individual statuses.
-        if migration.replaces:
-            for app_label, name in migration.replaces:
-                self.recorder.record_unapplied(app_label, name)
-        self.recorder.record_unapplied(migration.app_label, migration.name)
+        self.record_migration(migration.app_label, migration.name, forward=False)
         # Report progress
         if self.progress_callback:
             self.progress_callback(""unapply_success"", migration, fake)
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index dd54e4fe502f..3b4da2bbb743 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -3073,6 +3073,50 @@ def test_squash_partially_applied(self):
                 ],
             )
 
+    def test_double_replaced_migrations_are_recorded(self):
+        """"""
+        All recursively replaced migrations should be recorded/unrecorded, when
+        migrating an app with double squashed migrations.
+        """"""
+        out = io.StringIO()
+        with self.temporary_migration_module(
+            module=""migrations.test_migrations_squashed_double""
+        ):
+            recorder = MigrationRecorder(connection)
+            applied_app_labels = [
+                app_label for app_label, _ in recorder.applied_migrations()
+            ]
+            self.assertNotIn(""migrations"", applied_app_labels)
+
+            call_command(
+                ""migrate"", ""migrations"", ""--plan"", interactive=False, stdout=out
+            )
+            migration_plan = re.findall(""migrations.(.+)\n"", out.getvalue())
+            # Only the top-level replacement migration should be applied.
+            self.assertEqual(migration_plan, [""0005_squashed_0003_and_0004""])
+
+            call_command(""migrate"", ""migrations"", interactive=False, verbosity=0)
+            applied_migrations = recorder.applied_migrations()
+            # Make sure all replaced migrations are recorded.
+            self.assertIn((""migrations"", ""0001_initial""), applied_migrations)
+            self.assertIn((""migrations"", ""0002_auto""), applied_migrations)
+            self.assertIn(
+                (""migrations"", ""0003_squashed_0001_and_0002""), applied_migrations
+            )
+            self.assertIn((""migrations"", ""0004_auto""), applied_migrations)
+            self.assertIn(
+                (""migrations"", ""0005_squashed_0003_and_0004""), applied_migrations
+            )
+
+            # Unapply all migrations from this app.
+            call_command(
+                ""migrate"", ""migrations"", ""zero"", interactive=False, verbosity=0
+            )
+            applied_app_labels = [
+                app_label for app_label, _ in recorder.applied_migrations()
+            ]
+            self.assertNotIn(""migrations"", applied_app_labels)
+
     def test_squashmigrations_initial_attribute(self):
         with self.temporary_migration_module(
             module=""migrations.test_migrations""
diff --git a/tests/migrations/test_migrations_squashed_double/0001_initial.py b/tests/migrations/test_migrations_squashed_double/0001_initial.py
new file mode 100644
index 000000000000..03b4ed839dc4
--- /dev/null
+++ b/tests/migrations/test_migrations_squashed_double/0001_initial.py
@@ -0,0 +1,21 @@
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    operations = [
+        migrations.CreateModel(
+            name=""A"",
+            fields=[
+                (
+                    ""id"",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name=""ID"",
+                    ),
+                ),
+                (""foo"", models.BooleanField()),
+            ],
+        ),
+    ]
diff --git a/tests/migrations/test_migrations_squashed_double/0002_auto.py b/tests/migrations/test_migrations_squashed_double/0002_auto.py
new file mode 100644
index 000000000000..c04820c6a4b8
--- /dev/null
+++ b/tests/migrations/test_migrations_squashed_double/0002_auto.py
@@ -0,0 +1,12 @@
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    dependencies = [(""migrations"", ""0001_initial"")]
+    operations = [
+        migrations.AlterField(
+            model_name=""a"",
+            name=""foo"",
+            field=models.BooleanField(default=True),
+        ),
+    ]
diff --git a/tests/migrations/test_migrations_squashed_double/0003_squashed_0001_and_0002.py b/tests/migrations/test_migrations_squashed_double/0003_squashed_0001_and_0002.py
new file mode 100644
index 000000000000..708f73a105b2
--- /dev/null
+++ b/tests/migrations/test_migrations_squashed_double/0003_squashed_0001_and_0002.py
@@ -0,0 +1,22 @@
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    replaces = [(""migrations"", ""0001_initial""), (""migrations"", ""0002_auto"")]
+    operations = [
+        migrations.CreateModel(
+            name=""A"",
+            fields=[
+                (
+                    ""id"",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name=""ID"",
+                    ),
+                ),
+                (""foo"", models.BooleanField(default=True)),
+            ],
+        ),
+    ]
diff --git a/tests/migrations/test_migrations_squashed_double/0004_auto.py b/tests/migrations/test_migrations_squashed_double/0004_auto.py
new file mode 100644
index 000000000000..d3a9769c9a27
--- /dev/null
+++ b/tests/migrations/test_migrations_squashed_double/0004_auto.py
@@ -0,0 +1,12 @@
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    dependencies = [(""migrations"", ""0002_auto"")]
+    operations = [
+        migrations.AlterField(
+            model_name=""a"",
+            name=""foo"",
+            field=models.BooleanField(default=False),
+        ),
+    ]
diff --git a/tests/migrations/test_migrations_squashed_double/0005_squashed_0003_and_0004.py b/tests/migrations/test_migrations_squashed_double/0005_squashed_0003_and_0004.py
new file mode 100644
index 000000000000..246d68272dd1
--- /dev/null
+++ b/tests/migrations/test_migrations_squashed_double/0005_squashed_0003_and_0004.py
@@ -0,0 +1,25 @@
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    replaces = [
+        (""migrations"", ""0003_squashed_0001_and_0002""),
+        (""migrations"", ""0004_auto""),
+    ]
+    operations = [
+        migrations.CreateModel(
+            name=""A"",
+            fields=[
+                (
+                    ""id"",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name=""ID"",
+                    ),
+                ),
+                (""foo"", models.BooleanField(default=False)),
+            ],
+        ),
+    ]
diff --git a/tests/migrations/test_migrations_squashed_double/__init__.py b/tests/migrations/test_migrations_squashed_double/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
",From https://github.com/django/django/pull/19163 with minor formatting changes and updated commit messsage
django/django,7605,"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 40f1411c58a5..39906a53570f 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -102,11 +102,8 @@ class Field(RegisterLookupMixin):
     empty_strings_allowed = True
     empty_values = list(validators.EMPTY_VALUES)
 
-    # These track each time a Field instance is created. Used to retain order.
-    # The auto_creation_counter is used for fields that Django implicitly
-    # creates, creation_counter is used for all user-specified fields.
+    # Tracks each time a user-specified Field instance is created. Used to retain order.
     creation_counter = 0
-    auto_creation_counter = -1
     default_validators = []  # Default set of validators
     default_error_messages = {
         'invalid_choice': _('Value %(value)r is not a valid choice.'),
@@ -169,10 +166,7 @@ def __init__(self, verbose_name=None, name=None, primary_key=False,
         self.auto_created = auto_created
 
         # Adjust the appropriate creation counter, and save our local copy.
-        if auto_created:
-            self.creation_counter = Field.auto_creation_counter
-            Field.auto_creation_counter -= 1
-        else:
+        if not auto_created:
             self.creation_counter = Field.creation_counter
             Field.creation_counter += 1
 
",Added in 9c52d56f6f8a9cdafb231adf9f4110473099c9b5 but has never been accessed outside of the code that decrements it.
django/django,18246,"diff --git a/docs/intro/tutorial02.txt b/docs/intro/tutorial02.txt
index 3cda0d38d6bc..73d1c245866d 100644
--- a/docs/intro/tutorial02.txt
+++ b/docs/intro/tutorial02.txt
@@ -255,82 +255,7 @@ Don't worry, you're not expected to read them every time Django makes one, but
 they're designed to be human-editable in case you want to manually tweak how
 Django changes things.
 
-There's a command that will run the migrations for you and manage your database
-schema automatically - that's called :djadmin:`migrate`, and we'll come to it in a
-moment - but first, let's see what SQL that migration would run. The
-:djadmin:`sqlmigrate` command takes migration names and returns their SQL:
-
-.. console::
-
-    $ python manage.py sqlmigrate polls 0001
-
-You should see something similar to the following (we've reformatted it for
-readability):
-
-.. code-block:: sql
-
-    BEGIN;
-    --
-    -- Create model Question
-    --
-    CREATE TABLE ""polls_question"" (
-        ""id"" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
-        ""question_text"" varchar(200) NOT NULL,
-        ""pub_date"" timestamp with time zone NOT NULL
-    );
-    --
-    -- Create model Choice
-    --
-    CREATE TABLE ""polls_choice"" (
-        ""id"" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
-        ""choice_text"" varchar(200) NOT NULL,
-        ""votes"" integer NOT NULL,
-        ""question_id"" bigint NOT NULL
-    );
-    ALTER TABLE ""polls_choice""
-      ADD CONSTRAINT ""polls_choice_question_id_c5b4b260_fk_polls_question_id""
-        FOREIGN KEY (""question_id"")
-        REFERENCES ""polls_question"" (""id"")
-        DEFERRABLE INITIALLY DEFERRED;
-    CREATE INDEX ""polls_choice_question_id_c5b4b260"" ON ""polls_choice"" (""question_id"");
-
-    COMMIT;
-
-Note the following:
-
-* The exact output will vary depending on the database you are using. The
-  example above is generated for PostgreSQL.
-
-* Table names are automatically generated by combining the name of the app
-  (``polls``) and the lowercase name of the model -- ``question`` and
-  ``choice``. (You can override this behavior.)
-
-* Primary keys (IDs) are added automatically. (You can override this, too.)
-
-* By convention, Django appends ``""_id""`` to the foreign key field name.
-  (Yes, you can override this, as well.)
-
-* The foreign key relationship is made explicit by a ``FOREIGN KEY``
-  constraint. Don't worry about the ``DEFERRABLE`` parts; it's telling
-  PostgreSQL to not enforce the foreign key until the end of the transaction.
-
-* It's tailored to the database you're using, so database-specific field types
-  such as ``auto_increment`` (MySQL), ``bigint PRIMARY KEY GENERATED BY DEFAULT
-  AS IDENTITY`` (PostgreSQL), or ``integer primary key autoincrement`` (SQLite)
-  are handled for you automatically. Same goes for the quoting of field names
-  -- e.g., using double quotes or single quotes.
-
-* The :djadmin:`sqlmigrate` command doesn't actually run the migration on your
-  database - instead, it prints it to the screen so that you can see what SQL
-  Django thinks is required. It's useful for checking what Django is going to
-  do or if you have database administrators who require SQL scripts for
-  changes.
-
-If you're interested, you can also run
-:djadmin:`python manage.py check <check>`; this checks for any problems in
-your project without making migrations or touching the database.
-
-Now, run :djadmin:`migrate` again to create those model tables in your database:
+Now, run :djadmin:`migrate` to create those model tables in your database:
 
 .. console::
 
@@ -341,6 +266,10 @@ Now, run :djadmin:`migrate` again to create those model tables in your database:
       Rendering model states... DONE
       Applying polls.0001_initial... OK
 
+If you're interested, you can also run
+:djadmin:`python manage.py check <check>`; this checks for any problems in
+your project without making migrations or touching the database.
+
 The :djadmin:`migrate` command takes all the migrations that haven't been
 applied (Django tracks which ones are applied using a special table in your
 database called ``django_migrations``) and runs them against your database -
diff --git a/docs/topics/db/models.txt b/docs/topics/db/models.txt
index aefb35ed9c9c..abd031e85350 100644
--- a/docs/topics/db/models.txt
+++ b/docs/topics/db/models.txt
@@ -47,9 +47,9 @@ The above ``Person`` model would create a database table like this:
 
 Some technical notes:
 
-* The name of the table, ``myapp_person``, is automatically derived from
-  some model metadata but can be overridden. See :ref:`table-names` for more
-  details.
+* By default, the name of the table (``myapp_person``) is automatically derived
+  from model metadata, combining the name of the app (``myapp``) and the lowercase
+  name of the model (``person``). See :ref:`table-names` for more details.
 
 * An ``id`` field is added automatically, but this behavior can be
   overridden. See :ref:`automatic-primary-key-fields`.
@@ -58,6 +58,15 @@ Some technical notes:
   syntax, but it's worth noting Django uses SQL tailored to the database
   backend specified in your :doc:`settings file </topics/settings>`.
 
+* The foreign key relationships are made explicit by a ``FOREIGN KEY``
+  constraint.
+
+* It's tailored to the database you're using, so database-specific field types
+  such as ``auto_increment`` (MySQL), ``bigint PRIMARY KEY GENERATED BY DEFAULT
+  AS IDENTITY`` (PostgreSQL), or ``integer primary key autoincrement`` (SQLite)
+  are handled for you automatically. The same goes for the quoting of field names
+  -- e.g., using double quotes or single quotes.
+
 Using models
 ============
 
","Removing unnecessary section in the second step of the tutorial

This work is part of effort done in the Sprints in DjangoCon Europe in Vigo with Daniele Procida @evildmp

Task picked from the task list in https://docs.google.com/spreadsheets/d/16UTGwtAoOwznc46cszbwAHU9xbukXnnpwG-faE94Rw8/edit?gid=0#gid=0

Removed the unnecessary section on the tutorial but kept the relevant information into the [models](https://docs.djangoproject.com/en/5.0/topics/db/models/) section. The reason behind the change it is because the removed section distracts far more users than the ones it helps. This allows users doing the tutorial to keep the focus on the essential things and avoid the more technical part that, at the stage of the learning process, it does not help that much.

cc @nessita 
"
django/django,19056,"diff --git a/docs/ref/contrib/postgres/fields.txt b/docs/ref/contrib/postgres/fields.txt
index ec767b50e91a..65bff7f9e615 100644
--- a/docs/ref/contrib/postgres/fields.txt
+++ b/docs/ref/contrib/postgres/fields.txt
@@ -517,6 +517,15 @@ excluded, that is ``[)`` (see the PostgreSQL documentation for details about
 fields (:class:`.DateTimeRangeField` and :class:`.DecimalRangeField`) by using
 the ``default_bounds`` argument.
 
+.. admonition:: PostgreSQL normalizes a range with no points to the empty range
+
+    A range with equal values specified for an included lower bound and an
+    excluded upper bound, such as ``Range(datetime.date(2005, 6, 21),
+    datetime.date(2005, 6, 21))`` or ``[4, 4)``, has no points. PostgreSQL will
+    normalize the value to empty when saving to the database, and the original
+    bound values will be lost. See the `PostgreSQL documentation for details
+    <https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-IO>`_.
+
 ``IntegerRangeField``
 ---------------------
 
","

#### Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-36078

#### Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [ ] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
django/django,18845,"diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py
index 2c1aa3250632..2a39005f9ff0 100644
--- a/django/db/backends/sqlite3/features.py
+++ b/django/db/backends/sqlite3/features.py
@@ -50,6 +50,10 @@ class DatabaseFeatures(BaseDatabaseFeatures):
         # The django_format_dtdelta() function doesn't properly handle mixed
         # Date/DateTime fields and timedeltas.
         ""expressions.tests.FTimeDeltaTests.test_mixed_comparisons1"",
+        # SQLite doesn't parse escaped double quotes in the JSON path notation,
+        # so it cannot match keys that contains double quotes (#35842).
+        ""model_fields.test_jsonfield.TestQuerying.""
+        ""test_lookups_special_chars_double_quotes"",
     }
     create_test_table_with_composite_primary_key = """"""
         CREATE TABLE test_table_composite_pk (
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index 1b219e620c9a..1898b127ce94 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -230,10 +230,11 @@ def as_mysql(self, compiler, connection):
 
     def as_oracle(self, compiler, connection):
         sql, params = self.as_sql(
-            compiler, connection, template=""JSON_EXISTS(%s, '%%s')""
+            compiler, connection, template=""JSON_EXISTS(%s, q'\uffff%%s\uffff')""
         )
         # Add paths directly into SQL because path expressions cannot be passed
-        # as bind variables on Oracle.
+        # as bind variables on Oracle. Use a custom delimiter to prevent the
+        # JSON path from escaping the SQL literal. See comment in KeyTransform.
         return sql % tuple(params), []
 
     def as_postgresql(self, compiler, connection):
@@ -362,10 +363,24 @@ def as_oracle(self, compiler, connection):
         json_path = compile_json_path(key_transforms)
         if connection.features.supports_primitives_in_json_field:
             sql = (
-                ""COALESCE(JSON_VALUE(%s, '%s'), JSON_QUERY(%s, '%s' DISALLOW SCALARS))""
+                ""COALESCE(""
+                ""JSON_VALUE(%s, q'\uffff%s\uffff'),""
+                ""JSON_QUERY(%s, q'\uffff%s\uffff' DISALLOW SCALARS)""
+                "")""
             )
         else:
-            sql = ""COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))""
+            sql = (
+                ""COALESCE(""
+                ""JSON_QUERY(%s, q'\uffff%s\uffff'),""
+                ""JSON_VALUE(%s, q'\uffff%s\uffff')""
+                "")""
+            )
+        # Add paths directly into SQL because path expressions cannot be passed
+        # as bind variables on Oracle. Use a custom delimiter to prevent the
+        # JSON path from escaping the SQL literal. Each key in the JSON path is
+        # passed through json.dumps() with ensure_ascii=True (the default),
+        # which converts the delimiter into the escaped \uffff format. This
+        # ensures that the delimiter is not present in the JSON path.
         return sql % ((lhs, json_path) * 2), tuple(params) * 2
 
     def as_postgresql(self, compiler, connection):
diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py
index ff42b1a14c38..4c3dc611766d 100644
--- a/tests/model_fields/test_jsonfield.py
+++ b/tests/model_fields/test_jsonfield.py
@@ -808,6 +808,59 @@ def test_deep_lookup_transform(self):
         )
         self.assertIs(NullableJSONModel.objects.filter(value__c__lt=5).exists(), False)
 
+    def test_lookups_special_chars(self):
+        test_keys = [
+            ""CONTROL"",
+            ""single'"",
+            ""dollar$"",
+            ""dot.dot"",
+            ""with space"",
+            ""back\\slash"",
+            ""question?mark"",
+            ""user@name"",
+            ""emo🤡'ji"",
+            ""com,ma"",
+            ""curly{{{brace}}}s"",
+            ""escape\uffff'seq'\uffffue\uffff'nce"",
+        ]
+        json_value = {key: ""some value"" for key in test_keys}
+        obj = NullableJSONModel.objects.create(value=json_value)
+        obj.refresh_from_db()
+        self.assertEqual(obj.value, json_value)
+
+        for key in test_keys:
+            lookups = {
+                ""has_key"": Q(value__has_key=key),
+                ""has_keys"": Q(value__has_keys=[key, ""CONTROL""]),
+                ""has_any_keys"": Q(value__has_any_keys=[key, ""does_not_exist""]),
+                ""exact"": Q(**{f""value__{key}"": ""some value""}),
+            }
+            for lookup, condition in lookups.items():
+                results = NullableJSONModel.objects.filter(condition)
+                with self.subTest(key=key, lookup=lookup):
+                    self.assertSequenceEqual(results, [obj])
+
+    def test_lookups_special_chars_double_quotes(self):
+        test_keys = [
+            'double""',
+            ""m\\i@x. m🤡'a,t{{{ch}}}e?d$\""'es\uffff'ca\uffff'pe"",
+        ]
+        json_value = {key: ""some value"" for key in test_keys}
+        obj = NullableJSONModel.objects.create(value=json_value)
+        obj.refresh_from_db()
+        self.assertEqual(obj.value, json_value)
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__has_keys=test_keys), [obj]
+        )
+        for key in test_keys:
+            with self.subTest(key=key):
+                results = NullableJSONModel.objects.filter(
+                    Q(value__has_key=key),
+                    Q(value__has_any_keys=[key, ""does_not_exist""]),
+                    Q(**{f""value__{key}"": ""some value""}),
+                )
+                self.assertSequenceEqual(results, [obj])
+
     def test_lookup_exclude(self):
         tests = [
             (Q(value__a=""b""), [self.objs[0]]),
","## Trac ticket number
<!-- Replace XXXXX with the corresponding Trac ticket number, or delete the line and write ""N/A"" if this is a trivial PR. -->

ticket-35842

## Branch description

There are two parts here:

### Oracle

The ticket suggests using the `PASSING` clause on Oracle to pass the path expression as a bind variable. Oracle's documentation only shows examples of using the variable in a [""filter expression""](https://docs.oracle.com/en/database/oracle/oracle-database/23/adjsn/sql-json-path-expression-syntax.html#ADJSN-GUID-AEBAD813-99AB-418A-93AB-F96BC1658618) within the path notation, where the variable is compared to the value at a given path.

The given example is:

```sql
SELECT count(*) FROM j_purchaseorder
WHERE json_exists(po_document, '$.PONumber?(@ > $d)'
PASSING to_number(:1) AS ""d"" TYPE(STRICT));
```

In the query, the SQL bind parameter (`:1`) is bound to the SQL/JSON variable `d`. Then, the `d` variable is used in a ""filter expression"", which roughly translates to ""the value at the key `PONumber` is greater than the value of `d`"". It does not give you an example of something like:

```sql
SELECT count(*) FROM j_purchaseorder
WHERE json_exists(po_document, '$d'
PASSING :1 AS ""d"" TYPE(STRICT));
```

where `d` is used as part of the path itself. I tried implementing it in different ways (e.g. with or without a single quote around `$d`, doing `$.$d`, etc.), but I couldn't get it to work. I'm starting to think that it's just not supported, because their syntax for path expression can be much more complex (i.e. it can include things like the filter expressions), which might be the reason why it needs to be processed as part of the SQL query itself.

So, I opted for the other approach of using [a different quote delimiter](https://docs.oracle.com/cd/B19306_01/server.102/b14200/sql_elements003.htm#i42617). I'm not sure what is the best character to use, but apparently we can use `\uffff` which is a ""non-character"" code point. See also this StackOverflow question: https://stackoverflow.com/questions/6493956/least-used-unicode-delimiter

I also tried emojis and they do work, but I doubt we want to use that as the actual delimiter. I chose to use `\uffff` instead.

This issue likely also affects other places where we format the path expression directly to the SQL string, such as the `KeyTransform` implementation. I've updated that accordingly. (I have yet to add the tests though, will do that later.)

### SQLite

As mentioned in the ticket, there is no way we can support using double quotes that are properly escaped (for example, with other special characters like `.`).

I think the issue is a limitation on the SQLite itself and there's not much we can do about it. So for now, I just added a new database flag to acknowledge the behavior, and the corresponding tests with various special characters. The tests will fail on SQLite if they ever fix the bug in a new version.

## Livestream

I did a livestream as I worked on this ticket. The recording is up on youtube:  https://www.youtube.com/watch?v=_LlhHJCgPcs

(I set the noise gate for my mic a bit too high though, so my voice cuts in and out a bit unfortunately.)

## Checklist
- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->
- [x] The commit message is written in past tense, mentions the ticket number, and ends with a period.
- [x] I have checked the ""Has patch"" ticket flag in the Trac system.
- [x] I have added or updated relevant tests.
- [ ] I have added or updated relevant docs, including release notes if applicable.
- [ ] I have attached screenshots in both light and dark modes for any UI changes.
"
